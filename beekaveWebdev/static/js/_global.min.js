/*!
 * jQuery JavaScript Library v1.7.2
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Wed Mar 21 12:46:34 2012 -0700
 */
(function(bd, L) {
    var av = bd.document,
        bu = bd.navigator,
        bm = bd.location;
    var b = (function() {
        var bF = function(b0, b1) {
                return new bF.fn.init(b0, b1, bD);
            },
            bU = bd.jQuery,
            bH = bd.$,
            bD, bY = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
            bM = /\S/,
            bI = /^\s+/,
            bE = /\s+$/,
            bA = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
            bN = /^[\],:{}\s]*$/,
            bW = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
            bP = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
            bJ = /(?:^|:|,)(?:\s*\[)+/g,
            by = /(webkit)[ \/]([\w.]+)/,
            bR = /(opera)(?:.*version)?[ \/]([\w.]+)/,
            bQ = /(msie) ([\w.]+)/,
            bS = /(mozilla)(?:.*? rv:([\w.]+))?/,
            bB = /-([a-z]|[0-9])/ig,
            bZ = /^-ms-/,
            bT = function(b0, b1) {
                return (b1 + "").toUpperCase();
            },
            bX = bu.userAgent,
            bV, bC, e, bL = Object.prototype.toString,
            bG = Object.prototype.hasOwnProperty,
            bz = Array.prototype.push,
            bK = Array.prototype.slice,
            bO = String.prototype.trim,
            bv = Array.prototype.indexOf,
            bx = {};
        bF.fn = bF.prototype = {
            constructor: bF,
            init: function(b0, b4, b3) {
                var b2, b5, b1, b6;
                if (!b0) {
                    return this;
                }
                if (b0.nodeType) {
                    this.context = this[0] = b0;
                    this.length = 1;
                    return this;
                }
                if (b0 === "body" && !b4 && av.body) {
                    this.context = av;
                    this[0] = av.body;
                    this.selector = b0;
                    this.length = 1;
                    return this;
                }
                if (typeof b0 === "string") {
                    if (b0.charAt(0) === "<" && b0.charAt(b0.length - 1) === ">" && b0.length >= 3) {
                        b2 = [null, b0, null];
                    } else {
                        b2 = bY.exec(b0);
                    }
                    if (b2 && (b2[1] || !b4)) {
                        if (b2[1]) {
                            b4 = b4 instanceof bF ? b4[0] : b4;
                            b6 = (b4 ? b4.ownerDocument || b4 : av);
                            b1 = bA.exec(b0);
                            if (b1) {
                                if (bF.isPlainObject(b4)) {
                                    b0 = [av.createElement(b1[1])];
                                    bF.fn.attr.call(b0, b4, true);
                                } else {
                                    b0 = [b6.createElement(b1[1])];
                                }
                            } else {
                                b1 = bF.buildFragment([b2[1]], [b6]);
                                b0 = (b1.cacheable ? bF.clone(b1.fragment) : b1.fragment).childNodes;
                            }
                            return bF.merge(this, b0);
                        } else {
                            b5 = av.getElementById(b2[2]);
                            if (b5 && b5.parentNode) {
                                if (b5.id !== b2[2]) {
                                    return b3.find(b0);
                                }
                                this.length = 1;
                                this[0] = b5;
                            }
                            this.context = av;
                            this.selector = b0;
                            return this;
                        }
                    } else {
                        if (!b4 || b4.jquery) {
                            return (b4 || b3).find(b0);
                        } else {
                            return this.constructor(b4).find(b0);
                        }
                    }
                } else {
                    if (bF.isFunction(b0)) {
                        return b3.ready(b0);
                    }
                }
                if (b0.selector !== L) {
                    this.selector = b0.selector;
                    this.context = b0.context;
                }
                return bF.makeArray(b0, this);
            },
            selector: "",
            jquery: "1.7.2",
            length: 0,
            size: function() {
                return this.length;
            },
            toArray: function() {
                return bK.call(this, 0);
            },
            get: function(b0) {
                return b0 == null ? this.toArray() : (b0 < 0 ? this[this.length + b0] : this[b0]);
            },
            pushStack: function(b1, b3, b0) {
                var b2 = this.constructor();
                if (bF.isArray(b1)) {
                    bz.apply(b2, b1);
                } else {
                    bF.merge(b2, b1);
                }
                b2.prevObject = this;
                b2.context = this.context;
                if (b3 === "find") {
                    b2.selector = this.selector + (this.selector ? " " : "") + b0;
                } else {
                    if (b3) {
                        b2.selector = this.selector + "." + b3 + "(" + b0 + ")";
                    }
                }
                return b2;
            },
            each: function(b1, b0) {
                return bF.each(this, b1, b0);
            },
            ready: function(b0) {
                bF.bindReady();
                bC.add(b0);
                return this;
            },
            eq: function(b0) {
                b0 = +b0;
                return b0 === -1 ? this.slice(b0) : this.slice(b0, b0 + 1);
            },
            first: function() {
                return this.eq(0);
            },
            last: function() {
                return this.eq(-1);
            },
            slice: function() {
                return this.pushStack(bK.apply(this, arguments), "slice", bK.call(arguments).join(","));
            },
            map: function(b0) {
                return this.pushStack(bF.map(this, function(b2, b1) {
                    return b0.call(b2, b1, b2);
                }));
            },
            end: function() {
                return this.prevObject || this.constructor(null);
            },
            push: bz,
            sort: [].sort,
            splice: [].splice
        };
        bF.fn.init.prototype = bF.fn;
        bF.extend = bF.fn.extend = function() {
            var b9, b2, b0, b1, b6, b7, b5 = arguments[0] || {},
                b4 = 1,
                b3 = arguments.length,
                b8 = false;
            if (typeof b5 === "boolean") {
                b8 = b5;
                b5 = arguments[1] || {};
                b4 = 2;
            }
            if (typeof b5 !== "object" && !bF.isFunction(b5)) {
                b5 = {};
            }
            if (b3 === b4) {
                b5 = this;
                --b4;
            }
            for (; b4 < b3; b4++) {
                if ((b9 = arguments[b4]) != null) {
                    for (b2 in b9) {
                        b0 = b5[b2];
                        b1 = b9[b2];
                        if (b5 === b1) {
                            continue;
                        }
                        if (b8 && b1 && (bF.isPlainObject(b1) || (b6 = bF.isArray(b1)))) {
                            if (b6) {
                                b6 = false;
                                b7 = b0 && bF.isArray(b0) ? b0 : [];
                            } else {
                                b7 = b0 && bF.isPlainObject(b0) ? b0 : {};
                            }
                            b5[b2] = bF.extend(b8, b7, b1);
                        } else {
                            if (b1 !== L) {
                                b5[b2] = b1;
                            }
                        }
                    }
                }
            }
            return b5;
        };
        bF.extend({
            noConflict: function(b0) {
                if (bd.$ === bF) {
                    bd.$ = bH;
                }
                if (b0 && bd.jQuery === bF) {
                    bd.jQuery = bU;
                }
                return bF;
            },
            isReady: false,
            readyWait: 1,
            holdReady: function(b0) {
                if (b0) {
                    bF.readyWait++;
                } else {
                    bF.ready(true);
                }
            },
            ready: function(b0) {
                if ((b0 === true && !--bF.readyWait) || (b0 !== true && !bF.isReady)) {
                    if (!av.body) {
                        return setTimeout(bF.ready, 1);
                    }
                    bF.isReady = true;
                    if (b0 !== true && --bF.readyWait > 0) {
                        return;
                    }
                    bC.fireWith(av, [bF]);
                    if (bF.fn.trigger) {
                        bF(av).trigger("ready").off("ready");
                    }
                }
            },
            bindReady: function() {
                if (bC) {
                    return;
                }
                bC = bF.Callbacks("once memory");
                if (av.readyState === "complete") {
                    return setTimeout(bF.ready, 1);
                }
                if (av.addEventListener) {
                    av.addEventListener("DOMContentLoaded", e, false);
                    bd.addEventListener("load", bF.ready, false);
                } else {
                    if (av.attachEvent) {
                        av.attachEvent("onreadystatechange", e);
                        bd.attachEvent("onload", bF.ready);
                        var b0 = false;
                        try {
                            b0 = bd.frameElement == null;
                        } catch (b1) {}
                        if (av.documentElement.doScroll && b0) {
                            bw();
                        }
                    }
                }
            },
            isFunction: function(b0) {
                return bF.type(b0) === "function";
            },
            isArray: Array.isArray || function(b0) {
                return bF.type(b0) === "array";
            },
            isWindow: function(b0) {
                return b0 != null && b0 == b0.window;
            },
            isNumeric: function(b0) {
                return !isNaN(parseFloat(b0)) && isFinite(b0);
            },
            type: function(b0) {
                return b0 == null ? String(b0) : bx[bL.call(b0)] || "object";
            },
            isPlainObject: function(b2) {
                if (!b2 || bF.type(b2) !== "object" || b2.nodeType || bF.isWindow(b2)) {
                    return false;
                }
                try {
                    if (b2.constructor && !bG.call(b2, "constructor") && !bG.call(b2.constructor.prototype, "isPrototypeOf")) {
                        return false;
                    }
                } catch (b1) {
                    return false;
                }
                var b0;
                for (b0 in b2) {}
                return b0 === L || bG.call(b2, b0);
            },
            isEmptyObject: function(b1) {
                for (var b0 in b1) {
                    return false;
                }
                return true;
            },
            error: function(b0) {
                throw new Error(b0);
            },
            parseJSON: function(b0) {
                if (typeof b0 !== "string" || !b0) {
                    return null;
                }
                b0 = bF.trim(b0);
                if (bd.JSON && bd.JSON.parse) {
                    return bd.JSON.parse(b0);
                }
                if (bN.test(b0.replace(bW, "@").replace(bP, "]").replace(bJ, ""))) {
                    return (new Function("return " + b0))();
                }
                bF.error("Invalid JSON: " + b0);
            },
            parseXML: function(b2) {
                if (typeof b2 !== "string" || !b2) {
                    return null;
                }
                var b0, b1;
                try {
                    if (bd.DOMParser) {
                        b1 = new DOMParser();
                        b0 = b1.parseFromString(b2, "text/xml");
                    } else {
                        b0 = new ActiveXObject("Microsoft.XMLDOM");
                        b0.async = "false";
                        b0.loadXML(b2);
                    }
                } catch (b3) {
                    b0 = L;
                }
                if (!b0 || !b0.documentElement || b0.getElementsByTagName("parsererror").length) {
                    bF.error("Invalid XML: " + b2);
                }
                return b0;
            },
            noop: function() {},
            globalEval: function(b0) {
                if (b0 && bM.test(b0)) {
                    (bd.execScript || function(b1) {
                        bd["eval"].call(bd, b1);
                    })(b0);
                }
            },
            camelCase: function(b0) {
                return b0.replace(bZ, "ms-").replace(bB, bT);
            },
            nodeName: function(b1, b0) {
                return b1.nodeName && b1.nodeName.toUpperCase() === b0.toUpperCase();
            },
            each: function(b3, b6, b2) {
                var b1, b4 = 0,
                    b5 = b3.length,
                    b0 = b5 === L || bF.isFunction(b3);
                if (b2) {
                    if (b0) {
                        for (b1 in b3) {
                            if (b6.apply(b3[b1], b2) === false) {
                                break;
                            }
                        }
                    } else {
                        for (; b4 < b5;) {
                            if (b6.apply(b3[b4++], b2) === false) {
                                break;
                            }
                        }
                    }
                } else {
                    if (b0) {
                        for (b1 in b3) {
                            if (b6.call(b3[b1], b1, b3[b1]) === false) {
                                break;
                            }
                        }
                    } else {
                        for (; b4 < b5;) {
                            if (b6.call(b3[b4], b4, b3[b4++]) === false) {
                                break;
                            }
                        }
                    }
                }
                return b3;
            },
            trim: bO ? function(b0) {
                return b0 == null ? "" : bO.call(b0);
            } : function(b0) {
                return b0 == null ? "" : b0.toString().replace(bI, "").replace(bE, "");
            },
            makeArray: function(b3, b1) {
                var b0 = b1 || [];
                if (b3 != null) {
                    var b2 = bF.type(b3);
                    if (b3.length == null || b2 === "string" || b2 === "function" || b2 === "regexp" || bF.isWindow(b3)) {
                        bz.call(b0, b3);
                    } else {
                        bF.merge(b0, b3);
                    }
                }
                return b0;
            },
            inArray: function(b2, b3, b1) {
                var b0;
                if (b3) {
                    if (bv) {
                        return bv.call(b3, b2, b1);
                    }
                    b0 = b3.length;
                    b1 = b1 ? b1 < 0 ? Math.max(0, b0 + b1) : b1 : 0;
                    for (; b1 < b0; b1++) {
                        if (b1 in b3 && b3[b1] === b2) {
                            return b1;
                        }
                    }
                }
                return -1;
            },
            merge: function(b4, b2) {
                var b3 = b4.length,
                    b1 = 0;
                if (typeof b2.length === "number") {
                    for (var b0 = b2.length; b1 < b0; b1++) {
                        b4[b3++] = b2[b1];
                    }
                } else {
                    while (b2[b1] !== L) {
                        b4[b3++] = b2[b1++];
                    }
                }
                b4.length = b3;
                return b4;
            },
            grep: function(b1, b6, b0) {
                var b2 = [],
                    b5;
                b0 = !!b0;
                for (var b3 = 0, b4 = b1.length; b3 < b4; b3++) {
                    b5 = !!b6(b1[b3], b3);
                    if (b0 !== b5) {
                        b2.push(b1[b3]);
                    }
                }
                return b2;
            },
            map: function(b0, b7, b8) {
                var b5, b6, b4 = [],
                    b2 = 0,
                    b1 = b0.length,
                    b3 = b0 instanceof bF || b1 !== L && typeof b1 === "number" && ((b1 > 0 && b0[0] && b0[b1 - 1]) || b1 === 0 || bF.isArray(b0));
                if (b3) {
                    for (; b2 < b1; b2++) {
                        b5 = b7(b0[b2], b2, b8);
                        if (b5 != null) {
                            b4[b4.length] = b5;
                        }
                    }
                } else {
                    for (b6 in b0) {
                        b5 = b7(b0[b6], b6, b8);
                        if (b5 != null) {
                            b4[b4.length] = b5;
                        }
                    }
                }
                return b4.concat.apply([], b4);
            },
            guid: 1,
            proxy: function(b4, b3) {
                if (typeof b3 === "string") {
                    var b2 = b4[b3];
                    b3 = b4;
                    b4 = b2;
                }
                if (!bF.isFunction(b4)) {
                    return L;
                }
                var b0 = bK.call(arguments, 2),
                    b1 = function() {
                        return b4.apply(b3, b0.concat(bK.call(arguments)));
                    };
                b1.guid = b4.guid = b4.guid || b1.guid || bF.guid++;
                return b1;
            },
            access: function(b0, b6, b9, b7, b4, ca, b8) {
                var b2, b5 = b9 == null,
                    b3 = 0,
                    b1 = b0.length;
                if (b9 && typeof b9 === "object") {
                    for (b3 in b9) {
                        bF.access(b0, b6, b3, b9[b3], 1, ca, b7);
                    }
                    b4 = 1;
                } else {
                    if (b7 !== L) {
                        b2 = b8 === L && bF.isFunction(b7);
                        if (b5) {
                            if (b2) {
                                b2 = b6;
                                b6 = function(cc, cb, cd) {
                                    return b2.call(bF(cc), cd);
                                };
                            } else {
                                b6.call(b0, b7);
                                b6 = null;
                            }
                        }
                        if (b6) {
                            for (; b3 < b1; b3++) {
                                b6(b0[b3], b9, b2 ? b7.call(b0[b3], b3, b6(b0[b3], b9)) : b7, b8);
                            }
                        }
                        b4 = 1;
                    }
                }
                return b4 ? b0 : b5 ? b6.call(b0) : b1 ? b6(b0[0], b9) : ca;
            },
            now: function() {
                return (new Date()).getTime();
            },
            uaMatch: function(b1) {
                b1 = b1.toLowerCase();
                var b0 = by.exec(b1) || bR.exec(b1) || bQ.exec(b1) || b1.indexOf("compatible") < 0 && bS.exec(b1) || [];
                return {
                    browser: b0[1] || "",
                    version: b0[2] || "0"
                };
            },
            sub: function() {
                function b0(b3, b4) {
                    return new b0.fn.init(b3, b4);
                }
                bF.extend(true, b0, this);
                b0.superclass = this;
                b0.fn = b0.prototype = this();
                b0.fn.constructor = b0;
                b0.sub = this.sub;
                b0.fn.init = function b2(b3, b4) {
                    if (b4 && b4 instanceof bF && !(b4 instanceof b0)) {
                        b4 = b0(b4);
                    }
                    return bF.fn.init.call(this, b3, b4, b1);
                };
                b0.fn.init.prototype = b0.fn;
                var b1 = b0(av);
                return b0;
            },
            browser: {}
        });
        bF.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(b1, b0) {
            bx["[object " + b0 + "]"] = b0.toLowerCase();
        });
        bV = bF.uaMatch(bX);
        if (bV.browser) {
            bF.browser[bV.browser] = true;
            bF.browser.version = bV.version;
        }
        if (bF.browser.webkit) {
            bF.browser.safari = true;
        }
        if (bM.test("\xA0")) {
            bI = /^[\s\xA0]+/;
            bE = /[\s\xA0]+$/;
        }
        bD = bF(av);
        if (av.addEventListener) {
            e = function() {
                av.removeEventListener("DOMContentLoaded", e, false);
                bF.ready();
            };
        } else {
            if (av.attachEvent) {
                e = function() {
                    if (av.readyState === "complete") {
                        av.detachEvent("onreadystatechange", e);
                        bF.ready();
                    }
                };
            }
        }

        function bw() {
            if (bF.isReady) {
                return;
            }
            try {
                av.documentElement.doScroll("left");
            } catch (b0) {
                setTimeout(bw, 1);
                return;
            }
            bF.ready();
        }
        return bF;
    })();
    var a3 = {};

    function X(e) {
        var bv = a3[e] = {},
            bw, bx;
        e = e.split(/\s+/);
        for (bw = 0, bx = e.length; bw < bx; bw++) {
            bv[e[bw]] = true;
        }
        return bv;
    }
    b.Callbacks = function(bx) {
        bx = bx ? (a3[bx] || X(bx)) : {};
        var bC = [],
            bD = [],
            by, e, bz, bw, bA, bB, bF = function(bG) {
                var bH, bK, bJ, bI, bL;
                for (bH = 0, bK = bG.length; bH < bK; bH++) {
                    bJ = bG[bH];
                    bI = b.type(bJ);
                    if (bI === "array") {
                        bF(bJ);
                    } else {
                        if (bI === "function") {
                            if (!bx.unique || !bE.has(bJ)) {
                                bC.push(bJ);
                            }
                        }
                    }
                }
            },
            bv = function(bH, bG) {
                bG = bG || [];
                by = !bx.memory || [bH, bG];
                e = true;
                bz = true;
                bB = bw || 0;
                bw = 0;
                bA = bC.length;
                for (; bC && bB < bA; bB++) {
                    if (bC[bB].apply(bH, bG) === false && bx.stopOnFalse) {
                        by = true;
                        break;
                    }
                }
                bz = false;
                if (bC) {
                    if (!bx.once) {
                        if (bD && bD.length) {
                            by = bD.shift();
                            bE.fireWith(by[0], by[1]);
                        }
                    } else {
                        if (by === true) {
                            bE.disable();
                        } else {
                            bC = [];
                        }
                    }
                }
            },
            bE = {
                add: function() {
                    if (bC) {
                        var bG = bC.length;
                        bF(arguments);
                        if (bz) {
                            bA = bC.length;
                        } else {
                            if (by && by !== true) {
                                bw = bG;
                                bv(by[0], by[1]);
                            }
                        }
                    }
                    return this;
                },
                remove: function() {
                    if (bC) {
                        var bG = arguments,
                            bI = 0,
                            bJ = bG.length;
                        for (; bI < bJ; bI++) {
                            for (var bH = 0; bH < bC.length; bH++) {
                                if (bG[bI] === bC[bH]) {
                                    if (bz) {
                                        if (bH <= bA) {
                                            bA--;
                                            if (bH <= bB) {
                                                bB--;
                                            }
                                        }
                                    }
                                    bC.splice(bH--, 1);
                                    if (bx.unique) {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    return this;
                },
                has: function(bH) {
                    if (bC) {
                        var bG = 0,
                            bI = bC.length;
                        for (; bG < bI; bG++) {
                            if (bH === bC[bG]) {
                                return true;
                            }
                        }
                    }
                    return false;
                },
                empty: function() {
                    bC = [];
                    return this;
                },
                disable: function() {
                    bC = bD = by = L;
                    return this;
                },
                disabled: function() {
                    return !bC;
                },
                lock: function() {
                    bD = L;
                    if (!by || by === true) {
                        bE.disable();
                    }
                    return this;
                },
                locked: function() {
                    return !bD;
                },
                fireWith: function(bH, bG) {
                    if (bD) {
                        if (bz) {
                            if (!bx.once) {
                                bD.push([bH, bG]);
                            }
                        } else {
                            if (!(bx.once && by)) {
                                bv(bH, bG);
                            }
                        }
                    }
                    return this;
                },
                fire: function() {
                    bE.fireWith(this, arguments);
                    return this;
                },
                fired: function() {
                    return !!e;
                }
            };
        return bE;
    };
    var aK = [].slice;
    b.extend({
        Deferred: function(by) {
            var bx = b.Callbacks("once memory"),
                bw = b.Callbacks("once memory"),
                bv = b.Callbacks("memory"),
                e = "pending",
                bA = {
                    resolve: bx,
                    reject: bw,
                    notify: bv
                },
                bC = {
                    done: bx.add,
                    fail: bw.add,
                    progress: bv.add,
                    state: function() {
                        return e;
                    },
                    isResolved: bx.fired,
                    isRejected: bw.fired,
                    then: function(bE, bD, bF) {
                        bB.done(bE).fail(bD).progress(bF);
                        return this;
                    },
                    always: function() {
                        bB.done.apply(bB, arguments).fail.apply(bB, arguments);
                        return this;
                    },
                    pipe: function(bF, bE, bD) {
                        return b.Deferred(function(bG) {
                            b.each({
                                done: [bF, "resolve"],
                                fail: [bE, "reject"],
                                progress: [bD, "notify"]
                            }, function(bI, bL) {
                                var bH = bL[0],
                                    bK = bL[1],
                                    bJ;
                                if (b.isFunction(bH)) {
                                    bB[bI](function() {
                                        bJ = bH.apply(this, arguments);
                                        if (bJ && b.isFunction(bJ.promise)) {
                                            bJ.promise().then(bG.resolve, bG.reject, bG.notify);
                                        } else {
                                            bG[bK + "With"](this === bB ? bG : this, [bJ]);
                                        }
                                    });
                                } else {
                                    bB[bI](bG[bK]);
                                }
                            });
                        }).promise();
                    },
                    promise: function(bE) {
                        if (bE == null) {
                            bE = bC;
                        } else {
                            for (var bD in bC) {
                                bE[bD] = bC[bD];
                            }
                        }
                        return bE;
                    }
                },
                bB = bC.promise({}),
                bz;
            for (bz in bA) {
                bB[bz] = bA[bz].fire;
                bB[bz + "With"] = bA[bz].fireWith;
            }
            bB.done(function() {
                e = "resolved";
            }, bw.disable, bv.lock).fail(function() {
                e = "rejected";
            }, bx.disable, bv.lock);
            if (by) {
                by.call(bB, bB);
            }
            return bB;
        },
        when: function(bA) {
            var bx = aK.call(arguments, 0),
                bv = 0,
                e = bx.length,
                bB = new Array(e),
                bw = e,
                by = e,
                bC = e <= 1 && bA && b.isFunction(bA.promise) ? bA : b.Deferred(),
                bE = bC.promise();

            function bD(bF) {
                return function(bG) {
                    bx[bF] = arguments.length > 1 ? aK.call(arguments, 0) : bG;
                    if (!(--bw)) {
                        bC.resolveWith(bC, bx);
                    }
                };
            }

            function bz(bF) {
                return function(bG) {
                    bB[bF] = arguments.length > 1 ? aK.call(arguments, 0) : bG;
                    bC.notifyWith(bE, bB);
                };
            }
            if (e > 1) {
                for (; bv < e; bv++) {
                    if (bx[bv] && bx[bv].promise && b.isFunction(bx[bv].promise)) {
                        bx[bv].promise().then(bD(bv), bC.reject, bz(bv));
                    } else {
                        --bw;
                    }
                }
                if (!bw) {
                    bC.resolveWith(bC, bx);
                }
            } else {
                if (bC !== bA) {
                    bC.resolveWith(bC, e ? [bA] : []);
                }
            }
            return bE;
        }
    });
    b.support = (function() {
        var bI, bH, bE, bF, bx, bD, bC, bz, bJ, bA, by, bw, bv = av.createElement("div"),
            bG = av.documentElement;
        bv.setAttribute("className", "t");
        bv.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
        bH = bv.getElementsByTagName("*");
        bE = bv.getElementsByTagName("a")[0];
        if (!bH || !bH.length || !bE) {
            return {};
        }
        bF = av.createElement("select");
        bx = bF.appendChild(av.createElement("option"));
        bD = bv.getElementsByTagName("input")[0];
        bI = {
            leadingWhitespace: (bv.firstChild.nodeType === 3),
            tbody: !bv.getElementsByTagName("tbody").length,
            htmlSerialize: !!bv.getElementsByTagName("link").length,
            style: /top/.test(bE.getAttribute("style")),
            hrefNormalized: (bE.getAttribute("href") === "/a"),
            opacity: /^0.55/.test(bE.style.opacity),
            cssFloat: !!bE.style.cssFloat,
            checkOn: (bD.value === "on"),
            optSelected: bx.selected,
            getSetAttribute: bv.className !== "t",
            enctype: !!av.createElement("form").enctype,
            html5Clone: av.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",
            submitBubbles: true,
            changeBubbles: true,
            focusinBubbles: false,
            deleteExpando: true,
            noCloneEvent: true,
            inlineBlockNeedsLayout: false,
            shrinkWrapBlocks: false,
            reliableMarginRight: true,
            pixelMargin: true
        };
        b.boxModel = bI.boxModel = (av.compatMode === "CSS1Compat");
        bD.checked = true;
        bI.noCloneChecked = bD.cloneNode(true).checked;
        bF.disabled = true;
        bI.optDisabled = !bx.disabled;
        try {
            delete bv.test;
        } catch (bB) {
            bI.deleteExpando = false;
        }
        if (!bv.addEventListener && bv.attachEvent && bv.fireEvent) {
            bv.attachEvent("onclick", function() {
                bI.noCloneEvent = false;
            });
            bv.cloneNode(true).fireEvent("onclick");
        }
        bD = av.createElement("input");
        bD.value = "t";
        bD.setAttribute("type", "radio");
        bI.radioValue = bD.value === "t";
        bD.setAttribute("checked", "checked");
        bD.setAttribute("name", "t");
        bv.appendChild(bD);
        bC = av.createDocumentFragment();
        bC.appendChild(bv.lastChild);
        bI.checkClone = bC.cloneNode(true).cloneNode(true).lastChild.checked;
        bI.appendChecked = bD.checked;
        bC.removeChild(bD);
        bC.appendChild(bv);
        if (bv.attachEvent) {
            for (by in {
                    submit: 1,
                    change: 1,
                    focusin: 1
                }) {
                bA = "on" + by;
                bw = (bA in bv);
                if (!bw) {
                    bv.setAttribute(bA, "return;");
                    bw = (typeof bv[bA] === "function");
                }
                bI[by + "Bubbles"] = bw;
            }
        }
        bC.removeChild(bv);
        bC = bF = bx = bv = bD = null;
        b(function() {
            var bM, bV, bW, bU, bO, bP, bR, bL, bK, bQ, bN, e, bT, bS = av.getElementsByTagName("body")[0];
            if (!bS) {
                return;
            }
            bL = 1;
            bT = "padding:0;margin:0;border:";
            bN = "position:absolute;top:0;left:0;width:1px;height:1px;";
            e = bT + "0;visibility:hidden;";
            bK = "style='" + bN + bT + "5px solid #000;";
            bQ = "<div " + bK + "display:block;'><div style='" + bT + "0;display:block;overflow:hidden;'></div></div><table " + bK + "' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
            bM = av.createElement("div");
            bM.style.cssText = e + "width:0;height:0;position:static;top:0;margin-top:" + bL + "px";
            bS.insertBefore(bM, bS.firstChild);
            bv = av.createElement("div");
            bM.appendChild(bv);
            bv.innerHTML = "<table><tr><td style='" + bT + "0;display:none'></td><td>t</td></tr></table>";
            bz = bv.getElementsByTagName("td");
            bw = (bz[0].offsetHeight === 0);
            bz[0].style.display = "";
            bz[1].style.display = "none";
            bI.reliableHiddenOffsets = bw && (bz[0].offsetHeight === 0);
            if (bd.getComputedStyle) {
                bv.innerHTML = "";
                bR = av.createElement("div");
                bR.style.width = "0";
                bR.style.marginRight = "0";
                bv.style.width = "2px";
                bv.appendChild(bR);
                bI.reliableMarginRight = (parseInt((bd.getComputedStyle(bR, null) || {
                    marginRight: 0
                }).marginRight, 10) || 0) === 0;
            }
            if (typeof bv.style.zoom !== "undefined") {
                bv.innerHTML = "";
                bv.style.width = bv.style.padding = "1px";
                bv.style.border = 0;
                bv.style.overflow = "hidden";
                bv.style.display = "inline";
                bv.style.zoom = 1;
                bI.inlineBlockNeedsLayout = (bv.offsetWidth === 3);
                bv.style.display = "block";
                bv.style.overflow = "visible";
                bv.innerHTML = "<div style='width:5px;'></div>";
                bI.shrinkWrapBlocks = (bv.offsetWidth !== 3);
            }
            bv.style.cssText = bN + e;
            bv.innerHTML = bQ;
            bV = bv.firstChild;
            bW = bV.firstChild;
            bO = bV.nextSibling.firstChild.firstChild;
            bP = {
                doesNotAddBorder: (bW.offsetTop !== 5),
                doesAddBorderForTableAndCells: (bO.offsetTop === 5)
            };
            bW.style.position = "fixed";
            bW.style.top = "20px";
            bP.fixedPosition = (bW.offsetTop === 20 || bW.offsetTop === 15);
            bW.style.position = bW.style.top = "";
            bV.style.overflow = "hidden";
            bV.style.position = "relative";
            bP.subtractsBorderForOverflowNotVisible = (bW.offsetTop === -5);
            bP.doesNotIncludeMarginInBodyOffset = (bS.offsetTop !== bL);
            if (bd.getComputedStyle) {
                bv.style.marginTop = "1%";
                bI.pixelMargin = (bd.getComputedStyle(bv, null) || {
                    marginTop: 0
                }).marginTop !== "1%";
            }
            if (typeof bM.style.zoom !== "undefined") {
                bM.style.zoom = 1;
            }
            bS.removeChild(bM);
            bR = bv = bM = null;
            b.extend(bI, bP);
        });
        return bI;
    })();
    var aT = /^(?:\{.*\}|\[.*\])$/,
        aA = /([A-Z])/g;
    b.extend({
        cache: {},
        uuid: 0,
        expando: "jQuery" + (b.fn.jquery + Math.random()).replace(/\D/g, ""),
        noData: {
            embed: true,
            object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            applet: true
        },
        hasData: function(e) {
            e = e.nodeType ? b.cache[e[b.expando]] : e[b.expando];
            return !!e && !S(e);
        },
        data: function(bx, bv, bz, by) {
            if (!b.acceptData(bx)) {
                return;
            }
            var bG, bA, bD, bE = b.expando,
                bC = typeof bv === "string",
                bF = bx.nodeType,
                e = bF ? b.cache : bx,
                bw = bF ? bx[bE] : bx[bE] && bE,
                bB = bv === "events";
            if ((!bw || !e[bw] || (!bB && !by && !e[bw].data)) && bC && bz === L) {
                return;
            }
            if (!bw) {
                if (bF) {
                    bx[bE] = bw = ++b.uuid;
                } else {
                    bw = bE;
                }
            }
            if (!e[bw]) {
                e[bw] = {};
                if (!bF) {
                    e[bw].toJSON = b.noop;
                }
            }
            if (typeof bv === "object" || typeof bv === "function") {
                if (by) {
                    e[bw] = b.extend(e[bw], bv);
                } else {
                    e[bw].data = b.extend(e[bw].data, bv);
                }
            }
            bG = bA = e[bw];
            if (!by) {
                if (!bA.data) {
                    bA.data = {};
                }
                bA = bA.data;
            }
            if (bz !== L) {
                bA[b.camelCase(bv)] = bz;
            }
            if (bB && !bA[bv]) {
                return bG.events;
            }
            if (bC) {
                bD = bA[bv];
                if (bD == null) {
                    bD = bA[b.camelCase(bv)];
                }
            } else {
                bD = bA;
            }
            return bD;
        },
        removeData: function(bx, bv, by) {
            if (!b.acceptData(bx)) {
                return;
            }
            var bB, bA, bz, bC = b.expando,
                bD = bx.nodeType,
                e = bD ? b.cache : bx,
                bw = bD ? bx[bC] : bC;
            if (!e[bw]) {
                return;
            }
            if (bv) {
                bB = by ? e[bw] : e[bw].data;
                if (bB) {
                    if (!b.isArray(bv)) {
                        if (bv in bB) {
                            bv = [bv];
                        } else {
                            bv = b.camelCase(bv);
                            if (bv in bB) {
                                bv = [bv];
                            } else {
                                bv = bv.split(" ");
                            }
                        }
                    }
                    for (bA = 0, bz = bv.length; bA < bz; bA++) {
                        delete bB[bv[bA]];
                    }
                    if (!(by ? S : b.isEmptyObject)(bB)) {
                        return;
                    }
                }
            }
            if (!by) {
                delete e[bw].data;
                if (!S(e[bw])) {
                    return;
                }
            }
            if (b.support.deleteExpando || !e.setInterval) {
                delete e[bw];
            } else {
                e[bw] = null;
            }
            if (bD) {
                if (b.support.deleteExpando) {
                    delete bx[bC];
                } else {
                    if (bx.removeAttribute) {
                        bx.removeAttribute(bC);
                    } else {
                        bx[bC] = null;
                    }
                }
            }
        },
        _data: function(bv, e, bw) {
            return b.data(bv, e, bw, true);
        },
        acceptData: function(bv) {
            if (bv.nodeName) {
                var e = b.noData[bv.nodeName.toLowerCase()];
                if (e) {
                    return !(e === true || bv.getAttribute("classid") !== e);
                }
            }
            return true;
        }
    });
    b.fn.extend({
        data: function(bD, bC) {
            var by, bv, bB, e, bx, bw = this[0],
                bA = 0,
                bz = null;
            if (bD === L) {
                if (this.length) {
                    bz = b.data(bw);
                    if (bw.nodeType === 1 && !b._data(bw, "parsedAttrs")) {
                        bB = bw.attributes;
                        for (bx = bB.length; bA < bx; bA++) {
                            e = bB[bA].name;
                            if (e.indexOf("data-") === 0) {
                                e = b.camelCase(e.substring(5));
                                a6(bw, e, bz[e]);
                            }
                        }
                        b._data(bw, "parsedAttrs", true);
                    }
                }
                return bz;
            }
            if (typeof bD === "object") {
                return this.each(function() {
                    b.data(this, bD);
                });
            }
            by = bD.split(".", 2);
            by[1] = by[1] ? "." + by[1] : "";
            bv = by[1] + "!";
            return b.access(this, function(bE) {
                if (bE === L) {
                    bz = this.triggerHandler("getData" + bv, [by[0]]);
                    if (bz === L && bw) {
                        bz = b.data(bw, bD);
                        bz = a6(bw, bD, bz);
                    }
                    return bz === L && by[1] ? this.data(by[0]) : bz;
                }
                by[1] = bE;
                this.each(function() {
                    var bF = b(this);
                    bF.triggerHandler("setData" + bv, by);
                    b.data(this, bD, bE);
                    bF.triggerHandler("changeData" + bv, by);
                });
            }, null, bC, arguments.length > 1, null, false);
        },
        removeData: function(e) {
            return this.each(function() {
                b.removeData(this, e);
            });
        }
    });

    function a6(bx, bw, by) {
        if (by === L && bx.nodeType === 1) {
            var bv = "data-" + bw.replace(aA, "-$1").toLowerCase();
            by = bx.getAttribute(bv);
            if (typeof by === "string") {
                try {
                    by = by === "true" ? true : by === "false" ? false : by === "null" ? null : b.isNumeric(by) ? +by : aT.test(by) ? b.parseJSON(by) : by;
                } catch (bz) {}
                b.data(bx, bw, by);
            } else {
                by = L;
            }
        }
        return by;
    }

    function S(bv) {
        for (var e in bv) {
            if (e === "data" && b.isEmptyObject(bv[e])) {
                continue;
            }
            if (e !== "toJSON") {
                return false;
            }
        }
        return true;
    }

    function bj(by, bx, bA) {
        var bw = bx + "defer",
            bv = bx + "queue",
            e = bx + "mark",
            bz = b._data(by, bw);
        if (bz && (bA === "queue" || !b._data(by, bv)) && (bA === "mark" || !b._data(by, e))) {
            setTimeout(function() {
                if (!b._data(by, bv) && !b._data(by, e)) {
                    b.removeData(by, bw, true);
                    bz.fire();
                }
            }, 0);
        }
    }
    b.extend({
        _mark: function(bv, e) {
            if (bv) {
                e = (e || "fx") + "mark";
                b._data(bv, e, (b._data(bv, e) || 0) + 1);
            }
        },
        _unmark: function(by, bx, bv) {
            if (by !== true) {
                bv = bx;
                bx = by;
                by = false;
            }
            if (bx) {
                bv = bv || "fx";
                var e = bv + "mark",
                    bw = by ? 0 : ((b._data(bx, e) || 1) - 1);
                if (bw) {
                    b._data(bx, e, bw);
                } else {
                    b.removeData(bx, e, true);
                    bj(bx, bv, "mark");
                }
            }
        },
        queue: function(bv, e, bx) {
            var bw;
            if (bv) {
                e = (e || "fx") + "queue";
                bw = b._data(bv, e);
                if (bx) {
                    if (!bw || b.isArray(bx)) {
                        bw = b._data(bv, e, b.makeArray(bx));
                    } else {
                        bw.push(bx);
                    }
                }
                return bw || [];
            }
        },
        dequeue: function(by, bx) {
            bx = bx || "fx";
            var bv = b.queue(by, bx),
                bw = bv.shift(),
                e = {};
            if (bw === "inprogress") {
                bw = bv.shift();
            }
            if (bw) {
                if (bx === "fx") {
                    bv.unshift("inprogress");
                }
                b._data(by, bx + ".run", e);
                bw.call(by, function() {
                    b.dequeue(by, bx);
                }, e);
            }
            if (!bv.length) {
                b.removeData(by, bx + "queue " + bx + ".run", true);
                bj(by, bx, "queue");
            }
        }
    });
    b.fn.extend({
        queue: function(e, bv) {
            var bw = 2;
            if (typeof e !== "string") {
                bv = e;
                e = "fx";
                bw--;
            }
            if (arguments.length < bw) {
                return b.queue(this[0], e);
            }
            return bv === L ? this : this.each(function() {
                var bx = b.queue(this, e, bv);
                if (e === "fx" && bx[0] !== "inprogress") {
                    b.dequeue(this, e);
                }
            });
        },
        dequeue: function(e) {
            return this.each(function() {
                b.dequeue(this, e);
            });
        },
        delay: function(bv, e) {
            bv = b.fx ? b.fx.speeds[bv] || bv : bv;
            e = e || "fx";
            return this.queue(e, function(bx, bw) {
                var by = setTimeout(bx, bv);
                bw.stop = function() {
                    clearTimeout(by);
                };
            });
        },
        clearQueue: function(e) {
            return this.queue(e || "fx", []);
        },
        promise: function(bD, bw) {
            if (typeof bD !== "string") {
                bw = bD;
                bD = L;
            }
            bD = bD || "fx";
            var e = b.Deferred(),
                bv = this,
                by = bv.length,
                bB = 1,
                bz = bD + "defer",
                bA = bD + "queue",
                bC = bD + "mark",
                bx;

            function bE() {
                if (!(--bB)) {
                    e.resolveWith(bv, [bv]);
                }
            }
            while (by--) {
                if ((bx = b.data(bv[by], bz, L, true) || (b.data(bv[by], bA, L, true) || b.data(bv[by], bC, L, true)) && b.data(bv[by], bz, b.Callbacks("once memory"), true))) {
                    bB++;
                    bx.add(bE);
                }
            }
            bE();
            return e.promise(bw);
        }
    });
    var aQ = /[\n\t\r]/g,
        ag = /\s+/,
        aV = /\r/g,
        g = /^(?:button|input)$/i,
        C = /^(?:button|input|object|select|textarea)$/i,
        l = /^a(?:rea)?$/i,
        ao = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
        E = b.support.getSetAttribute,
        bf, aZ, aG;
    b.fn.extend({
        attr: function(e, bv) {
            return b.access(this, b.attr, e, bv, arguments.length > 1);
        },
        removeAttr: function(e) {
            return this.each(function() {
                b.removeAttr(this, e);
            });
        },
        prop: function(e, bv) {
            return b.access(this, b.prop, e, bv, arguments.length > 1);
        },
        removeProp: function(e) {
            e = b.propFix[e] || e;
            return this.each(function() {
                try {
                    this[e] = L;
                    delete this[e];
                } catch (bv) {}
            });
        },
        addClass: function(by) {
            var bA, bw, bv, bx, bz, bB, e;
            if (b.isFunction(by)) {
                return this.each(function(bC) {
                    b(this).addClass(by.call(this, bC, this.className));
                });
            }
            if (by && typeof by === "string") {
                bA = by.split(ag);
                for (bw = 0, bv = this.length; bw < bv; bw++) {
                    bx = this[bw];
                    if (bx.nodeType === 1) {
                        if (!bx.className && bA.length === 1) {
                            bx.className = by;
                        } else {
                            bz = " " + bx.className + " ";
                            for (bB = 0, e = bA.length; bB < e; bB++) {
                                if (!~bz.indexOf(" " + bA[bB] + " ")) {
                                    bz += bA[bB] + " ";
                                }
                            }
                            bx.className = b.trim(bz);
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function(bz) {
            var bA, bw, bv, by, bx, bB, e;
            if (b.isFunction(bz)) {
                return this.each(function(bC) {
                    b(this).removeClass(bz.call(this, bC, this.className));
                });
            }
            if ((bz && typeof bz === "string") || bz === L) {
                bA = (bz || "").split(ag);
                for (bw = 0, bv = this.length; bw < bv; bw++) {
                    by = this[bw];
                    if (by.nodeType === 1 && by.className) {
                        if (bz) {
                            bx = (" " + by.className + " ").replace(aQ, " ");
                            for (bB = 0, e = bA.length; bB < e; bB++) {
                                bx = bx.replace(" " + bA[bB] + " ", " ");
                            }
                            by.className = b.trim(bx);
                        } else {
                            by.className = "";
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function(bx, bv) {
            var bw = typeof bx,
                e = typeof bv === "boolean";
            if (b.isFunction(bx)) {
                return this.each(function(by) {
                    b(this).toggleClass(bx.call(this, by, this.className, bv), bv);
                });
            }
            return this.each(function() {
                if (bw === "string") {
                    var bA, bz = 0,
                        by = b(this),
                        bB = bv,
                        bC = bx.split(ag);
                    while ((bA = bC[bz++])) {
                        bB = e ? bB : !by.hasClass(bA);
                        by[bB ? "addClass" : "removeClass"](bA);
                    }
                } else {
                    if (bw === "undefined" || bw === "boolean") {
                        if (this.className) {
                            b._data(this, "__className__", this.className);
                        }
                        this.className = this.className || bx === false ? "" : b._data(this, "__className__") || "";
                    }
                }
            });
        },
        hasClass: function(e) {
            var bx = " " + e + " ",
                bw = 0,
                bv = this.length;
            for (; bw < bv; bw++) {
                if (this[bw].nodeType === 1 && (" " + this[bw].className + " ").replace(aQ, " ").indexOf(bx) > -1) {
                    return true;
                }
            }
            return false;
        },
        val: function(bx) {
            var e, bv, by, bw = this[0];
            if (!arguments.length) {
                if (bw) {
                    e = b.valHooks[bw.type] || b.valHooks[bw.nodeName.toLowerCase()];
                    if (e && "get" in e && (bv = e.get(bw, "value")) !== L) {
                        return bv;
                    }
                    bv = bw.value;
                    return typeof bv === "string" ? bv.replace(aV, "") : bv == null ? "" : bv;
                }
                return;
            }
            by = b.isFunction(bx);
            return this.each(function(bA) {
                var bz = b(this),
                    bB;
                if (this.nodeType !== 1) {
                    return;
                }
                if (by) {
                    bB = bx.call(this, bA, bz.val());
                } else {
                    bB = bx;
                }
                if (bB == null) {
                    bB = "";
                } else {
                    if (typeof bB === "number") {
                        bB += "";
                    } else {
                        if (b.isArray(bB)) {
                            bB = b.map(bB, function(bC) {
                                return bC == null ? "" : bC + "";
                            });
                        }
                    }
                }
                e = b.valHooks[this.type] || b.valHooks[this.nodeName.toLowerCase()];
                if (!e || !("set" in e) || e.set(this, bB, "value") === L) {
                    this.value = bB;
                }
            });
        }
    });
    b.extend({
        valHooks: {
            option: {
                get: function(e) {
                    var bv = e.attributes.value;
                    return !bv || bv.specified ? e.value : e.text;
                }
            },
            select: {
                get: function(e) {
                    var bA, bv, bz, bx, by = e.selectedIndex,
                        bB = [],
                        bC = e.options,
                        bw = e.type === "select-one";
                    if (by < 0) {
                        return null;
                    }
                    bv = bw ? by : 0;
                    bz = bw ? by + 1 : bC.length;
                    for (; bv < bz; bv++) {
                        bx = bC[bv];
                        if (bx.selected && (b.support.optDisabled ? !bx.disabled : bx.getAttribute("disabled") === null) && (!bx.parentNode.disabled || !b.nodeName(bx.parentNode, "optgroup"))) {
                            bA = b(bx).val();
                            if (bw) {
                                return bA;
                            }
                            bB.push(bA);
                        }
                    }
                    if (bw && !bB.length && bC.length) {
                        return b(bC[by]).val();
                    }
                    return bB;
                },
                set: function(bv, bw) {
                    var e = b.makeArray(bw);
                    b(bv).find("option").each(function() {
                        this.selected = b.inArray(b(this).val(), e) >= 0;
                    });
                    if (!e.length) {
                        bv.selectedIndex = -1;
                    }
                    return e;
                }
            }
        },
        attrFn: {
            val: true,
            css: true,
            html: true,
            text: true,
            data: true,
            width: true,
            height: true,
            offset: true
        },
        attr: function(bA, bx, bB, bz) {
            var bw, e, by, bv = bA.nodeType;
            if (!bA || bv === 3 || bv === 8 || bv === 2) {
                return;
            }
            if (bz && bx in b.attrFn) {
                return b(bA)[bx](bB);
            }
            if (typeof bA.getAttribute === "undefined") {
                return b.prop(bA, bx, bB);
            }
            by = bv !== 1 || !b.isXMLDoc(bA);
            if (by) {
                bx = bx.toLowerCase();
                e = b.attrHooks[bx] || (ao.test(bx) ? aZ : bf);
            }
            if (bB !== L) {
                if (bB === null) {
                    b.removeAttr(bA, bx);
                    return;
                } else {
                    if (e && "set" in e && by && (bw = e.set(bA, bB, bx)) !== L) {
                        return bw;
                    } else {
                        bA.setAttribute(bx, "" + bB);
                        return bB;
                    }
                }
            } else {
                if (e && "get" in e && by && (bw = e.get(bA, bx)) !== null) {
                    return bw;
                } else {
                    bw = bA.getAttribute(bx);
                    return bw === null ? L : bw;
                }
            }
        },
        removeAttr: function(by, bA) {
            var bz, bB, bw, e, bv, bx = 0;
            if (bA && by.nodeType === 1) {
                bB = bA.toLowerCase().split(ag);
                e = bB.length;
                for (; bx < e; bx++) {
                    bw = bB[bx];
                    if (bw) {
                        bz = b.propFix[bw] || bw;
                        bv = ao.test(bw);
                        if (!bv) {
                            b.attr(by, bw, "");
                        }
                        by.removeAttribute(E ? bw : bz);
                        if (bv && bz in by) {
                            by[bz] = false;
                        }
                    }
                }
            }
        },
        attrHooks: {
            type: {
                set: function(e, bv) {
                    if (g.test(e.nodeName) && e.parentNode) {
                        b.error("type property can't be changed");
                    } else {
                        if (!b.support.radioValue && bv === "radio" && b.nodeName(e, "input")) {
                            var bw = e.value;
                            e.setAttribute("type", bv);
                            if (bw) {
                                e.value = bw;
                            }
                            return bv;
                        }
                    }
                }
            },
            value: {
                get: function(bv, e) {
                    if (bf && b.nodeName(bv, "button")) {
                        return bf.get(bv, e);
                    }
                    return e in bv ? bv.value : null;
                },
                set: function(bv, bw, e) {
                    if (bf && b.nodeName(bv, "button")) {
                        return bf.set(bv, bw, e);
                    }
                    bv.value = bw;
                }
            }
        },
        propFix: {
            tabindex: "tabIndex",
            readonly: "readOnly",
            "for": "htmlFor",
            "class": "className",
            maxlength: "maxLength",
            cellspacing: "cellSpacing",
            cellpadding: "cellPadding",
            rowspan: "rowSpan",
            colspan: "colSpan",
            usemap: "useMap",
            frameborder: "frameBorder",
            contenteditable: "contentEditable"
        },
        prop: function(bz, bx, bA) {
            var bw, e, by, bv = bz.nodeType;
            if (!bz || bv === 3 || bv === 8 || bv === 2) {
                return;
            }
            by = bv !== 1 || !b.isXMLDoc(bz);
            if (by) {
                bx = b.propFix[bx] || bx;
                e = b.propHooks[bx];
            }
            if (bA !== L) {
                if (e && "set" in e && (bw = e.set(bz, bA, bx)) !== L) {
                    return bw;
                } else {
                    return (bz[bx] = bA);
                }
            } else {
                if (e && "get" in e && (bw = e.get(bz, bx)) !== null) {
                    return bw;
                } else {
                    return bz[bx];
                }
            }
        },
        propHooks: {
            tabIndex: {
                get: function(bv) {
                    var e = bv.getAttributeNode("tabindex");
                    return e && e.specified ? parseInt(e.value, 10) : C.test(bv.nodeName) || l.test(bv.nodeName) && bv.href ? 0 : L;
                }
            }
        }
    });
    b.attrHooks.tabindex = b.propHooks.tabIndex;
    aZ = {
        get: function(bv, e) {
            var bx, bw = b.prop(bv, e);
            return bw === true || typeof bw !== "boolean" && (bx = bv.getAttributeNode(e)) && bx.nodeValue !== false ? e.toLowerCase() : L;
        },
        set: function(bv, bx, e) {
            var bw;
            if (bx === false) {
                b.removeAttr(bv, e);
            } else {
                bw = b.propFix[e] || e;
                if (bw in bv) {
                    bv[bw] = true;
                }
                bv.setAttribute(e, e.toLowerCase());
            }
            return e;
        }
    };
    if (!E) {
        aG = {
            name: true,
            id: true,
            coords: true
        };
        bf = b.valHooks.button = {
            get: function(bw, bv) {
                var e;
                e = bw.getAttributeNode(bv);
                return e && (aG[bv] ? e.nodeValue !== "" : e.specified) ? e.nodeValue : L;
            },
            set: function(bw, bx, bv) {
                var e = bw.getAttributeNode(bv);
                if (!e) {
                    e = av.createAttribute(bv);
                    bw.setAttributeNode(e);
                }
                return (e.nodeValue = bx + "");
            }
        };
        b.attrHooks.tabindex.set = bf.set;
        b.each(["width", "height"], function(bv, e) {
            b.attrHooks[e] = b.extend(b.attrHooks[e], {
                set: function(bw, bx) {
                    if (bx === "") {
                        bw.setAttribute(e, "auto");
                        return bx;
                    }
                }
            });
        });
        b.attrHooks.contenteditable = {
            get: bf.get,
            set: function(bv, bw, e) {
                if (bw === "") {
                    bw = "false";
                }
                bf.set(bv, bw, e);
            }
        };
    }
    if (!b.support.hrefNormalized) {
        b.each(["href", "src", "width", "height"], function(bv, e) {
            b.attrHooks[e] = b.extend(b.attrHooks[e], {
                get: function(bx) {
                    var bw = bx.getAttribute(e, 2);
                    return bw === null ? L : bw;
                }
            });
        });
    }
    if (!b.support.style) {
        b.attrHooks.style = {
            get: function(e) {
                return e.style.cssText.toLowerCase() || L;
            },
            set: function(e, bv) {
                return (e.style.cssText = "" + bv);
            }
        };
    }
    if (!b.support.optSelected) {
        b.propHooks.selected = b.extend(b.propHooks.selected, {
            get: function(bv) {
                var e = bv.parentNode;
                if (e) {
                    e.selectedIndex;
                    if (e.parentNode) {
                        e.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        });
    }
    if (!b.support.enctype) {
        b.propFix.enctype = "encoding";
    }
    if (!b.support.checkOn) {
        b.each(["radio", "checkbox"], function() {
            b.valHooks[this] = {
                get: function(e) {
                    return e.getAttribute("value") === null ? "on" : e.value;
                }
            };
        });
    }
    b.each(["radio", "checkbox"], function() {
        b.valHooks[this] = b.extend(b.valHooks[this], {
            set: function(e, bv) {
                if (b.isArray(bv)) {
                    return (e.checked = b.inArray(b(e).val(), bv) >= 0);
                }
            }
        });
    });
    var be = /^(?:textarea|input|select)$/i,
        n = /^([^\.]*)?(?:\.(.+))?$/,
        J = /(?:^|\s)hover(\.\S+)?\b/,
        aP = /^key/,
        bg = /^(?:mouse|contextmenu)|click/,
        T = /^(?:focusinfocus|focusoutblur)$/,
        U = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
        Y = function(e) {
            var bv = U.exec(e);
            if (bv) {
                bv[1] = (bv[1] || "").toLowerCase();
                bv[3] = bv[3] && new RegExp("(?:^|\\s)" + bv[3] + "(?:\\s|$)");
            }
            return bv;
        },
        j = function(bw, e) {
            var bv = bw.attributes || {};
            return ((!e[1] || bw.nodeName.toLowerCase() === e[1]) && (!e[2] || (bv.id || {}).value === e[2]) && (!e[3] || e[3].test((bv["class"] || {}).value)));
        },
        bt = function(e) {
            return b.event.special.hover ? e : e.replace(J, "mouseenter$1 mouseleave$1");
        };
    b.event = {
        add: function(bx, bC, bJ, bA, by) {
            var bD, bB, bK, bI, bH, bF, e, bG, bv, bz, bw, bE;
            if (bx.nodeType === 3 || bx.nodeType === 8 || !bC || !bJ || !(bD = b._data(bx))) {
                return;
            }
            if (bJ.handler) {
                bv = bJ;
                bJ = bv.handler;
                by = bv.selector;
            }
            if (!bJ.guid) {
                bJ.guid = b.guid++;
            }
            bK = bD.events;
            if (!bK) {
                bD.events = bK = {};
            }
            bB = bD.handle;
            if (!bB) {
                bD.handle = bB = function(bL) {
                    return typeof b !== "undefined" && (!bL || b.event.triggered !== bL.type) ? b.event.dispatch.apply(bB.elem, arguments) : L;
                };
                bB.elem = bx;
            }
            bC = b.trim(bt(bC)).split(" ");
            for (bI = 0; bI < bC.length; bI++) {
                bH = n.exec(bC[bI]) || [];
                bF = bH[1];
                e = (bH[2] || "").split(".").sort();
                bE = b.event.special[bF] || {};
                bF = (by ? bE.delegateType : bE.bindType) || bF;
                bE = b.event.special[bF] || {};
                bG = b.extend({
                    type: bF,
                    origType: bH[1],
                    data: bA,
                    handler: bJ,
                    guid: bJ.guid,
                    selector: by,
                    quick: by && Y(by),
                    namespace: e.join(".")
                }, bv);
                bw = bK[bF];
                if (!bw) {
                    bw = bK[bF] = [];
                    bw.delegateCount = 0;
                    if (!bE.setup || bE.setup.call(bx, bA, e, bB) === false) {
                        if (bx.addEventListener) {
                            bx.addEventListener(bF, bB, false);
                        } else {
                            if (bx.attachEvent) {
                                bx.attachEvent("on" + bF, bB);
                            }
                        }
                    }
                }
                if (bE.add) {
                    bE.add.call(bx, bG);
                    if (!bG.handler.guid) {
                        bG.handler.guid = bJ.guid;
                    }
                }
                if (by) {
                    bw.splice(bw.delegateCount++, 0, bG);
                } else {
                    bw.push(bG);
                }
                b.event.global[bF] = true;
            }
            bx = null;
        },
        global: {},
        remove: function(bJ, bE, bv, bH, bB) {
            var bI = b.hasData(bJ) && b._data(bJ),
                bF, bx, bz, bL, bC, bA, bG, bw, by, bK, bD, e;
            if (!bI || !(bw = bI.events)) {
                return;
            }
            bE = b.trim(bt(bE || "")).split(" ");
            for (bF = 0; bF < bE.length; bF++) {
                bx = n.exec(bE[bF]) || [];
                bz = bL = bx[1];
                bC = bx[2];
                if (!bz) {
                    for (bz in bw) {
                        b.event.remove(bJ, bz + bE[bF], bv, bH, true);
                    }
                    continue;
                }
                by = b.event.special[bz] || {};
                bz = (bH ? by.delegateType : by.bindType) || bz;
                bD = bw[bz] || [];
                bA = bD.length;
                bC = bC ? new RegExp("(^|\\.)" + bC.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
                for (bG = 0; bG < bD.length; bG++) {
                    e = bD[bG];
                    if ((bB || bL === e.origType) && (!bv || bv.guid === e.guid) && (!bC || bC.test(e.namespace)) && (!bH || bH === e.selector || bH === "**" && e.selector)) {
                        bD.splice(bG--, 1);
                        if (e.selector) {
                            bD.delegateCount--;
                        }
                        if (by.remove) {
                            by.remove.call(bJ, e);
                        }
                    }
                }
                if (bD.length === 0 && bA !== bD.length) {
                    if (!by.teardown || by.teardown.call(bJ, bC) === false) {
                        b.removeEvent(bJ, bz, bI.handle);
                    }
                    delete bw[bz];
                }
            }
            if (b.isEmptyObject(bw)) {
                bK = bI.handle;
                if (bK) {
                    bK.elem = null;
                }
                b.removeData(bJ, ["events", "handle"], true);
            }
        },
        customEvent: {
            getData: true,
            setData: true,
            changeData: true
        },
        trigger: function(bv, bD, bA, bJ) {
            if (bA && (bA.nodeType === 3 || bA.nodeType === 8)) {
                return;
            }
            var bG = bv.type || bv,
                bx = [],
                e, bw, bC, bH, bz, by, bF, bE, bB, bI;
            if (T.test(bG + b.event.triggered)) {
                return;
            }
            if (bG.indexOf("!") >= 0) {
                bG = bG.slice(0, -1);
                bw = true;
            }
            if (bG.indexOf(".") >= 0) {
                bx = bG.split(".");
                bG = bx.shift();
                bx.sort();
            }
            if ((!bA || b.event.customEvent[bG]) && !b.event.global[bG]) {
                return;
            }
            bv = typeof bv === "object" ? bv[b.expando] ? bv : new b.Event(bG, bv) : new b.Event(bG);
            bv.type = bG;
            bv.isTrigger = true;
            bv.exclusive = bw;
            bv.namespace = bx.join(".");
            bv.namespace_re = bv.namespace ? new RegExp("(^|\\.)" + bx.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
            by = bG.indexOf(":") < 0 ? "on" + bG : "";
            if (!bA) {
                e = b.cache;
                for (bC in e) {
                    if (e[bC].events && e[bC].events[bG]) {
                        b.event.trigger(bv, bD, e[bC].handle.elem, true);
                    }
                }
                return;
            }
            bv.result = L;
            if (!bv.target) {
                bv.target = bA;
            }
            bD = bD != null ? b.makeArray(bD) : [];
            bD.unshift(bv);
            bF = b.event.special[bG] || {};
            if (bF.trigger && bF.trigger.apply(bA, bD) === false) {
                return;
            }
            bB = [
                [bA, bF.bindType || bG]
            ];
            if (!bJ && !bF.noBubble && !b.isWindow(bA)) {
                bI = bF.delegateType || bG;
                bH = T.test(bI + bG) ? bA : bA.parentNode;
                bz = null;
                for (; bH; bH = bH.parentNode) {
                    bB.push([bH, bI]);
                    bz = bH;
                }
                if (bz && bz === bA.ownerDocument) {
                    bB.push([bz.defaultView || bz.parentWindow || bd, bI]);
                }
            }
            for (bC = 0; bC < bB.length && !bv.isPropagationStopped(); bC++) {
                bH = bB[bC][0];
                bv.type = bB[bC][1];
                bE = (b._data(bH, "events") || {})[bv.type] && b._data(bH, "handle");
                if (bE) {
                    bE.apply(bH, bD);
                }
                bE = by && bH[by];
                if (bE && b.acceptData(bH) && bE.apply(bH, bD) === false) {
                    bv.preventDefault();
                }
            }
            bv.type = bG;
            if (!bJ && !bv.isDefaultPrevented()) {
                if ((!bF._default || bF._default.apply(bA.ownerDocument, bD) === false) && !(bG === "click" && b.nodeName(bA, "a")) && b.acceptData(bA)) {
                    if (by && bA[bG] && ((bG !== "focus" && bG !== "blur") || bv.target.offsetWidth !== 0) && !b.isWindow(bA)) {
                        bz = bA[by];
                        if (bz) {
                            bA[by] = null;
                        }
                        b.event.triggered = bG;
                        bA[bG]();
                        b.event.triggered = L;
                        if (bz) {
                            bA[by] = bz;
                        }
                    }
                }
            }
            return bv.result;
        },
        dispatch: function(bH) {
            bH = b.event.fix(bH || bd.event);
            var bD = ((b._data(this, "events") || {})[bH.type] || []),
                bC = bD.delegateCount,
                bx = [].slice.call(arguments, 0),
                bE = !bH.exclusive && !bH.namespace,
                bz = b.event.special[bH.type] || {},
                bv = [],
                bJ, bG, by, bA, bK, bI, bB, bw, e, bF, bL;
            bx[0] = bH;
            bH.delegateTarget = this;
            if (bz.preDispatch && bz.preDispatch.call(this, bH) === false) {
                return;
            }
            if (bC && !(bH.button && bH.type === "click")) {
                bA = b(this);
                bA.context = this.ownerDocument || this;
                for (by = bH.target; by != this; by = by.parentNode || this) {
                    if (by.disabled !== true) {
                        bI = {};
                        bw = [];
                        bA[0] = by;
                        for (bJ = 0; bJ < bC; bJ++) {
                            e = bD[bJ];
                            bF = e.selector;
                            if (bI[bF] === L) {
                                bI[bF] = (e.quick ? j(by, e.quick) : bA.is(bF));
                            }
                            if (bI[bF]) {
                                bw.push(e);
                            }
                        }
                        if (bw.length) {
                            bv.push({
                                elem: by,
                                matches: bw
                            });
                        }
                    }
                }
            }
            if (bD.length > bC) {
                bv.push({
                    elem: this,
                    matches: bD.slice(bC)
                });
            }
            for (bJ = 0; bJ < bv.length && !bH.isPropagationStopped(); bJ++) {
                bB = bv[bJ];
                bH.currentTarget = bB.elem;
                for (bG = 0; bG < bB.matches.length && !bH.isImmediatePropagationStopped(); bG++) {
                    e = bB.matches[bG];
                    if (bE || (!bH.namespace && !e.namespace) || bH.namespace_re && bH.namespace_re.test(e.namespace)) {
                        bH.data = e.data;
                        bH.handleObj = e;
                        bK = ((b.event.special[e.origType] || {}).handle || e.handler).apply(bB.elem, bx);
                        if (bK !== L) {
                            bH.result = bK;
                            if (bK === false) {
                                bH.preventDefault();
                                bH.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (bz.postDispatch) {
                bz.postDispatch.call(this, bH);
            }
            return bH.result;
        },
        props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(bv, e) {
                if (bv.which == null) {
                    bv.which = e.charCode != null ? e.charCode : e.keyCode;
                }
                return bv;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(bx, bw) {
                var by, bz, e, bv = bw.button,
                    bA = bw.fromElement;
                if (bx.pageX == null && bw.clientX != null) {
                    by = bx.target.ownerDocument || av;
                    bz = by.documentElement;
                    e = by.body;
                    bx.pageX = bw.clientX + (bz && bz.scrollLeft || e && e.scrollLeft || 0) - (bz && bz.clientLeft || e && e.clientLeft || 0);
                    bx.pageY = bw.clientY + (bz && bz.scrollTop || e && e.scrollTop || 0) - (bz && bz.clientTop || e && e.clientTop || 0);
                }
                if (!bx.relatedTarget && bA) {
                    bx.relatedTarget = bA === bx.target ? bw.toElement : bA;
                }
                if (!bx.which && bv !== L) {
                    bx.which = (bv & 1 ? 1 : (bv & 2 ? 3 : (bv & 4 ? 2 : 0)));
                }
                return bx;
            }
        },
        fix: function(bw) {
            if (bw[b.expando]) {
                return bw;
            }
            var bv, bz, e = bw,
                bx = b.event.fixHooks[bw.type] || {},
                by = bx.props ? this.props.concat(bx.props) : this.props;
            bw = b.Event(e);
            for (bv = by.length; bv;) {
                bz = by[--bv];
                bw[bz] = e[bz];
            }
            if (!bw.target) {
                bw.target = e.srcElement || av;
            }
            if (bw.target.nodeType === 3) {
                bw.target = bw.target.parentNode;
            }
            if (bw.metaKey === L) {
                bw.metaKey = bw.ctrlKey;
            }
            return bx.filter ? bx.filter(bw, e) : bw;
        },
        special: {
            ready: {
                setup: b.bindReady
            },
            load: {
                noBubble: true
            },
            focus: {
                delegateType: "focusin"
            },
            blur: {
                delegateType: "focusout"
            },
            beforeunload: {
                setup: function(bw, bv, e) {
                    if (b.isWindow(this)) {
                        this.onbeforeunload = e;
                    }
                },
                teardown: function(bv, e) {
                    if (this.onbeforeunload === e) {
                        this.onbeforeunload = null;
                    }
                }
            }
        },
        simulate: function(bw, by, bx, bv) {
            var bz = b.extend(new b.Event(), bx, {
                type: bw,
                isSimulated: true,
                originalEvent: {}
            });
            if (bv) {
                b.event.trigger(bz, null, by);
            } else {
                b.event.dispatch.call(by, bz);
            }
            if (bz.isDefaultPrevented()) {
                bx.preventDefault();
            }
        }
    };
    b.event.handle = b.event.dispatch;
    b.removeEvent = av.removeEventListener ? function(bv, e, bw) {
        if (bv.removeEventListener) {
            bv.removeEventListener(e, bw, false);
        }
    } : function(bv, e, bw) {
        if (bv.detachEvent) {
            bv.detachEvent("on" + e, bw);
        }
    };
    b.Event = function(bv, e) {
        if (!(this instanceof b.Event)) {
            return new b.Event(bv, e);
        }
        if (bv && bv.type) {
            this.originalEvent = bv;
            this.type = bv.type;
            this.isDefaultPrevented = (bv.defaultPrevented || bv.returnValue === false || bv.getPreventDefault && bv.getPreventDefault()) ? i : bl;
        } else {
            this.type = bv;
        }
        if (e) {
            b.extend(this, e);
        }
        this.timeStamp = bv && bv.timeStamp || b.now();
        this[b.expando] = true;
    };

    function bl() {
        return false;
    }

    function i() {
        return true;
    }
    b.Event.prototype = {
        preventDefault: function() {
            this.isDefaultPrevented = i;
            var bv = this.originalEvent;
            if (!bv) {
                return;
            }
            if (bv.preventDefault) {
                bv.preventDefault();
            } else {
                bv.returnValue = false;
            }
        },
        stopPropagation: function() {
            this.isPropagationStopped = i;
            var bv = this.originalEvent;
            if (!bv) {
                return;
            }
            if (bv.stopPropagation) {
                bv.stopPropagation();
            }
            bv.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = i;
            this.stopPropagation();
        },
        isDefaultPrevented: bl,
        isPropagationStopped: bl,
        isImmediatePropagationStopped: bl
    };
    b.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(bv, e) {
        b.event.special[bv] = {
            delegateType: e,
            bindType: e,
            handle: function(bz) {
                var bB = this,
                    bA = bz.relatedTarget,
                    by = bz.handleObj,
                    bw = by.selector,
                    bx;
                if (!bA || (bA !== bB && !b.contains(bB, bA))) {
                    bz.type = by.origType;
                    bx = by.handler.apply(this, arguments);
                    bz.type = e;
                }
                return bx;
            }
        };
    });
    if (!b.support.submitBubbles) {
        b.event.special.submit = {
            setup: function() {
                if (b.nodeName(this, "form")) {
                    return false;
                }
                b.event.add(this, "click._submit keypress._submit", function(bx) {
                    var bw = bx.target,
                        bv = b.nodeName(bw, "input") || b.nodeName(bw, "button") ? bw.form : L;
                    if (bv && !bv._submit_attached) {
                        b.event.add(bv, "submit._submit", function(e) {
                            e._submit_bubble = true;
                        });
                        bv._submit_attached = true;
                    }
                });
            },
            postDispatch: function(e) {
                if (e._submit_bubble) {
                    delete e._submit_bubble;
                    if (this.parentNode && !e.isTrigger) {
                        b.event.simulate("submit", this.parentNode, e, true);
                    }
                }
            },
            teardown: function() {
                if (b.nodeName(this, "form")) {
                    return false;
                }
                b.event.remove(this, "._submit");
            }
        };
    }
    if (!b.support.changeBubbles) {
        b.event.special.change = {
            setup: function() {
                if (be.test(this.nodeName)) {
                    if (this.type === "checkbox" || this.type === "radio") {
                        b.event.add(this, "propertychange._change", function(e) {
                            if (e.originalEvent.propertyName === "checked") {
                                this._just_changed = true;
                            }
                        });
                        b.event.add(this, "click._change", function(e) {
                            if (this._just_changed && !e.isTrigger) {
                                this._just_changed = false;
                                b.event.simulate("change", this, e, true);
                            }
                        });
                    }
                    return false;
                }
                b.event.add(this, "beforeactivate._change", function(bw) {
                    var bv = bw.target;
                    if (be.test(bv.nodeName) && !bv._change_attached) {
                        b.event.add(bv, "change._change", function(e) {
                            if (this.parentNode && !e.isSimulated && !e.isTrigger) {
                                b.event.simulate("change", this.parentNode, e, true);
                            }
                        });
                        bv._change_attached = true;
                    }
                });
            },
            handle: function(bv) {
                var e = bv.target;
                if (this !== e || bv.isSimulated || bv.isTrigger || (e.type !== "radio" && e.type !== "checkbox")) {
                    return bv.handleObj.handler.apply(this, arguments);
                }
            },
            teardown: function() {
                b.event.remove(this, "._change");
                return be.test(this.nodeName);
            }
        };
    }
    if (!b.support.focusinBubbles) {
        b.each({
            focus: "focusin",
            blur: "focusout"
        }, function(bx, e) {
            var bv = 0,
                bw = function(by) {
                    b.event.simulate(e, by.target, b.event.fix(by), true);
                };
            b.event.special[e] = {
                setup: function() {
                    if (bv++ === 0) {
                        av.addEventListener(bx, bw, true);
                    }
                },
                teardown: function() {
                    if (--bv === 0) {
                        av.removeEventListener(bx, bw, true);
                    }
                }
            };
        });
    }
    b.fn.extend({
        on: function(bw, e, bz, by, bv) {
            var bA, bx;
            if (typeof bw === "object") {
                if (typeof e !== "string") {
                    bz = bz || e;
                    e = L;
                }
                for (bx in bw) {
                    this.on(bx, e, bz, bw[bx], bv);
                }
                return this;
            }
            if (bz == null && by == null) {
                by = e;
                bz = e = L;
            } else {
                if (by == null) {
                    if (typeof e === "string") {
                        by = bz;
                        bz = L;
                    } else {
                        by = bz;
                        bz = e;
                        e = L;
                    }
                }
            }
            if (by === false) {
                by = bl;
            } else {
                if (!by) {
                    return this;
                }
            }
            if (bv === 1) {
                bA = by;
                by = function(bB) {
                    b().off(bB);
                    return bA.apply(this, arguments);
                };
                by.guid = bA.guid || (bA.guid = b.guid++);
            }
            return this.each(function() {
                b.event.add(this, bw, by, bz, e);
            });
        },
        one: function(bv, e, bx, bw) {
            return this.on(bv, e, bx, bw, 1);
        },
        off: function(bw, e, by) {
            if (bw && bw.preventDefault && bw.handleObj) {
                var bv = bw.handleObj;
                b(bw.delegateTarget).off(bv.namespace ? bv.origType + "." + bv.namespace : bv.origType, bv.selector, bv.handler);
                return this;
            }
            if (typeof bw === "object") {
                for (var bx in bw) {
                    this.off(bx, e, bw[bx]);
                }
                return this;
            }
            if (e === false || typeof e === "function") {
                by = e;
                e = L;
            }
            if (by === false) {
                by = bl;
            }
            return this.each(function() {
                b.event.remove(this, bw, by, e);
            });
        },
        bind: function(e, bw, bv) {
            return this.on(e, null, bw, bv);
        },
        unbind: function(e, bv) {
            return this.off(e, null, bv);
        },
        live: function(e, bw, bv) {
            b(this.context).on(e, this.selector, bw, bv);
            return this;
        },
        die: function(e, bv) {
            b(this.context).off(e, this.selector || "**", bv);
            return this;
        },
        delegate: function(e, bv, bx, bw) {
            return this.on(bv, e, bx, bw);
        },
        undelegate: function(e, bv, bw) {
            return arguments.length == 1 ? this.off(e, "**") : this.off(bv, e, bw);
        },
        trigger: function(e, bv) {
            return this.each(function() {
                b.event.trigger(e, bv, this);
            });
        },
        triggerHandler: function(e, bv) {
            if (this[0]) {
                return b.event.trigger(e, bv, this[0], true);
            }
        },
        toggle: function(bx) {
            var bv = arguments,
                e = bx.guid || b.guid++,
                bw = 0,
                by = function(bz) {
                    var bA = (b._data(this, "lastToggle" + bx.guid) || 0) % bw;
                    b._data(this, "lastToggle" + bx.guid, bA + 1);
                    bz.preventDefault();
                    return bv[bA].apply(this, arguments) || false;
                };
            by.guid = e;
            while (bw < bv.length) {
                bv[bw++].guid = e;
            }
            return this.click(by);
        },
        hover: function(e, bv) {
            return this.mouseenter(e).mouseleave(bv || e);
        }
    });
    b.each(("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu").split(" "), function(bv, e) {
        b.fn[e] = function(bx, bw) {
            if (bw == null) {
                bw = bx;
                bx = null;
            }
            return arguments.length > 0 ? this.on(e, null, bx, bw) : this.trigger(e);
        };
        if (b.attrFn) {
            b.attrFn[e] = true;
        }
        if (aP.test(e)) {
            b.event.fixHooks[e] = b.event.keyHooks;
        }
        if (bg.test(e)) {
            b.event.fixHooks[e] = b.event.mouseHooks;
        }
    });
    /*!
     * Sizzle CSS Selector Engine
     *  Copyright 2011, The Dojo Foundation
     *  Released under the MIT, BSD, and GPL Licenses.
     *  More information: http://sizzlejs.com/
     */
    (function() {
        var bH = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
            bC = "sizcache" + (Math.random() + "").replace(".", ""),
            bI = 0,
            bL = Object.prototype.toString,
            bB = false,
            bA = true,
            bK = /\\/g,
            bO = /\r\n/g,
            bQ = /\W/;
        [0, 0].sort(function() {
            bA = false;
            return 0;
        });
        var by = function(bV, e, bY, bZ) {
            bY = bY || [];
            e = e || av;
            var b1 = e;
            if (e.nodeType !== 1 && e.nodeType !== 9) {
                return [];
            }
            if (!bV || typeof bV !== "string") {
                return bY;
            }
            var bS, b3, b6, bR, b2, b5, b4, bX, bU = true,
                bT = by.isXML(e),
                bW = [],
                b0 = bV;
            do {
                bH.exec("");
                bS = bH.exec(b0);
                if (bS) {
                    b0 = bS[3];
                    bW.push(bS[1]);
                    if (bS[2]) {
                        bR = bS[3];
                        break;
                    }
                }
            } while (bS);
            if (bW.length > 1 && bD.exec(bV)) {
                if (bW.length === 2 && bE.relative[bW[0]]) {
                    b3 = bM(bW[0] + bW[1], e, bZ);
                } else {
                    b3 = bE.relative[bW[0]] ? [e] : by(bW.shift(), e);
                    while (bW.length) {
                        bV = bW.shift();
                        if (bE.relative[bV]) {
                            bV += bW.shift();
                        }
                        b3 = bM(bV, b3, bZ);
                    }
                }
            } else {
                if (!bZ && bW.length > 1 && e.nodeType === 9 && !bT && bE.match.ID.test(bW[0]) && !bE.match.ID.test(bW[bW.length - 1])) {
                    b2 = by.find(bW.shift(), e, bT);
                    e = b2.expr ? by.filter(b2.expr, b2.set)[0] : b2.set[0];
                }
                if (e) {
                    b2 = bZ ? {
                        expr: bW.pop(),
                        set: bF(bZ)
                    } : by.find(bW.pop(), bW.length === 1 && (bW[0] === "~" || bW[0] === "+") && e.parentNode ? e.parentNode : e, bT);
                    b3 = b2.expr ? by.filter(b2.expr, b2.set) : b2.set;
                    if (bW.length > 0) {
                        b6 = bF(b3);
                    } else {
                        bU = false;
                    }
                    while (bW.length) {
                        b5 = bW.pop();
                        b4 = b5;
                        if (!bE.relative[b5]) {
                            b5 = "";
                        } else {
                            b4 = bW.pop();
                        }
                        if (b4 == null) {
                            b4 = e;
                        }
                        bE.relative[b5](b6, b4, bT);
                    }
                } else {
                    b6 = bW = [];
                }
            }
            if (!b6) {
                b6 = b3;
            }
            if (!b6) {
                by.error(b5 || bV);
            }
            if (bL.call(b6) === "[object Array]") {
                if (!bU) {
                    bY.push.apply(bY, b6);
                } else {
                    if (e && e.nodeType === 1) {
                        for (bX = 0; b6[bX] != null; bX++) {
                            if (b6[bX] && (b6[bX] === true || b6[bX].nodeType === 1 && by.contains(e, b6[bX]))) {
                                bY.push(b3[bX]);
                            }
                        }
                    } else {
                        for (bX = 0; b6[bX] != null; bX++) {
                            if (b6[bX] && b6[bX].nodeType === 1) {
                                bY.push(b3[bX]);
                            }
                        }
                    }
                }
            } else {
                bF(b6, bY);
            }
            if (bR) {
                by(bR, b1, bY, bZ);
                by.uniqueSort(bY);
            }
            return bY;
        };
        by.uniqueSort = function(bR) {
            if (bJ) {
                bB = bA;
                bR.sort(bJ);
                if (bB) {
                    for (var e = 1; e < bR.length; e++) {
                        if (bR[e] === bR[e - 1]) {
                            bR.splice(e--, 1);
                        }
                    }
                }
            }
            return bR;
        };
        by.matches = function(e, bR) {
            return by(e, null, null, bR);
        };
        by.matchesSelector = function(e, bR) {
            return by(bR, null, null, [e]).length > 0;
        };
        by.find = function(bX, e, bY) {
            var bW, bS, bU, bT, bV, bR;
            if (!bX) {
                return [];
            }
            for (bS = 0, bU = bE.order.length; bS < bU; bS++) {
                bV = bE.order[bS];
                if ((bT = bE.leftMatch[bV].exec(bX))) {
                    bR = bT[1];
                    bT.splice(1, 1);
                    if (bR.substr(bR.length - 1) !== "\\") {
                        bT[1] = (bT[1] || "").replace(bK, "");
                        bW = bE.find[bV](bT, e, bY);
                        if (bW != null) {
                            bX = bX.replace(bE.match[bV], "");
                            break;
                        }
                    }
                }
            }
            if (!bW) {
                bW = typeof e.getElementsByTagName !== "undefined" ? e.getElementsByTagName("*") : [];
            }
            return {
                set: bW,
                expr: bX
            };
        };
        by.filter = function(b1, b0, b4, bU) {
            var bW, e, bZ, b6, b3, bR, bT, bV, b2, bS = b1,
                b5 = [],
                bY = b0,
                bX = b0 && b0[0] && by.isXML(b0[0]);
            while (b1 && b0.length) {
                for (bZ in bE.filter) {
                    if ((bW = bE.leftMatch[bZ].exec(b1)) != null && bW[2]) {
                        bR = bE.filter[bZ];
                        bT = bW[1];
                        e = false;
                        bW.splice(1, 1);
                        if (bT.substr(bT.length - 1) === "\\") {
                            continue;
                        }
                        if (bY === b5) {
                            b5 = [];
                        }
                        if (bE.preFilter[bZ]) {
                            bW = bE.preFilter[bZ](bW, bY, b4, b5, bU, bX);
                            if (!bW) {
                                e = b6 = true;
                            } else {
                                if (bW === true) {
                                    continue;
                                }
                            }
                        }
                        if (bW) {
                            for (bV = 0;
                                (b3 = bY[bV]) != null; bV++) {
                                if (b3) {
                                    b6 = bR(b3, bW, bV, bY);
                                    b2 = bU ^ b6;
                                    if (b4 && b6 != null) {
                                        if (b2) {
                                            e = true;
                                        } else {
                                            bY[bV] = false;
                                        }
                                    } else {
                                        if (b2) {
                                            b5.push(b3);
                                            e = true;
                                        }
                                    }
                                }
                            }
                        }
                        if (b6 !== L) {
                            if (!b4) {
                                bY = b5;
                            }
                            b1 = b1.replace(bE.match[bZ], "");
                            if (!e) {
                                return [];
                            }
                            break;
                        }
                    }
                }
                if (b1 === bS) {
                    if (e == null) {
                        by.error(b1);
                    } else {
                        break;
                    }
                }
                bS = b1;
            }
            return bY;
        };
        by.error = function(e) {
            throw new Error("Syntax error, unrecognized expression: " + e);
        };
        var bw = by.getText = function(bU) {
            var bS, bT, e = bU.nodeType,
                bR = "";
            if (e) {
                if (e === 1 || e === 9 || e === 11) {
                    if (typeof bU.textContent === "string") {
                        return bU.textContent;
                    } else {
                        if (typeof bU.innerText === "string") {
                            return bU.innerText.replace(bO, "");
                        } else {
                            for (bU = bU.firstChild; bU; bU = bU.nextSibling) {
                                bR += bw(bU);
                            }
                        }
                    }
                } else {
                    if (e === 3 || e === 4) {
                        return bU.nodeValue;
                    }
                }
            } else {
                for (bS = 0;
                    (bT = bU[bS]); bS++) {
                    if (bT.nodeType !== 8) {
                        bR += bw(bT);
                    }
                }
            }
            return bR;
        };
        var bE = by.selectors = {
            order: ["ID", "NAME", "TAG"],
            match: {
                ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
                ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
                TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
                CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
                POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
                PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            },
            leftMatch: {},
            attrMap: {
                "class": "className",
                "for": "htmlFor"
            },
            attrHandle: {
                href: function(e) {
                    return e.getAttribute("href");
                },
                type: function(e) {
                    return e.getAttribute("type");
                }
            },
            relative: {
                "+": function(bW, bR) {
                    var bT = typeof bR === "string",
                        bV = bT && !bQ.test(bR),
                        bX = bT && !bV;
                    if (bV) {
                        bR = bR.toLowerCase();
                    }
                    for (var bS = 0, e = bW.length, bU; bS < e; bS++) {
                        if ((bU = bW[bS])) {
                            while ((bU = bU.previousSibling) && bU.nodeType !== 1) {}
                            bW[bS] = bX || bU && bU.nodeName.toLowerCase() === bR ? bU || false : bU === bR;
                        }
                    }
                    if (bX) {
                        by.filter(bR, bW, true);
                    }
                },
                ">": function(bW, bR) {
                    var bV, bU = typeof bR === "string",
                        bS = 0,
                        e = bW.length;
                    if (bU && !bQ.test(bR)) {
                        bR = bR.toLowerCase();
                        for (; bS < e; bS++) {
                            bV = bW[bS];
                            if (bV) {
                                var bT = bV.parentNode;
                                bW[bS] = bT.nodeName.toLowerCase() === bR ? bT : false;
                            }
                        }
                    } else {
                        for (; bS < e; bS++) {
                            bV = bW[bS];
                            if (bV) {
                                bW[bS] = bU ? bV.parentNode : bV.parentNode === bR;
                            }
                        }
                        if (bU) {
                            by.filter(bR, bW, true);
                        }
                    }
                },
                "": function(bT, bR, bV) {
                    var bU, bS = bI++,
                        e = bN;
                    if (typeof bR === "string" && !bQ.test(bR)) {
                        bR = bR.toLowerCase();
                        bU = bR;
                        e = bv;
                    }
                    e("parentNode", bR, bS, bT, bU, bV);
                },
                "~": function(bT, bR, bV) {
                    var bU, bS = bI++,
                        e = bN;
                    if (typeof bR === "string" && !bQ.test(bR)) {
                        bR = bR.toLowerCase();
                        bU = bR;
                        e = bv;
                    }
                    e("previousSibling", bR, bS, bT, bU, bV);
                }
            },
            find: {
                ID: function(bR, bS, bT) {
                    if (typeof bS.getElementById !== "undefined" && !bT) {
                        var e = bS.getElementById(bR[1]);
                        return e && e.parentNode ? [e] : [];
                    }
                },
                NAME: function(bS, bV) {
                    if (typeof bV.getElementsByName !== "undefined") {
                        var bR = [],
                            bU = bV.getElementsByName(bS[1]);
                        for (var bT = 0, e = bU.length; bT < e; bT++) {
                            if (bU[bT].getAttribute("name") === bS[1]) {
                                bR.push(bU[bT]);
                            }
                        }
                        return bR.length === 0 ? null : bR;
                    }
                },
                TAG: function(e, bR) {
                    if (typeof bR.getElementsByTagName !== "undefined") {
                        return bR.getElementsByTagName(e[1]);
                    }
                }
            },
            preFilter: {
                CLASS: function(bT, bR, bS, e, bW, bX) {
                    bT = " " + bT[1].replace(bK, "") + " ";
                    if (bX) {
                        return bT;
                    }
                    for (var bU = 0, bV;
                        (bV = bR[bU]) != null; bU++) {
                        if (bV) {
                            if (bW ^ (bV.className && (" " + bV.className + " ").replace(/[\t\n\r]/g, " ").indexOf(bT) >= 0)) {
                                if (!bS) {
                                    e.push(bV);
                                }
                            } else {
                                if (bS) {
                                    bR[bU] = false;
                                }
                            }
                        }
                    }
                    return false;
                },
                ID: function(e) {
                    return e[1].replace(bK, "");
                },
                TAG: function(bR, e) {
                    return bR[1].replace(bK, "").toLowerCase();
                },
                CHILD: function(e) {
                    if (e[1] === "nth") {
                        if (!e[2]) {
                            by.error(e[0]);
                        }
                        e[2] = e[2].replace(/^\+|\s*/g, "");
                        var bR = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(e[2] === "even" && "2n" || e[2] === "odd" && "2n+1" || !/\D/.test(e[2]) && "0n+" + e[2] || e[2]);
                        e[2] = (bR[1] + (bR[2] || 1)) - 0;
                        e[3] = bR[3] - 0;
                    } else {
                        if (e[2]) {
                            by.error(e[0]);
                        }
                    }
                    e[0] = bI++;
                    return e;
                },
                ATTR: function(bU, bR, bS, e, bV, bW) {
                    var bT = bU[1] = bU[1].replace(bK, "");
                    if (!bW && bE.attrMap[bT]) {
                        bU[1] = bE.attrMap[bT];
                    }
                    bU[4] = (bU[4] || bU[5] || "").replace(bK, "");
                    if (bU[2] === "~=") {
                        bU[4] = " " + bU[4] + " ";
                    }
                    return bU;
                },
                PSEUDO: function(bU, bR, bS, e, bV) {
                    if (bU[1] === "not") {
                        if ((bH.exec(bU[3]) || "").length > 1 || /^\w/.test(bU[3])) {
                            bU[3] = by(bU[3], null, null, bR);
                        } else {
                            var bT = by.filter(bU[3], bR, bS, true ^ bV);
                            if (!bS) {
                                e.push.apply(e, bT);
                            }
                            return false;
                        }
                    } else {
                        if (bE.match.POS.test(bU[0]) || bE.match.CHILD.test(bU[0])) {
                            return true;
                        }
                    }
                    return bU;
                },
                POS: function(e) {
                    e.unshift(true);
                    return e;
                }
            },
            filters: {
                enabled: function(e) {
                    return e.disabled === false && e.type !== "hidden";
                },
                disabled: function(e) {
                    return e.disabled === true;
                },
                checked: function(e) {
                    return e.checked === true;
                },
                selected: function(e) {
                    if (e.parentNode) {
                        e.parentNode.selectedIndex;
                    }
                    return e.selected === true;
                },
                parent: function(e) {
                    return !!e.firstChild;
                },
                empty: function(e) {
                    return !e.firstChild;
                },
                has: function(bS, bR, e) {
                    return !!by(e[3], bS).length;
                },
                header: function(e) {
                    return (/h\d/i).test(e.nodeName);
                },
                text: function(bS) {
                    var e = bS.getAttribute("type"),
                        bR = bS.type;
                    return bS.nodeName.toLowerCase() === "input" && "text" === bR && (e === bR || e === null);
                },
                radio: function(e) {
                    return e.nodeName.toLowerCase() === "input" && "radio" === e.type;
                },
                checkbox: function(e) {
                    return e.nodeName.toLowerCase() === "input" && "checkbox" === e.type;
                },
                file: function(e) {
                    return e.nodeName.toLowerCase() === "input" && "file" === e.type;
                },
                password: function(e) {
                    return e.nodeName.toLowerCase() === "input" && "password" === e.type;
                },
                submit: function(bR) {
                    var e = bR.nodeName.toLowerCase();
                    return (e === "input" || e === "button") && "submit" === bR.type;
                },
                image: function(e) {
                    return e.nodeName.toLowerCase() === "input" && "image" === e.type;
                },
                reset: function(bR) {
                    var e = bR.nodeName.toLowerCase();
                    return (e === "input" || e === "button") && "reset" === bR.type;
                },
                button: function(bR) {
                    var e = bR.nodeName.toLowerCase();
                    return e === "input" && "button" === bR.type || e === "button";
                },
                input: function(e) {
                    return (/input|select|textarea|button/i).test(e.nodeName);
                },
                focus: function(e) {
                    return e === e.ownerDocument.activeElement;
                }
            },
            setFilters: {
                first: function(bR, e) {
                    return e === 0;
                },
                last: function(bS, bR, e, bT) {
                    return bR === bT.length - 1;
                },
                even: function(bR, e) {
                    return e % 2 === 0;
                },
                odd: function(bR, e) {
                    return e % 2 === 1;
                },
                lt: function(bS, bR, e) {
                    return bR < e[3] - 0;
                },
                gt: function(bS, bR, e) {
                    return bR > e[3] - 0;
                },
                nth: function(bS, bR, e) {
                    return e[3] - 0 === bR;
                },
                eq: function(bS, bR, e) {
                    return e[3] - 0 === bR;
                }
            },
            filter: {
                PSEUDO: function(bS, bX, bW, bY) {
                    var e = bX[1],
                        bR = bE.filters[e];
                    if (bR) {
                        return bR(bS, bW, bX, bY);
                    } else {
                        if (e === "contains") {
                            return (bS.textContent || bS.innerText || bw([bS]) || "").indexOf(bX[3]) >= 0;
                        } else {
                            if (e === "not") {
                                var bT = bX[3];
                                for (var bV = 0, bU = bT.length; bV < bU; bV++) {
                                    if (bT[bV] === bS) {
                                        return false;
                                    }
                                }
                                return true;
                            } else {
                                by.error(e);
                            }
                        }
                    }
                },
                CHILD: function(bS, bU) {
                    var bT, b0, bW, bZ, e, bV, bY, bX = bU[1],
                        bR = bS;
                    switch (bX) {
                        case "only":
                        case "first":
                            while ((bR = bR.previousSibling)) {
                                if (bR.nodeType === 1) {
                                    return false;
                                }
                            }
                            if (bX === "first") {
                                return true;
                            }
                            bR = bS;
                        case "last":
                            while ((bR = bR.nextSibling)) {
                                if (bR.nodeType === 1) {
                                    return false;
                                }
                            }
                            return true;
                        case "nth":
                            bT = bU[2];
                            b0 = bU[3];
                            if (bT === 1 && b0 === 0) {
                                return true;
                            }
                            bW = bU[0];
                            bZ = bS.parentNode;
                            if (bZ && (bZ[bC] !== bW || !bS.nodeIndex)) {
                                bV = 0;
                                for (bR = bZ.firstChild; bR; bR = bR.nextSibling) {
                                    if (bR.nodeType === 1) {
                                        bR.nodeIndex = ++bV;
                                    }
                                }
                                bZ[bC] = bW;
                            }
                            bY = bS.nodeIndex - b0;
                            if (bT === 0) {
                                return bY === 0;
                            } else {
                                return (bY % bT === 0 && bY / bT >= 0);
                            }
                    }
                },
                ID: function(bR, e) {
                    return bR.nodeType === 1 && bR.getAttribute("id") === e;
                },
                TAG: function(bR, e) {
                    return (e === "*" && bR.nodeType === 1) || !!bR.nodeName && bR.nodeName.toLowerCase() === e;
                },
                CLASS: function(bR, e) {
                    return (" " + (bR.className || bR.getAttribute("class")) + " ").indexOf(e) > -1;
                },
                ATTR: function(bV, bT) {
                    var bS = bT[1],
                        e = by.attr ? by.attr(bV, bS) : bE.attrHandle[bS] ? bE.attrHandle[bS](bV) : bV[bS] != null ? bV[bS] : bV.getAttribute(bS),
                        bW = e + "",
                        bU = bT[2],
                        bR = bT[4];
                    return e == null ? bU === "!=" : !bU && by.attr ? e != null : bU === "=" ? bW === bR : bU === "*=" ? bW.indexOf(bR) >= 0 : bU === "~=" ? (" " + bW + " ").indexOf(bR) >= 0 : !bR ? bW && e !== false : bU === "!=" ? bW !== bR : bU === "^=" ? bW.indexOf(bR) === 0 : bU === "$=" ? bW.substr(bW.length - bR.length) === bR : bU === "|=" ? bW === bR || bW.substr(0, bR.length + 1) === bR + "-" : false;
                },
                POS: function(bU, bR, bS, bV) {
                    var e = bR[2],
                        bT = bE.setFilters[e];
                    if (bT) {
                        return bT(bU, bS, bR, bV);
                    }
                }
            }
        };
        var bD = bE.match.POS,
            bx = function(bR, e) {
                return "\\" + (e - 0 + 1);
            };
        for (var bz in bE.match) {
            bE.match[bz] = new RegExp(bE.match[bz].source + (/(?![^\[]*\])(?![^\(]*\))/.source));
            bE.leftMatch[bz] = new RegExp(/(^(?:.|\r|\n)*?)/.source + bE.match[bz].source.replace(/\\(\d+)/g, bx));
        }
        bE.match.globalPOS = bD;
        var bF = function(bR, e) {
            bR = Array.prototype.slice.call(bR, 0);
            if (e) {
                e.push.apply(e, bR);
                return e;
            }
            return bR;
        };
        try {
            Array.prototype.slice.call(av.documentElement.childNodes, 0)[0].nodeType;
        } catch (bP) {
            bF = function(bU, bT) {
                var bS = 0,
                    bR = bT || [];
                if (bL.call(bU) === "[object Array]") {
                    Array.prototype.push.apply(bR, bU);
                } else {
                    if (typeof bU.length === "number") {
                        for (var e = bU.length; bS < e; bS++) {
                            bR.push(bU[bS]);
                        }
                    } else {
                        for (; bU[bS]; bS++) {
                            bR.push(bU[bS]);
                        }
                    }
                }
                return bR;
            };
        }
        var bJ, bG;
        if (av.documentElement.compareDocumentPosition) {
            bJ = function(bR, e) {
                if (bR === e) {
                    bB = true;
                    return 0;
                }
                if (!bR.compareDocumentPosition || !e.compareDocumentPosition) {
                    return bR.compareDocumentPosition ? -1 : 1;
                }
                return bR.compareDocumentPosition(e) & 4 ? -1 : 1;
            };
        } else {
            bJ = function(bY, bX) {
                if (bY === bX) {
                    bB = true;
                    return 0;
                } else {
                    if (bY.sourceIndex && bX.sourceIndex) {
                        return bY.sourceIndex - bX.sourceIndex;
                    }
                }
                var bV, bR, bS = [],
                    e = [],
                    bU = bY.parentNode,
                    bW = bX.parentNode,
                    bZ = bU;
                if (bU === bW) {
                    return bG(bY, bX);
                } else {
                    if (!bU) {
                        return -1;
                    } else {
                        if (!bW) {
                            return 1;
                        }
                    }
                }
                while (bZ) {
                    bS.unshift(bZ);
                    bZ = bZ.parentNode;
                }
                bZ = bW;
                while (bZ) {
                    e.unshift(bZ);
                    bZ = bZ.parentNode;
                }
                bV = bS.length;
                bR = e.length;
                for (var bT = 0; bT < bV && bT < bR; bT++) {
                    if (bS[bT] !== e[bT]) {
                        return bG(bS[bT], e[bT]);
                    }
                }
                return bT === bV ? bG(bY, e[bT], -1) : bG(bS[bT], bX, 1);
            };
            bG = function(bR, e, bS) {
                if (bR === e) {
                    return bS;
                }
                var bT = bR.nextSibling;
                while (bT) {
                    if (bT === e) {
                        return -1;
                    }
                    bT = bT.nextSibling;
                }
                return 1;
            };
        }(function() {
            var bR = av.createElement("div"),
                bS = "script" + (new Date()).getTime(),
                e = av.documentElement;
            bR.innerHTML = "<a name='" + bS + "'/>";
            e.insertBefore(bR, e.firstChild);
            if (av.getElementById(bS)) {
                bE.find.ID = function(bU, bV, bW) {
                    if (typeof bV.getElementById !== "undefined" && !bW) {
                        var bT = bV.getElementById(bU[1]);
                        return bT ? bT.id === bU[1] || typeof bT.getAttributeNode !== "undefined" && bT.getAttributeNode("id").nodeValue === bU[1] ? [bT] : L : [];
                    }
                };
                bE.filter.ID = function(bV, bT) {
                    var bU = typeof bV.getAttributeNode !== "undefined" && bV.getAttributeNode("id");
                    return bV.nodeType === 1 && bU && bU.nodeValue === bT;
                };
            }
            e.removeChild(bR);
            e = bR = null;
        })();
        (function() {
            var e = av.createElement("div");
            e.appendChild(av.createComment(""));
            if (e.getElementsByTagName("*").length > 0) {
                bE.find.TAG = function(bR, bV) {
                    var bU = bV.getElementsByTagName(bR[1]);
                    if (bR[1] === "*") {
                        var bT = [];
                        for (var bS = 0; bU[bS]; bS++) {
                            if (bU[bS].nodeType === 1) {
                                bT.push(bU[bS]);
                            }
                        }
                        bU = bT;
                    }
                    return bU;
                };
            }
            e.innerHTML = "<a href='#'></a>";
            if (e.firstChild && typeof e.firstChild.getAttribute !== "undefined" && e.firstChild.getAttribute("href") !== "#") {
                bE.attrHandle.href = function(bR) {
                    return bR.getAttribute("href", 2);
                };
            }
            e = null;
        })();
        if (av.querySelectorAll) {
            (function() {
                var e = by,
                    bT = av.createElement("div"),
                    bS = "__sizzle__";
                bT.innerHTML = "<p class='TEST'></p>";
                if (bT.querySelectorAll && bT.querySelectorAll(".TEST").length === 0) {
                    return;
                }
                by = function(b4, bV, bZ, b3) {
                    bV = bV || av;
                    if (!b3 && !by.isXML(bV)) {
                        var b2 = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b4);
                        if (b2 && (bV.nodeType === 1 || bV.nodeType === 9)) {
                            if (b2[1]) {
                                return bF(bV.getElementsByTagName(b4), bZ);
                            } else {
                                if (b2[2] && bE.find.CLASS && bV.getElementsByClassName) {
                                    return bF(bV.getElementsByClassName(b2[2]), bZ);
                                }
                            }
                        }
                        if (bV.nodeType === 9) {
                            if (b4 === "body" && bV.body) {
                                return bF([bV.body], bZ);
                            } else {
                                if (b2 && b2[3]) {
                                    var bY = bV.getElementById(b2[3]);
                                    if (bY && bY.parentNode) {
                                        if (bY.id === b2[3]) {
                                            return bF([bY], bZ);
                                        }
                                    } else {
                                        return bF([], bZ);
                                    }
                                }
                            }
                            try {
                                return bF(bV.querySelectorAll(b4), bZ);
                            } catch (b0) {}
                        } else {
                            if (bV.nodeType === 1 && bV.nodeName.toLowerCase() !== "object") {
                                var bW = bV,
                                    bX = bV.getAttribute("id"),
                                    bU = bX || bS,
                                    b6 = bV.parentNode,
                                    b5 = /^\s*[+~]/.test(b4);
                                if (!bX) {
                                    bV.setAttribute("id", bU);
                                } else {
                                    bU = bU.replace(/'/g, "\\$&");
                                }
                                if (b5 && b6) {
                                    bV = bV.parentNode;
                                }
                                try {
                                    if (!b5 || b6) {
                                        return bF(bV.querySelectorAll("[id='" + bU + "'] " + b4), bZ);
                                    }
                                } catch (b1) {} finally {
                                    if (!bX) {
                                        bW.removeAttribute("id");
                                    }
                                }
                            }
                        }
                    }
                    return e(b4, bV, bZ, b3);
                };
                for (var bR in e) {
                    by[bR] = e[bR];
                }
                bT = null;
            })();
        }(function() {
            var e = av.documentElement,
                bS = e.matchesSelector || e.mozMatchesSelector || e.webkitMatchesSelector || e.msMatchesSelector;
            if (bS) {
                var bU = !bS.call(av.createElement("div"), "div"),
                    bR = false;
                try {
                    bS.call(av.documentElement, "[test!='']:sizzle");
                } catch (bT) {
                    bR = true;
                }
                by.matchesSelector = function(bW, bY) {
                    bY = bY.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                    if (!by.isXML(bW)) {
                        try {
                            if (bR || !bE.match.PSEUDO.test(bY) && !/!=/.test(bY)) {
                                var bV = bS.call(bW, bY);
                                if (bV || !bU || bW.document && bW.document.nodeType !== 11) {
                                    return bV;
                                }
                            }
                        } catch (bX) {}
                    }
                    return by(bY, null, null, [bW]).length > 0;
                };
            }
        })();
        (function() {
            var e = av.createElement("div");
            e.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!e.getElementsByClassName || e.getElementsByClassName("e").length === 0) {
                return;
            }
            e.lastChild.className = "e";
            if (e.getElementsByClassName("e").length === 1) {
                return;
            }
            bE.order.splice(1, 0, "CLASS");
            bE.find.CLASS = function(bR, bS, bT) {
                if (typeof bS.getElementsByClassName !== "undefined" && !bT) {
                    return bS.getElementsByClassName(bR[1]);
                }
            };
            e = null;
        })();

        function bv(bR, bW, bV, bZ, bX, bY) {
            for (var bT = 0, bS = bZ.length; bT < bS; bT++) {
                var e = bZ[bT];
                if (e) {
                    var bU = false;
                    e = e[bR];
                    while (e) {
                        if (e[bC] === bV) {
                            bU = bZ[e.sizset];
                            break;
                        }
                        if (e.nodeType === 1 && !bY) {
                            e[bC] = bV;
                            e.sizset = bT;
                        }
                        if (e.nodeName.toLowerCase() === bW) {
                            bU = e;
                            break;
                        }
                        e = e[bR];
                    }
                    bZ[bT] = bU;
                }
            }
        }

        function bN(bR, bW, bV, bZ, bX, bY) {
            for (var bT = 0, bS = bZ.length; bT < bS; bT++) {
                var e = bZ[bT];
                if (e) {
                    var bU = false;
                    e = e[bR];
                    while (e) {
                        if (e[bC] === bV) {
                            bU = bZ[e.sizset];
                            break;
                        }
                        if (e.nodeType === 1) {
                            if (!bY) {
                                e[bC] = bV;
                                e.sizset = bT;
                            }
                            if (typeof bW !== "string") {
                                if (e === bW) {
                                    bU = true;
                                    break;
                                }
                            } else {
                                if (by.filter(bW, [e]).length > 0) {
                                    bU = e;
                                    break;
                                }
                            }
                        }
                        e = e[bR];
                    }
                    bZ[bT] = bU;
                }
            }
        }
        if (av.documentElement.contains) {
            by.contains = function(bR, e) {
                return bR !== e && (bR.contains ? bR.contains(e) : true);
            };
        } else {
            if (av.documentElement.compareDocumentPosition) {
                by.contains = function(bR, e) {
                    return !!(bR.compareDocumentPosition(e) & 16);
                };
            } else {
                by.contains = function() {
                    return false;
                };
            }
        }
        by.isXML = function(e) {
            var bR = (e ? e.ownerDocument || e : 0).documentElement;
            return bR ? bR.nodeName !== "HTML" : false;
        };
        var bM = function(bS, e, bW) {
            var bV, bX = [],
                bU = "",
                bY = e.nodeType ? [e] : e;
            while ((bV = bE.match.PSEUDO.exec(bS))) {
                bU += bV[0];
                bS = bS.replace(bE.match.PSEUDO, "");
            }
            bS = bE.relative[bS] ? bS + "*" : bS;
            for (var bT = 0, bR = bY.length; bT < bR; bT++) {
                by(bS, bY[bT], bX, bW);
            }
            return by.filter(bU, bX);
        };
        by.attr = b.attr;
        by.selectors.attrMap = {};
        b.find = by;
        b.expr = by.selectors;
        b.expr[":"] = b.expr.filters;
        b.unique = by.uniqueSort;
        b.text = by.getText;
        b.isXMLDoc = by.isXML;
        b.contains = by.contains;
    })();
    var ab = /Until$/,
        aq = /^(?:parents|prevUntil|prevAll)/,
        bb = /,/,
        bp = /^.[^:#\[\.,]*$/,
        P = Array.prototype.slice,
        H = b.expr.match.globalPOS,
        ay = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    b.fn.extend({
        find: function(e) {
            var bw = this,
                by, bv;
            if (typeof e !== "string") {
                return b(e).filter(function() {
                    for (by = 0, bv = bw.length; by < bv; by++) {
                        if (b.contains(bw[by], this)) {
                            return true;
                        }
                    }
                });
            }
            var bx = this.pushStack("", "find", e),
                bA, bB, bz;
            for (by = 0, bv = this.length; by < bv; by++) {
                bA = bx.length;
                b.find(e, this[by], bx);
                if (by > 0) {
                    for (bB = bA; bB < bx.length; bB++) {
                        for (bz = 0; bz < bA; bz++) {
                            if (bx[bz] === bx[bB]) {
                                bx.splice(bB--, 1);
                                break;
                            }
                        }
                    }
                }
            }
            return bx;
        },
        has: function(bv) {
            var e = b(bv);
            return this.filter(function() {
                for (var bx = 0, bw = e.length; bx < bw; bx++) {
                    if (b.contains(this, e[bx])) {
                        return true;
                    }
                }
            });
        },
        not: function(e) {
            return this.pushStack(aH(this, e, false), "not", e);
        },
        filter: function(e) {
            return this.pushStack(aH(this, e, true), "filter", e);
        },
        is: function(e) {
            return !!e && (typeof e === "string" ? H.test(e) ? b(e, this.context).index(this[0]) >= 0 : b.filter(e, this).length > 0 : this.filter(e).length > 0);
        },
        closest: function(by, bx) {
            var bv = [],
                bw, e, bz = this[0];
            if (b.isArray(by)) {
                var bB = 1;
                while (bz && bz.ownerDocument && bz !== bx) {
                    for (bw = 0; bw < by.length; bw++) {
                        if (b(bz).is(by[bw])) {
                            bv.push({
                                selector: by[bw],
                                elem: bz,
                                level: bB
                            });
                        }
                    }
                    bz = bz.parentNode;
                    bB++;
                }
                return bv;
            }
            var bA = H.test(by) || typeof by !== "string" ? b(by, bx || this.context) : 0;
            for (bw = 0, e = this.length; bw < e; bw++) {
                bz = this[bw];
                while (bz) {
                    if (bA ? bA.index(bz) > -1 : b.find.matchesSelector(bz, by)) {
                        bv.push(bz);
                        break;
                    } else {
                        bz = bz.parentNode;
                        if (!bz || !bz.ownerDocument || bz === bx || bz.nodeType === 11) {
                            break;
                        }
                    }
                }
            }
            bv = bv.length > 1 ? b.unique(bv) : bv;
            return this.pushStack(bv, "closest", by);
        },
        index: function(e) {
            if (!e) {
                return (this[0] && this[0].parentNode) ? this.prevAll().length : -1;
            }
            if (typeof e === "string") {
                return b.inArray(this[0], b(e));
            }
            return b.inArray(e.jquery ? e[0] : e, this);
        },
        add: function(e, bv) {
            var bx = typeof e === "string" ? b(e, bv) : b.makeArray(e && e.nodeType ? [e] : e),
                bw = b.merge(this.get(), bx);
            return this.pushStack(B(bx[0]) || B(bw[0]) ? bw : b.unique(bw));
        },
        andSelf: function() {
            return this.add(this.prevObject);
        }
    });

    function B(e) {
        return !e || !e.parentNode || e.parentNode.nodeType === 11;
    }
    b.each({
        parent: function(bv) {
            var e = bv.parentNode;
            return e && e.nodeType !== 11 ? e : null;
        },
        parents: function(e) {
            return b.dir(e, "parentNode");
        },
        parentsUntil: function(bv, e, bw) {
            return b.dir(bv, "parentNode", bw);
        },
        next: function(e) {
            return b.nth(e, 2, "nextSibling");
        },
        prev: function(e) {
            return b.nth(e, 2, "previousSibling");
        },
        nextAll: function(e) {
            return b.dir(e, "nextSibling");
        },
        prevAll: function(e) {
            return b.dir(e, "previousSibling");
        },
        nextUntil: function(bv, e, bw) {
            return b.dir(bv, "nextSibling", bw);
        },
        prevUntil: function(bv, e, bw) {
            return b.dir(bv, "previousSibling", bw);
        },
        siblings: function(e) {
            return b.sibling((e.parentNode || {}).firstChild, e);
        },
        children: function(e) {
            return b.sibling(e.firstChild);
        },
        contents: function(e) {
            return b.nodeName(e, "iframe") ? e.contentDocument || e.contentWindow.document : b.makeArray(e.childNodes);
        }
    }, function(e, bv) {
        b.fn[e] = function(by, bw) {
            var bx = b.map(this, bv, by);
            if (!ab.test(e)) {
                bw = by;
            }
            if (bw && typeof bw === "string") {
                bx = b.filter(bw, bx);
            }
            bx = this.length > 1 && !ay[e] ? b.unique(bx) : bx;
            if ((this.length > 1 || bb.test(bw)) && aq.test(e)) {
                bx = bx.reverse();
            }
            return this.pushStack(bx, e, P.call(arguments).join(","));
        };
    });
    b.extend({
        filter: function(bw, e, bv) {
            if (bv) {
                bw = ":not(" + bw + ")";
            }
            return e.length === 1 ? b.find.matchesSelector(e[0], bw) ? [e[0]] : [] : b.find.matches(bw, e);
        },
        dir: function(bw, bv, by) {
            var e = [],
                bx = bw[bv];
            while (bx && bx.nodeType !== 9 && (by === L || bx.nodeType !== 1 || !b(bx).is(by))) {
                if (bx.nodeType === 1) {
                    e.push(bx);
                }
                bx = bx[bv];
            }
            return e;
        },
        nth: function(by, e, bw, bx) {
            e = e || 1;
            var bv = 0;
            for (; by; by = by[bw]) {
                if (by.nodeType === 1 && ++bv === e) {
                    break;
                }
            }
            return by;
        },
        sibling: function(bw, bv) {
            var e = [];
            for (; bw; bw = bw.nextSibling) {
                if (bw.nodeType === 1 && bw !== bv) {
                    e.push(bw);
                }
            }
            return e;
        }
    });

    function aH(bx, bw, e) {
        bw = bw || 0;
        if (b.isFunction(bw)) {
            return b.grep(bx, function(bz, by) {
                var bA = !!bw.call(bz, by, bz);
                return bA === e;
            });
        } else {
            if (bw.nodeType) {
                return b.grep(bx, function(bz, by) {
                    return (bz === bw) === e;
                });
            } else {
                if (typeof bw === "string") {
                    var bv = b.grep(bx, function(by) {
                        return by.nodeType === 1;
                    });
                    if (bp.test(bw)) {
                        return b.filter(bw, bv, !e);
                    } else {
                        bw = b.filter(bw, bv);
                    }
                }
            }
        }
        return b.grep(bx, function(bz, by) {
            return (b.inArray(bz, bw) >= 0) === e;
        });
    }

    function a(e) {
        var bw = aS.split("|"),
            bv = e.createDocumentFragment();
        if (bv.createElement) {
            while (bw.length) {
                bv.createElement(bw.pop());
            }
        }
        return bv;
    }
    var aS = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        ah = / jQuery\d+="(?:\d+|null)"/g,
        ar = /^\s+/,
        R = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
        d = /<([\w:]+)/,
        v = /<tbody/i,
        W = /<|&#?\w+;/,
        ae = /<(?:script|style)/i,
        O = /<(?:script|object|embed|option|style)/i,
        ai = new RegExp("<(?:" + aS + ")[\\s/>]", "i"),
        o = /checked\s*(?:[^=]|=\s*.checked.)/i,
        bn = /\/(java|ecma)script/i,
        aO = /^\s*<!(?:\[CDATA\[|\-\-)/,
        ax = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            area: [1, "<map>", "</map>"],
            _default: [0, "", ""]
        },
        ac = a(av);
    ax.optgroup = ax.option;
    ax.tbody = ax.tfoot = ax.colgroup = ax.caption = ax.thead;
    ax.th = ax.td;
    if (!b.support.htmlSerialize) {
        ax._default = [1, "div<div>", "</div>"];
    }
    b.fn.extend({
        text: function(e) {
            return b.access(this, function(bv) {
                return bv === L ? b.text(this) : this.empty().append((this[0] && this[0].ownerDocument || av).createTextNode(bv));
            }, null, e, arguments.length);
        },
        wrapAll: function(e) {
            if (b.isFunction(e)) {
                return this.each(function(bw) {
                    b(this).wrapAll(e.call(this, bw));
                });
            }
            if (this[0]) {
                var bv = b(e, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    bv.insertBefore(this[0]);
                }
                bv.map(function() {
                    var bw = this;
                    while (bw.firstChild && bw.firstChild.nodeType === 1) {
                        bw = bw.firstChild;
                    }
                    return bw;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(e) {
            if (b.isFunction(e)) {
                return this.each(function(bv) {
                    b(this).wrapInner(e.call(this, bv));
                });
            }
            return this.each(function() {
                var bv = b(this),
                    bw = bv.contents();
                if (bw.length) {
                    bw.wrapAll(e);
                } else {
                    bv.append(e);
                }
            });
        },
        wrap: function(e) {
            var bv = b.isFunction(e);
            return this.each(function(bw) {
                b(this).wrapAll(bv ? e.call(this, bw) : e);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                if (!b.nodeName(this, "body")) {
                    b(this).replaceWith(this.childNodes);
                }
            }).end();
        },
        append: function() {
            return this.domManip(arguments, true, function(e) {
                if (this.nodeType === 1) {
                    this.appendChild(e);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, true, function(e) {
                if (this.nodeType === 1) {
                    this.insertBefore(e, this.firstChild);
                }
            });
        },
        before: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function(bv) {
                    this.parentNode.insertBefore(bv, this);
                });
            } else {
                if (arguments.length) {
                    var e = b.clean(arguments);
                    e.push.apply(e, this.toArray());
                    return this.pushStack(e, "before", arguments);
                }
            }
        },
        after: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function(bv) {
                    this.parentNode.insertBefore(bv, this.nextSibling);
                });
            } else {
                if (arguments.length) {
                    var e = this.pushStack(this, "after", arguments);
                    e.push.apply(e, b.clean(arguments));
                    return e;
                }
            }
        },
        remove: function(e, bx) {
            for (var bv = 0, bw;
                (bw = this[bv]) != null; bv++) {
                if (!e || b.filter(e, [bw]).length) {
                    if (!bx && bw.nodeType === 1) {
                        b.cleanData(bw.getElementsByTagName("*"));
                        b.cleanData([bw]);
                    }
                    if (bw.parentNode) {
                        bw.parentNode.removeChild(bw);
                    }
                }
            }
            return this;
        },
        empty: function() {
            for (var e = 0, bv;
                (bv = this[e]) != null; e++) {
                if (bv.nodeType === 1) {
                    b.cleanData(bv.getElementsByTagName("*"));
                }
                while (bv.firstChild) {
                    bv.removeChild(bv.firstChild);
                }
            }
            return this;
        },
        clone: function(bv, e) {
            bv = bv == null ? false : bv;
            e = e == null ? bv : e;
            return this.map(function() {
                return b.clone(this, bv, e);
            });
        },
        html: function(e) {
            return b.access(this, function(by) {
                var bx = this[0] || {},
                    bw = 0,
                    bv = this.length;
                if (by === L) {
                    return bx.nodeType === 1 ? bx.innerHTML.replace(ah, "") : null;
                }
                if (typeof by === "string" && !ae.test(by) && (b.support.leadingWhitespace || !ar.test(by)) && !ax[(d.exec(by) || ["", ""])[1].toLowerCase()]) {
                    by = by.replace(R, "<$1></$2>");
                    try {
                        for (; bw < bv; bw++) {
                            bx = this[bw] || {};
                            if (bx.nodeType === 1) {
                                b.cleanData(bx.getElementsByTagName("*"));
                                bx.innerHTML = by;
                            }
                        }
                        bx = 0;
                    } catch (bz) {}
                }
                if (bx) {
                    this.empty().append(by);
                }
            }, null, e, arguments.length);
        },
        replaceWith: function(e) {
            if (this[0] && this[0].parentNode) {
                if (b.isFunction(e)) {
                    return this.each(function(bx) {
                        var bw = b(this),
                            bv = bw.html();
                        bw.replaceWith(e.call(this, bx, bv));
                    });
                }
                if (typeof e !== "string") {
                    e = b(e).detach();
                }
                return this.each(function() {
                    var bw = this.nextSibling,
                        bv = this.parentNode;
                    b(this).remove();
                    if (bw) {
                        b(bw).before(e);
                    } else {
                        b(bv).append(e);
                    }
                });
            } else {
                return this.length ? this.pushStack(b(b.isFunction(e) ? e() : e), "replaceWith", e) : this;
            }
        },
        detach: function(e) {
            return this.remove(e, true);
        },
        domManip: function(bB, bF, bE) {
            var bx, by, bA, bD, bC = bB[0],
                bv = [];
            if (!b.support.checkClone && arguments.length === 3 && typeof bC === "string" && o.test(bC)) {
                return this.each(function() {
                    b(this).domManip(bB, bF, bE, true);
                });
            }
            if (b.isFunction(bC)) {
                return this.each(function(bH) {
                    var bG = b(this);
                    bB[0] = bC.call(this, bH, bF ? bG.html() : L);
                    bG.domManip(bB, bF, bE);
                });
            }
            if (this[0]) {
                bD = bC && bC.parentNode;
                if (b.support.parentNode && bD && bD.nodeType === 11 && bD.childNodes.length === this.length) {
                    bx = {
                        fragment: bD
                    };
                } else {
                    bx = b.buildFragment(bB, this, bv);
                }
                bA = bx.fragment;
                if (bA.childNodes.length === 1) {
                    by = bA = bA.firstChild;
                } else {
                    by = bA.firstChild;
                }
                if (by) {
                    bF = bF && b.nodeName(by, "tr");
                    for (var bw = 0, e = this.length, bz = e - 1; bw < e; bw++) {
                        bE.call(bF ? bc(this[bw], by) : this[bw], bx.cacheable || (e > 1 && bw < bz) ? b.clone(bA, true, true) : bA);
                    }
                }
                if (bv.length) {
                    b.each(bv, function(bG, bH) {
                        if (bH.src) {
                            b.ajax({
                                type: "GET",
                                global: false,
                                url: bH.src,
                                async: false,
                                dataType: "script"
                            });
                        } else {
                            b.globalEval((bH.text || bH.textContent || bH.innerHTML || "").replace(aO, "/*$0*/"));
                        }
                        if (bH.parentNode) {
                            bH.parentNode.removeChild(bH);
                        }
                    });
                }
            }
            return this;
        }
    });

    function bc(e, bv) {
        return b.nodeName(e, "table") ? (e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody"))) : e;
    }

    function s(bB, bv) {
        if (bv.nodeType !== 1 || !b.hasData(bB)) {
            return;
        }
        var by, bx, e, bA = b._data(bB),
            bz = b._data(bv, bA),
            bw = bA.events;
        if (bw) {
            delete bz.handle;
            bz.events = {};
            for (by in bw) {
                for (bx = 0, e = bw[by].length; bx < e; bx++) {
                    b.event.add(bv, by, bw[by][bx]);
                }
            }
        }
        if (bz.data) {
            bz.data = b.extend({}, bz.data);
        }
    }

    function aj(bv, e) {
        var bw;
        if (e.nodeType !== 1) {
            return;
        }
        if (e.clearAttributes) {
            e.clearAttributes();
        }
        if (e.mergeAttributes) {
            e.mergeAttributes(bv);
        }
        bw = e.nodeName.toLowerCase();
        if (bw === "object") {
            e.outerHTML = bv.outerHTML;
        } else {
            if (bw === "input" && (bv.type === "checkbox" || bv.type === "radio")) {
                if (bv.checked) {
                    e.defaultChecked = e.checked = bv.checked;
                }
                if (e.value !== bv.value) {
                    e.value = bv.value;
                }
            } else {
                if (bw === "option") {
                    e.selected = bv.defaultSelected;
                } else {
                    if (bw === "input" || bw === "textarea") {
                        e.defaultValue = bv.defaultValue;
                    } else {
                        if (bw === "script" && e.text !== bv.text) {
                            e.text = bv.text;
                        }
                    }
                }
            }
        }
        e.removeAttribute(b.expando);
        e.removeAttribute("_submit_attached");
        e.removeAttribute("_change_attached");
    }
    b.buildFragment = function(bz, bx, bv) {
        var by, e, bw, bA, bB = bz[0];
        if (bx && bx[0]) {
            bA = bx[0].ownerDocument || bx[0];
        }
        if (!bA.createDocumentFragment) {
            bA = av;
        }
        if (bz.length === 1 && typeof bB === "string" && bB.length < 512 && bA === av && bB.charAt(0) === "<" && !O.test(bB) && (b.support.checkClone || !o.test(bB)) && (b.support.html5Clone || !ai.test(bB))) {
            e = true;
            bw = b.fragments[bB];
            if (bw && bw !== 1) {
                by = bw;
            }
        }
        if (!by) {
            by = bA.createDocumentFragment();
            b.clean(bz, bA, by, bv);
        }
        if (e) {
            b.fragments[bB] = bw ? by : 1;
        }
        return {
            fragment: by,
            cacheable: e
        };
    };
    b.fragments = {};
    b.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(e, bv) {
        b.fn[e] = function(bw) {
            var bz = [],
                bC = b(bw),
                bB = this.length === 1 && this[0].parentNode;
            if (bB && bB.nodeType === 11 && bB.childNodes.length === 1 && bC.length === 1) {
                bC[bv](this[0]);
                return this;
            } else {
                for (var bA = 0, bx = bC.length; bA < bx; bA++) {
                    var by = (bA > 0 ? this.clone(true) : this).get();
                    b(bC[bA])[bv](by);
                    bz = bz.concat(by);
                }
                return this.pushStack(bz, e, bC.selector);
            }
        };
    });

    function bh(e) {
        if (typeof e.getElementsByTagName !== "undefined") {
            return e.getElementsByTagName("*");
        } else {
            if (typeof e.querySelectorAll !== "undefined") {
                return e.querySelectorAll("*");
            } else {
                return [];
            }
        }
    }

    function az(e) {
        if (e.type === "checkbox" || e.type === "radio") {
            e.defaultChecked = e.checked;
        }
    }

    function D(e) {
        var bv = (e.nodeName || "").toLowerCase();
        if (bv === "input") {
            az(e);
        } else {
            if (bv !== "script" && typeof e.getElementsByTagName !== "undefined") {
                b.grep(e.getElementsByTagName("input"), az);
            }
        }
    }

    function am(e) {
        var bv = av.createElement("div");
        ac.appendChild(bv);
        bv.innerHTML = e.outerHTML;
        return bv.firstChild;
    }
    b.extend({
        clone: function(by, bA, bw) {
            var e, bv, bx, bz = b.support.html5Clone || b.isXMLDoc(by) || !ai.test("<" + by.nodeName + ">") ? by.cloneNode(true) : am(by);
            if ((!b.support.noCloneEvent || !b.support.noCloneChecked) && (by.nodeType === 1 || by.nodeType === 11) && !b.isXMLDoc(by)) {
                aj(by, bz);
                e = bh(by);
                bv = bh(bz);
                for (bx = 0; e[bx]; ++bx) {
                    if (bv[bx]) {
                        aj(e[bx], bv[bx]);
                    }
                }
            }
            if (bA) {
                s(by, bz);
                if (bw) {
                    e = bh(by);
                    bv = bh(bz);
                    for (bx = 0; e[bx]; ++bx) {
                        s(e[bx], bv[bx]);
                    }
                }
            }
            e = bv = null;
            return bz;
        },
        clean: function(bI, bw, bv, bx) {
            var bA, bH, bD, bJ = [];
            bw = bw || av;
            if (typeof bw.createElement === "undefined") {
                bw = bw.ownerDocument || bw[0] && bw[0].ownerDocument || av;
            }
            for (var bE = 0, bG;
                (bG = bI[bE]) != null; bE++) {
                if (typeof bG === "number") {
                    bG += "";
                }
                if (!bG) {
                    continue;
                }
                if (typeof bG === "string") {
                    if (!W.test(bG)) {
                        bG = bw.createTextNode(bG);
                    } else {
                        bG = bG.replace(R, "<$1></$2>");
                        var bN = (d.exec(bG) || ["", ""])[1].toLowerCase(),
                            bz = ax[bN] || ax._default,
                            bK = bz[0],
                            bB = bw.createElement("div"),
                            bL = ac.childNodes,
                            bM;
                        if (bw === av) {
                            ac.appendChild(bB);
                        } else {
                            a(bw).appendChild(bB);
                        }
                        bB.innerHTML = bz[1] + bG + bz[2];
                        while (bK--) {
                            bB = bB.lastChild;
                        }
                        if (!b.support.tbody) {
                            var by = v.test(bG),
                                e = bN === "table" && !by ? bB.firstChild && bB.firstChild.childNodes : bz[1] === "<table>" && !by ? bB.childNodes : [];
                            for (bD = e.length - 1; bD >= 0; --bD) {
                                if (b.nodeName(e[bD], "tbody") && !e[bD].childNodes.length) {
                                    e[bD].parentNode.removeChild(e[bD]);
                                }
                            }
                        }
                        if (!b.support.leadingWhitespace && ar.test(bG)) {
                            bB.insertBefore(bw.createTextNode(ar.exec(bG)[0]), bB.firstChild);
                        }
                        bG = bB.childNodes;
                        if (bB) {
                            bB.parentNode.removeChild(bB);
                            if (bL.length > 0) {
                                bM = bL[bL.length - 1];
                                if (bM && bM.parentNode) {
                                    bM.parentNode.removeChild(bM);
                                }
                            }
                        }
                    }
                }
                var bF;
                if (!b.support.appendChecked) {
                    if (bG[0] && typeof(bF = bG.length) === "number") {
                        for (bD = 0; bD < bF; bD++) {
                            D(bG[bD]);
                        }
                    } else {
                        D(bG);
                    }
                }
                if (bG.nodeType) {
                    bJ.push(bG);
                } else {
                    bJ = b.merge(bJ, bG);
                }
            }
            if (bv) {
                bA = function(bO) {
                    return !bO.type || bn.test(bO.type);
                };
                for (bE = 0; bJ[bE]; bE++) {
                    bH = bJ[bE];
                    if (bx && b.nodeName(bH, "script") && (!bH.type || bn.test(bH.type))) {
                        bx.push(bH.parentNode ? bH.parentNode.removeChild(bH) : bH);
                    } else {
                        if (bH.nodeType === 1) {
                            var bC = b.grep(bH.getElementsByTagName("script"), bA);
                            bJ.splice.apply(bJ, [bE + 1, 0].concat(bC));
                        }
                        bv.appendChild(bH);
                    }
                }
            }
            return bJ;
        },
        cleanData: function(bv) {
            var by, bw, e = b.cache,
                bB = b.event.special,
                bA = b.support.deleteExpando;
            for (var bz = 0, bx;
                (bx = bv[bz]) != null; bz++) {
                if (bx.nodeName && b.noData[bx.nodeName.toLowerCase()]) {
                    continue;
                }
                bw = bx[b.expando];
                if (bw) {
                    by = e[bw];
                    if (by && by.events) {
                        for (var bC in by.events) {
                            if (bB[bC]) {
                                b.event.remove(bx, bC);
                            } else {
                                b.removeEvent(bx, bC, by.handle);
                            }
                        }
                        if (by.handle) {
                            by.handle.elem = null;
                        }
                    }
                    if (bA) {
                        delete bx[b.expando];
                    } else {
                        if (bx.removeAttribute) {
                            bx.removeAttribute(b.expando);
                        }
                    }
                    delete e[bw];
                }
            }
        }
    });
    var al = /alpha\([^)]*\)/i,
        au = /opacity=([^)]*)/,
        y = /([A-Z]|^ms)/g,
        bo = /^[\-+]?(?:\d*\.)?\d+$/i,
        a1 = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,
        I = /^([\-+])=([\-+.\de]+)/,
        aE = /^margin/,
        a9 = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        G = ["Top", "Right", "Bottom", "Left"],
        Z, aJ, aY;
    b.fn.css = function(e, bv) {
        return b.access(this, function(bx, bw, by) {
            return by !== L ? b.style(bx, bw, by) : b.css(bx, bw);
        }, e, bv, arguments.length > 1);
    };
    b.extend({
        cssHooks: {
            opacity: {
                get: function(bw, bv) {
                    if (bv) {
                        var e = Z(bw, "opacity");
                        return e === "" ? "1" : e;
                    } else {
                        return bw.style.opacity;
                    }
                }
            }
        },
        cssNumber: {
            fillOpacity: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {
            "float": b.support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(bx, bw, bD, by) {
            if (!bx || bx.nodeType === 3 || bx.nodeType === 8 || !bx.style) {
                return;
            }
            var bB, bC, bz = b.camelCase(bw),
                bv = bx.style,
                bE = b.cssHooks[bz];
            bw = b.cssProps[bz] || bz;
            if (bD !== L) {
                bC = typeof bD;
                if (bC === "string" && (bB = I.exec(bD))) {
                    bD = (+(bB[1] + 1) * +bB[2]) + parseFloat(b.css(bx, bw));
                    bC = "number";
                }
                if (bD == null || bC === "number" && isNaN(bD)) {
                    return;
                }
                if (bC === "number" && !b.cssNumber[bz]) {
                    bD += "px";
                }
                if (!bE || !("set" in bE) || (bD = bE.set(bx, bD)) !== L) {
                    try {
                        bv[bw] = bD;
                    } catch (bA) {}
                }
            } else {
                if (bE && "get" in bE && (bB = bE.get(bx, false, by)) !== L) {
                    return bB;
                }
                return bv[bw];
            }
        },
        css: function(by, bx, bv) {
            var bw, e;
            bx = b.camelCase(bx);
            e = b.cssHooks[bx];
            bx = b.cssProps[bx] || bx;
            if (bx === "cssFloat") {
                bx = "float";
            }
            if (e && "get" in e && (bw = e.get(by, true, bv)) !== L) {
                return bw;
            } else {
                if (Z) {
                    return Z(by, bx);
                }
            }
        },
        swap: function(by, bx, bz) {
            var e = {},
                bw, bv;
            for (bv in bx) {
                e[bv] = by.style[bv];
                by.style[bv] = bx[bv];
            }
            bw = bz.call(by);
            for (bv in bx) {
                by.style[bv] = e[bv];
            }
            return bw;
        }
    });
    b.curCSS = b.css;
    if (av.defaultView && av.defaultView.getComputedStyle) {
        aJ = function(bA, bw) {
            var bv, bz, e, by, bx = bA.style;
            bw = bw.replace(y, "-$1").toLowerCase();
            if ((bz = bA.ownerDocument.defaultView) && (e = bz.getComputedStyle(bA, null))) {
                bv = e.getPropertyValue(bw);
                if (bv === "" && !b.contains(bA.ownerDocument.documentElement, bA)) {
                    bv = b.style(bA, bw);
                }
            }
            if (!b.support.pixelMargin && e && aE.test(bw) && a1.test(bv)) {
                by = bx.width;
                bx.width = bv;
                bv = e.width;
                bx.width = by;
            }
            return bv;
        };
    }
    if (av.documentElement.currentStyle) {
        aY = function(bz, bw) {
            var bA, e, by, bv = bz.currentStyle && bz.currentStyle[bw],
                bx = bz.style;
            if (bv == null && bx && (by = bx[bw])) {
                bv = by;
            }
            if (a1.test(bv)) {
                bA = bx.left;
                e = bz.runtimeStyle && bz.runtimeStyle.left;
                if (e) {
                    bz.runtimeStyle.left = bz.currentStyle.left;
                }
                bx.left = bw === "fontSize" ? "1em" : bv;
                bv = bx.pixelLeft + "px";
                bx.left = bA;
                if (e) {
                    bz.runtimeStyle.left = e;
                }
            }
            return bv === "" ? "auto" : bv;
        };
    }
    Z = aJ || aY;

    function af(by, bw, bv) {
        var bz = bw === "width" ? by.offsetWidth : by.offsetHeight,
            bx = bw === "width" ? 1 : 0,
            e = 4;
        if (bz > 0) {
            if (bv !== "border") {
                for (; bx < e; bx += 2) {
                    if (!bv) {
                        bz -= parseFloat(b.css(by, "padding" + G[bx])) || 0;
                    }
                    if (bv === "margin") {
                        bz += parseFloat(b.css(by, bv + G[bx])) || 0;
                    } else {
                        bz -= parseFloat(b.css(by, "border" + G[bx] + "Width")) || 0;
                    }
                }
            }
            return bz + "px";
        }
        bz = Z(by, bw);
        if (bz < 0 || bz == null) {
            bz = by.style[bw];
        }
        if (a1.test(bz)) {
            return bz;
        }
        bz = parseFloat(bz) || 0;
        if (bv) {
            for (; bx < e; bx += 2) {
                bz += parseFloat(b.css(by, "padding" + G[bx])) || 0;
                if (bv !== "padding") {
                    bz += parseFloat(b.css(by, "border" + G[bx] + "Width")) || 0;
                }
                if (bv === "margin") {
                    bz += parseFloat(b.css(by, bv + G[bx])) || 0;
                }
            }
        }
        return bz + "px";
    }
    b.each(["height", "width"], function(bv, e) {
        b.cssHooks[e] = {
            get: function(by, bx, bw) {
                if (bx) {
                    if (by.offsetWidth !== 0) {
                        return af(by, e, bw);
                    } else {
                        return b.swap(by, a9, function() {
                            return af(by, e, bw);
                        });
                    }
                }
            },
            set: function(bw, bx) {
                return bo.test(bx) ? bx + "px" : bx;
            }
        };
    });
    if (!b.support.opacity) {
        b.cssHooks.opacity = {
            get: function(bv, e) {
                return au.test((e && bv.currentStyle ? bv.currentStyle.filter : bv.style.filter) || "") ? (parseFloat(RegExp.$1) / 100) + "" : e ? "1" : "";
            },
            set: function(by, bz) {
                var bx = by.style,
                    bv = by.currentStyle,
                    e = b.isNumeric(bz) ? "alpha(opacity=" + bz * 100 + ")" : "",
                    bw = bv && bv.filter || bx.filter || "";
                bx.zoom = 1;
                if (bz >= 1 && b.trim(bw.replace(al, "")) === "") {
                    bx.removeAttribute("filter");
                    if (bv && !bv.filter) {
                        return;
                    }
                }
                bx.filter = al.test(bw) ? bw.replace(al, e) : bw + " " + e;
            }
        };
    }
    b(function() {
        if (!b.support.reliableMarginRight) {
            b.cssHooks.marginRight = {
                get: function(bv, e) {
                    return b.swap(bv, {
                        display: "inline-block"
                    }, function() {
                        if (e) {
                            return Z(bv, "margin-right");
                        } else {
                            return bv.style.marginRight;
                        }
                    });
                }
            };
        }
    });
    if (b.expr && b.expr.filters) {
        b.expr.filters.hidden = function(bw) {
            var bv = bw.offsetWidth,
                e = bw.offsetHeight;
            return (bv === 0 && e === 0) || (!b.support.reliableHiddenOffsets && ((bw.style && bw.style.display) || b.css(bw, "display")) === "none");
        };
        b.expr.filters.visible = function(e) {
            return !b.expr.filters.hidden(e);
        };
    }
    b.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(e, bv) {
        b.cssHooks[e + bv] = {
            expand: function(by) {
                var bx, bz = typeof by === "string" ? by.split(" ") : [by],
                    bw = {};
                for (bx = 0; bx < 4; bx++) {
                    bw[e + G[bx] + bv] = bz[bx] || bz[bx - 2] || bz[0];
                }
                return bw;
            }
        };
    });
    var k = /%20/g,
        ap = /\[\]$/,
        bs = /\r?\n/g,
        bq = /#.*$/,
        aD = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
        a0 = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
        aN = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
        aR = /^(?:GET|HEAD)$/,
        c = /^\/\//,
        M = /\?/,
        a7 = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
        p = /^(?:select|textarea)/i,
        h = /\s+/,
        br = /([?&])_=[^&]*/,
        K = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,
        z = b.fn.load,
        aa = {},
        q = {},
        aF, r, aW = ["*/"] + ["*"];
    try {
        aF = bm.href;
    } catch (aw) {
        aF = av.createElement("a");
        aF.href = "";
        aF = aF.href;
    }
    r = K.exec(aF.toLowerCase()) || [];

    function f(e) {
        return function(by, bA) {
            if (typeof by !== "string") {
                bA = by;
                by = "*";
            }
            if (b.isFunction(bA)) {
                var bx = by.toLowerCase().split(h),
                    bw = 0,
                    bz = bx.length,
                    bv, bB, bC;
                for (; bw < bz; bw++) {
                    bv = bx[bw];
                    bC = /^\+/.test(bv);
                    if (bC) {
                        bv = bv.substr(1) || "*";
                    }
                    bB = e[bv] = e[bv] || [];
                    bB[bC ? "unshift" : "push"](bA);
                }
            }
        };
    }

    function aX(bv, bE, bz, bD, bB, bx) {
        bB = bB || bE.dataTypes[0];
        bx = bx || {};
        bx[bB] = true;
        var bA = bv[bB],
            bw = 0,
            e = bA ? bA.length : 0,
            by = (bv === aa),
            bC;
        for (; bw < e && (by || !bC); bw++) {
            bC = bA[bw](bE, bz, bD);
            if (typeof bC === "string") {
                if (!by || bx[bC]) {
                    bC = L;
                } else {
                    bE.dataTypes.unshift(bC);
                    bC = aX(bv, bE, bz, bD, bC, bx);
                }
            }
        }
        if ((by || !bC) && !bx["*"]) {
            bC = aX(bv, bE, bz, bD, "*", bx);
        }
        return bC;
    }

    function an(bw, bx) {
        var bv, e, by = b.ajaxSettings.flatOptions || {};
        for (bv in bx) {
            if (bx[bv] !== L) {
                (by[bv] ? bw : (e || (e = {})))[bv] = bx[bv];
            }
        }
        if (e) {
            b.extend(true, bw, e);
        }
    }
    b.fn.extend({
        load: function(bw, bz, bA) {
            if (typeof bw !== "string" && z) {
                return z.apply(this, arguments);
            } else {
                if (!this.length) {
                    return this;
                }
            }
            var by = bw.indexOf(" ");
            if (by >= 0) {
                var e = bw.slice(by, bw.length);
                bw = bw.slice(0, by);
            }
            var bx = "GET";
            if (bz) {
                if (b.isFunction(bz)) {
                    bA = bz;
                    bz = L;
                } else {
                    if (typeof bz === "object") {
                        bz = b.param(bz, b.ajaxSettings.traditional);
                        bx = "POST";
                    }
                }
            }
            var bv = this;
            b.ajax({
                url: bw,
                type: bx,
                dataType: "html",
                data: bz,
                complete: function(bC, bB, bD) {
                    bD = bC.responseText;
                    if (bC.isResolved()) {
                        bC.done(function(bE) {
                            bD = bE;
                        });
                        bv.html(e ? b("<div>").append(bD.replace(a7, "")).find(e) : bD);
                    }
                    if (bA) {
                        bv.each(bA, [bD, bB, bC]);
                    }
                }
            });
            return this;
        },
        serialize: function() {
            return b.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                return this.elements ? b.makeArray(this.elements) : this;
            }).filter(function() {
                return this.name && !this.disabled && (this.checked || p.test(this.nodeName) || a0.test(this.type));
            }).map(function(e, bv) {
                var bw = b(this).val();
                return bw == null ? null : b.isArray(bw) ? b.map(bw, function(by, bx) {
                    return {
                        name: bv.name,
                        value: by.replace(bs, "\r\n")
                    };
                }) : {
                    name: bv.name,
                    value: bw.replace(bs, "\r\n")
                };
            }).get();
        }
    });
    b.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(e, bv) {
        b.fn[bv] = function(bw) {
            return this.on(bv, bw);
        };
    });
    b.each(["get", "post"], function(e, bv) {
        b[bv] = function(bw, by, bz, bx) {
            if (b.isFunction(by)) {
                bx = bx || bz;
                bz = by;
                by = L;
            }
            return b.ajax({
                type: bv,
                url: bw,
                data: by,
                success: bz,
                dataType: bx
            });
        };
    });
    b.extend({
        getScript: function(e, bv) {
            return b.get(e, L, bv, "script");
        },
        getJSON: function(e, bv, bw) {
            return b.get(e, bv, bw, "json");
        },
        ajaxSetup: function(bv, e) {
            if (e) {
                an(bv, b.ajaxSettings);
            } else {
                e = bv;
                bv = b.ajaxSettings;
            }
            an(bv, e);
            return bv;
        },
        ajaxSettings: {
            url: aF,
            isLocal: aN.test(r[1]),
            global: true,
            type: "GET",
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            processData: true,
            async: true,
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                text: "text/plain",
                json: "application/json, text/javascript",
                "*": aW
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },
            converters: {
                "* text": bd.String,
                "text html": true,
                "text json": b.parseJSON,
                "text xml": b.parseXML
            },
            flatOptions: {
                context: true,
                url: true
            }
        },
        ajaxPrefilter: f(aa),
        ajaxTransport: f(q),
        ajax: function(bz, bx) {
            if (typeof bz === "object") {
                bx = bz;
                bz = L;
            }
            bx = bx || {};
            var bD = b.ajaxSetup({}, bx),
                bS = bD.context || bD,
                bG = bS !== bD && (bS.nodeType || bS instanceof b) ? b(bS) : b.event,
                bR = b.Deferred(),
                bN = b.Callbacks("once memory"),
                bB = bD.statusCode || {},
                bC, bH = {},
                bO = {},
                bQ, by, bL, bE, bI, bA = 0,
                bw, bK, bJ = {
                    readyState: 0,
                    setRequestHeader: function(bT, bU) {
                        if (!bA) {
                            var e = bT.toLowerCase();
                            bT = bO[e] = bO[e] || bT;
                            bH[bT] = bU;
                        }
                        return this;
                    },
                    getAllResponseHeaders: function() {
                        return bA === 2 ? bQ : null;
                    },
                    getResponseHeader: function(bT) {
                        var e;
                        if (bA === 2) {
                            if (!by) {
                                by = {};
                                while ((e = aD.exec(bQ))) {
                                    by[e[1].toLowerCase()] = e[2];
                                }
                            }
                            e = by[bT.toLowerCase()];
                        }
                        return e === L ? null : e;
                    },
                    overrideMimeType: function(e) {
                        if (!bA) {
                            bD.mimeType = e;
                        }
                        return this;
                    },
                    abort: function(e) {
                        e = e || "abort";
                        if (bL) {
                            bL.abort(e);
                        }
                        bF(0, e);
                        return this;
                    }
                };

            function bF(bZ, bU, b0, bW) {
                if (bA === 2) {
                    return;
                }
                bA = 2;
                if (bE) {
                    clearTimeout(bE);
                }
                bL = L;
                bQ = bW || "";
                bJ.readyState = bZ > 0 ? 4 : 0;
                var bT, b4, b3, bX = bU,
                    bY = b0 ? bk(bD, bJ, b0) : L,
                    bV, b2;
                if (bZ >= 200 && bZ < 300 || bZ === 304) {
                    if (bD.ifModified) {
                        if ((bV = bJ.getResponseHeader("Last-Modified"))) {
                            b.lastModified[bC] = bV;
                        }
                        if ((b2 = bJ.getResponseHeader("Etag"))) {
                            b.etag[bC] = b2;
                        }
                    }
                    if (bZ === 304) {
                        bX = "notmodified";
                        bT = true;
                    } else {
                        try {
                            b4 = F(bD, bY);
                            bX = "success";
                            bT = true;
                        } catch (b1) {
                            bX = "parsererror";
                            b3 = b1;
                        }
                    }
                } else {
                    b3 = bX;
                    if (!bX || bZ) {
                        bX = "error";
                        if (bZ < 0) {
                            bZ = 0;
                        }
                    }
                }
                bJ.status = bZ;
                bJ.statusText = "" + (bU || bX);
                if (bT) {
                    bR.resolveWith(bS, [b4, bX, bJ]);
                } else {
                    bR.rejectWith(bS, [bJ, bX, b3]);
                }
                bJ.statusCode(bB);
                bB = L;
                if (bw) {
                    bG.trigger("ajax" + (bT ? "Success" : "Error"), [bJ, bD, bT ? b4 : b3]);
                }
                bN.fireWith(bS, [bJ, bX]);
                if (bw) {
                    bG.trigger("ajaxComplete", [bJ, bD]);
                    if (!(--b.active)) {
                        b.event.trigger("ajaxStop");
                    }
                }
            }
            bR.promise(bJ);
            bJ.success = bJ.done;
            bJ.error = bJ.fail;
            bJ.complete = bN.add;
            bJ.statusCode = function(bT) {
                if (bT) {
                    var e;
                    if (bA < 2) {
                        for (e in bT) {
                            bB[e] = [bB[e], bT[e]];
                        }
                    } else {
                        e = bT[bJ.status];
                        bJ.then(e, e);
                    }
                }
                return this;
            };
            bD.url = ((bz || bD.url) + "").replace(bq, "").replace(c, r[1] + "//");
            bD.dataTypes = b.trim(bD.dataType || "*").toLowerCase().split(h);
            if (bD.crossDomain == null) {
                bI = K.exec(bD.url.toLowerCase());
                bD.crossDomain = !!(bI && (bI[1] != r[1] || bI[2] != r[2] || (bI[3] || (bI[1] === "http:" ? 80 : 443)) != (r[3] || (r[1] === "http:" ? 80 : 443))));
            }
            if (bD.data && bD.processData && typeof bD.data !== "string") {
                bD.data = b.param(bD.data, bD.traditional);
            }
            aX(aa, bD, bx, bJ);
            if (bA === 2) {
                return false;
            }
            bw = bD.global;
            bD.type = bD.type.toUpperCase();
            bD.hasContent = !aR.test(bD.type);
            if (bw && b.active++ === 0) {
                b.event.trigger("ajaxStart");
            }
            if (!bD.hasContent) {
                if (bD.data) {
                    bD.url += (M.test(bD.url) ? "&" : "?") + bD.data;
                    delete bD.data;
                }
                bC = bD.url;
                if (bD.cache === false) {
                    var bv = b.now(),
                        bP = bD.url.replace(br, "$1_=" + bv);
                    bD.url = bP + ((bP === bD.url) ? (M.test(bD.url) ? "&" : "?") + "_=" + bv : "");
                }
            }
            if (bD.data && bD.hasContent && bD.contentType !== false || bx.contentType) {
                bJ.setRequestHeader("Content-Type", bD.contentType);
            }
            if (bD.ifModified) {
                bC = bC || bD.url;
                if (b.lastModified[bC]) {
                    bJ.setRequestHeader("If-Modified-Since", b.lastModified[bC]);
                }
                if (b.etag[bC]) {
                    bJ.setRequestHeader("If-None-Match", b.etag[bC]);
                }
            }
            bJ.setRequestHeader("Accept", bD.dataTypes[0] && bD.accepts[bD.dataTypes[0]] ? bD.accepts[bD.dataTypes[0]] + (bD.dataTypes[0] !== "*" ? ", " + aW + "; q=0.01" : "") : bD.accepts["*"]);
            for (bK in bD.headers) {
                bJ.setRequestHeader(bK, bD.headers[bK]);
            }
            if (bD.beforeSend && (bD.beforeSend.call(bS, bJ, bD) === false || bA === 2)) {
                bJ.abort();
                return false;
            }
            for (bK in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                bJ[bK](bD[bK]);
            }
            bL = aX(q, bD, bx, bJ);
            if (!bL) {
                bF(-1, "No Transport");
            } else {
                bJ.readyState = 1;
                if (bw) {
                    bG.trigger("ajaxSend", [bJ, bD]);
                }
                if (bD.async && bD.timeout > 0) {
                    bE = setTimeout(function() {
                        bJ.abort("timeout");
                    }, bD.timeout);
                }
                try {
                    bA = 1;
                    bL.send(bH, bF);
                } catch (bM) {
                    if (bA < 2) {
                        bF(-1, bM);
                    } else {
                        throw bM;
                    }
                }
            }
            return bJ;
        },
        param: function(e, bw) {
            var bv = [],
                by = function(bz, bA) {
                    bA = b.isFunction(bA) ? bA() : bA;
                    bv[bv.length] = encodeURIComponent(bz) + "=" + encodeURIComponent(bA);
                };
            if (bw === L) {
                bw = b.ajaxSettings.traditional;
            }
            if (b.isArray(e) || (e.jquery && !b.isPlainObject(e))) {
                b.each(e, function() {
                    by(this.name, this.value);
                });
            } else {
                for (var bx in e) {
                    u(bx, e[bx], bw, by);
                }
            }
            return bv.join("&").replace(k, "+");
        }
    });

    function u(bw, by, bv, bx) {
        if (b.isArray(by)) {
            b.each(by, function(bA, bz) {
                if (bv || ap.test(bw)) {
                    bx(bw, bz);
                } else {
                    u(bw + "[" + (typeof bz === "object" ? bA : "") + "]", bz, bv, bx);
                }
            });
        } else {
            if (!bv && b.type(by) === "object") {
                for (var e in by) {
                    u(bw + "[" + e + "]", by[e], bv, bx);
                }
            } else {
                bx(bw, by);
            }
        }
    }
    b.extend({
        active: 0,
        lastModified: {},
        etag: {}
    });

    function bk(bD, bC, bz) {
        var bv = bD.contents,
            bB = bD.dataTypes,
            bw = bD.responseFields,
            by, bA, bx, e;
        for (bA in bw) {
            if (bA in bz) {
                bC[bw[bA]] = bz[bA];
            }
        }
        while (bB[0] === "*") {
            bB.shift();
            if (by === L) {
                by = bD.mimeType || bC.getResponseHeader("content-type");
            }
        }
        if (by) {
            for (bA in bv) {
                if (bv[bA] && bv[bA].test(by)) {
                    bB.unshift(bA);
                    break;
                }
            }
        }
        if (bB[0] in bz) {
            bx = bB[0];
        } else {
            for (bA in bz) {
                if (!bB[0] || bD.converters[bA + " " + bB[0]]) {
                    bx = bA;
                    break;
                }
                if (!e) {
                    e = bA;
                }
            }
            bx = bx || e;
        }
        if (bx) {
            if (bx !== bB[0]) {
                bB.unshift(bx);
            }
            return bz[bx];
        }
    }

    function F(bH, bz) {
        if (bH.dataFilter) {
            bz = bH.dataFilter(bz, bH.dataType);
        }
        var bD = bH.dataTypes,
            bG = {},
            bA, bE, bw = bD.length,
            bB, bC = bD[0],
            bx, by, bF, bv, e;
        for (bA = 1; bA < bw; bA++) {
            if (bA === 1) {
                for (bE in bH.converters) {
                    if (typeof bE === "string") {
                        bG[bE.toLowerCase()] = bH.converters[bE];
                    }
                }
            }
            bx = bC;
            bC = bD[bA];
            if (bC === "*") {
                bC = bx;
            } else {
                if (bx !== "*" && bx !== bC) {
                    by = bx + " " + bC;
                    bF = bG[by] || bG["* " + bC];
                    if (!bF) {
                        e = L;
                        for (bv in bG) {
                            bB = bv.split(" ");
                            if (bB[0] === bx || bB[0] === "*") {
                                e = bG[bB[1] + " " + bC];
                                if (e) {
                                    bv = bG[bv];
                                    if (bv === true) {
                                        bF = e;
                                    } else {
                                        if (e === true) {
                                            bF = bv;
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (!(bF || e)) {
                        b.error("No conversion from " + by.replace(" ", " to "));
                    }
                    if (bF !== true) {
                        bz = bF ? bF(bz) : e(bv(bz));
                    }
                }
            }
        }
        return bz;
    }
    var aC = b.now(),
        t = /(\=)\?(&|$)|\?\?/i;
    b.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            return b.expando + "_" + (aC++);
        }
    });
    b.ajaxPrefilter("json jsonp", function(bD, bA, bC) {
        var bx = (typeof bD.data === "string") && /^application\/x\-www\-form\-urlencoded/.test(bD.contentType);
        if (bD.dataTypes[0] === "jsonp" || bD.jsonp !== false && (t.test(bD.url) || bx && t.test(bD.data))) {
            var bB, bw = bD.jsonpCallback = b.isFunction(bD.jsonpCallback) ? bD.jsonpCallback() : bD.jsonpCallback,
                bz = bd[bw],
                e = bD.url,
                by = bD.data,
                bv = "$1" + bw + "$2";
            if (bD.jsonp !== false) {
                e = e.replace(t, bv);
                if (bD.url === e) {
                    if (bx) {
                        by = by.replace(t, bv);
                    }
                    if (bD.data === by) {
                        e += (/\?/.test(e) ? "&" : "?") + bD.jsonp + "=" + bw;
                    }
                }
            }
            bD.url = e;
            bD.data = by;
            bd[bw] = function(bE) {
                bB = [bE];
            };
            bC.always(function() {
                bd[bw] = bz;
                if (bB && b.isFunction(bz)) {
                    bd[bw](bB[0]);
                }
            });
            bD.converters["script json"] = function() {
                if (!bB) {
                    b.error(bw + " was not called");
                }
                return bB[0];
            };
            bD.dataTypes[0] = "json";
            return "script";
        }
    });
    b.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /javascript|ecmascript/
        },
        converters: {
            "text script": function(e) {
                b.globalEval(e);
                return e;
            }
        }
    });
    b.ajaxPrefilter("script", function(e) {
        if (e.cache === L) {
            e.cache = false;
        }
        if (e.crossDomain) {
            e.type = "GET";
            e.global = false;
        }
    });
    b.ajaxTransport("script", function(bw) {
        if (bw.crossDomain) {
            var e, bv = av.head || av.getElementsByTagName("head")[0] || av.documentElement;
            return {
                send: function(bx, by) {
                    e = av.createElement("script");
                    e.async = "async";
                    if (bw.scriptCharset) {
                        e.charset = bw.scriptCharset;
                    }
                    e.src = bw.url;
                    e.onload = e.onreadystatechange = function(bA, bz) {
                        if (bz || !e.readyState || /loaded|complete/.test(e.readyState)) {
                            e.onload = e.onreadystatechange = null;
                            if (bv && e.parentNode) {
                                bv.removeChild(e);
                            }
                            e = L;
                            if (!bz) {
                                by(200, "success");
                            }
                        }
                    };
                    bv.insertBefore(e, bv.firstChild);
                },
                abort: function() {
                    if (e) {
                        e.onload(0, 1);
                    }
                }
            };
        }
    });
    var A = bd.ActiveXObject ? function() {
            for (var e in N) {
                N[e](0, 1);
            }
        } : false,
        x = 0,
        N;

    function aM() {
        try {
            return new bd.XMLHttpRequest();
        } catch (bv) {}
    }

    function ak() {
        try {
            return new bd.ActiveXObject("Microsoft.XMLHTTP");
        } catch (bv) {}
    }
    b.ajaxSettings.xhr = bd.ActiveXObject ? function() {
        return !this.isLocal && aM() || ak();
    } : aM;
    (function(e) {
        b.extend(b.support, {
            ajax: !!e,
            cors: !!e && ("withCredentials" in e)
        });
    })(b.ajaxSettings.xhr());
    if (b.support.ajax) {
        b.ajaxTransport(function(e) {
            if (!e.crossDomain || b.support.cors) {
                var bv;
                return {
                    send: function(bB, bw) {
                        var bA = e.xhr(),
                            bz, by;
                        if (e.username) {
                            bA.open(e.type, e.url, e.async, e.username, e.password);
                        } else {
                            bA.open(e.type, e.url, e.async);
                        }
                        if (e.xhrFields) {
                            for (by in e.xhrFields) {
                                bA[by] = e.xhrFields[by];
                            }
                        }
                        if (e.mimeType && bA.overrideMimeType) {
                            bA.overrideMimeType(e.mimeType);
                        }
                        if (!e.crossDomain && !bB["X-Requested-With"]) {
                            bB["X-Requested-With"] = "XMLHttpRequest";
                        }
                        try {
                            for (by in bB) {
                                bA.setRequestHeader(by, bB[by]);
                            }
                        } catch (bx) {}
                        bA.send((e.hasContent && e.data) || null);
                        bv = function(bK, bE) {
                            var bF, bD, bC, bI, bH;
                            try {
                                if (bv && (bE || bA.readyState === 4)) {
                                    bv = L;
                                    if (bz) {
                                        bA.onreadystatechange = b.noop;
                                        if (A) {
                                            delete N[bz];
                                        }
                                    }
                                    if (bE) {
                                        if (bA.readyState !== 4) {
                                            bA.abort();
                                        }
                                    } else {
                                        bF = bA.status;
                                        bC = bA.getAllResponseHeaders();
                                        bI = {};
                                        bH = bA.responseXML;
                                        if (bH && bH.documentElement) {
                                            bI.xml = bH;
                                        }
                                        try {
                                            bI.text = bA.responseText;
                                        } catch (bK) {}
                                        try {
                                            bD = bA.statusText;
                                        } catch (bJ) {
                                            bD = "";
                                        }
                                        if (!bF && e.isLocal && !e.crossDomain) {
                                            bF = bI.text ? 200 : 404;
                                        } else {
                                            if (bF === 1223) {
                                                bF = 204;
                                            }
                                        }
                                    }
                                }
                            } catch (bG) {
                                if (!bE) {
                                    bw(-1, bG);
                                }
                            }
                            if (bI) {
                                bw(bF, bD, bI, bC);
                            }
                        };
                        if (!e.async || bA.readyState === 4) {
                            bv();
                        } else {
                            bz = ++x;
                            if (A) {
                                if (!N) {
                                    N = {};
                                    b(bd).unload(A);
                                }
                                N[bz] = bv;
                            }
                            bA.onreadystatechange = bv;
                        }
                    },
                    abort: function() {
                        if (bv) {
                            bv(0, 1);
                        }
                    }
                };
            }
        });
    }
    var Q = {},
        ba, m, aB = /^(?:toggle|show|hide)$/,
        aU = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
        a4, aI = [
            ["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"],
            ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"],
            ["opacity"]
        ],
        a5;
    b.fn.extend({
        show: function(bx, bA, bz) {
            var bw, by;
            if (bx || bx === 0) {
                return this.animate(a2("show", 3), bx, bA, bz);
            } else {
                for (var bv = 0, e = this.length; bv < e; bv++) {
                    bw = this[bv];
                    if (bw.style) {
                        by = bw.style.display;
                        if (!b._data(bw, "olddisplay") && by === "none") {
                            by = bw.style.display = "";
                        }
                        if ((by === "" && b.css(bw, "display") === "none") || !b.contains(bw.ownerDocument.documentElement, bw)) {
                            b._data(bw, "olddisplay", w(bw.nodeName));
                        }
                    }
                }
                for (bv = 0; bv < e; bv++) {
                    bw = this[bv];
                    if (bw.style) {
                        by = bw.style.display;
                        if (by === "" || by === "none") {
                            bw.style.display = b._data(bw, "olddisplay") || "";
                        }
                    }
                }
                return this;
            }
        },
        hide: function(bx, bA, bz) {
            if (bx || bx === 0) {
                return this.animate(a2("hide", 3), bx, bA, bz);
            } else {
                var bw, by, bv = 0,
                    e = this.length;
                for (; bv < e; bv++) {
                    bw = this[bv];
                    if (bw.style) {
                        by = b.css(bw, "display");
                        if (by !== "none" && !b._data(bw, "olddisplay")) {
                            b._data(bw, "olddisplay", by);
                        }
                    }
                }
                for (bv = 0; bv < e; bv++) {
                    if (this[bv].style) {
                        this[bv].style.display = "none";
                    }
                }
                return this;
            }
        },
        _toggle: b.fn.toggle,
        toggle: function(bw, bv, bx) {
            var e = typeof bw === "boolean";
            if (b.isFunction(bw) && b.isFunction(bv)) {
                this._toggle.apply(this, arguments);
            } else {
                if (bw == null || e) {
                    this.each(function() {
                        var by = e ? bw : b(this).is(":hidden");
                        b(this)[by ? "show" : "hide"]();
                    });
                } else {
                    this.animate(a2("toggle", 3), bw, bv, bx);
                }
            }
            return this;
        },
        fadeTo: function(e, bx, bw, bv) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({
                opacity: bx
            }, e, bw, bv);
        },
        animate: function(bz, bw, by, bx) {
            var e = b.speed(bw, by, bx);
            if (b.isEmptyObject(bz)) {
                return this.each(e.complete, [false]);
            }
            bz = b.extend({}, bz);

            function bv() {
                if (e.queue === false) {
                    b._mark(this);
                }
                var bE = b.extend({}, e),
                    bL = this.nodeType === 1,
                    bJ = bL && b(this).is(":hidden"),
                    bB, bG, bD, bK, bN, bF, bI, bC, bH, bM, bA;
                bE.animatedProperties = {};
                for (bD in bz) {
                    bB = b.camelCase(bD);
                    if (bD !== bB) {
                        bz[bB] = bz[bD];
                        delete bz[bD];
                    }
                    if ((bN = b.cssHooks[bB]) && "expand" in bN) {
                        bF = bN.expand(bz[bB]);
                        delete bz[bB];
                        for (bD in bF) {
                            if (!(bD in bz)) {
                                bz[bD] = bF[bD];
                            }
                        }
                    }
                }
                for (bB in bz) {
                    bG = bz[bB];
                    if (b.isArray(bG)) {
                        bE.animatedProperties[bB] = bG[1];
                        bG = bz[bB] = bG[0];
                    } else {
                        bE.animatedProperties[bB] = bE.specialEasing && bE.specialEasing[bB] || bE.easing || "swing";
                    }
                    if (bG === "hide" && bJ || bG === "show" && !bJ) {
                        return bE.complete.call(this);
                    }
                    if (bL && (bB === "height" || bB === "width")) {
                        bE.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY];
                        if (b.css(this, "display") === "inline" && b.css(this, "float") === "none") {
                            if (!b.support.inlineBlockNeedsLayout || w(this.nodeName) === "inline") {
                                this.style.display = "inline-block";
                            } else {
                                this.style.zoom = 1;
                            }
                        }
                    }
                }
                if (bE.overflow != null) {
                    this.style.overflow = "hidden";
                }
                for (bD in bz) {
                    bK = new b.fx(this, bE, bD);
                    bG = bz[bD];
                    if (aB.test(bG)) {
                        bA = b._data(this, "toggle" + bD) || (bG === "toggle" ? bJ ? "show" : "hide" : 0);
                        if (bA) {
                            b._data(this, "toggle" + bD, bA === "show" ? "hide" : "show");
                            bK[bA]();
                        } else {
                            bK[bG]();
                        }
                    } else {
                        bI = aU.exec(bG);
                        bC = bK.cur();
                        if (bI) {
                            bH = parseFloat(bI[2]);
                            bM = bI[3] || (b.cssNumber[bD] ? "" : "px");
                            if (bM !== "px") {
                                b.style(this, bD, (bH || 1) + bM);
                                bC = ((bH || 1) / bK.cur()) * bC;
                                b.style(this, bD, bC + bM);
                            }
                            if (bI[1]) {
                                bH = ((bI[1] === "-=" ? -1 : 1) * bH) + bC;
                            }
                            bK.custom(bC, bH, bM);
                        } else {
                            bK.custom(bC, bG, "");
                        }
                    }
                }
                return true;
            }
            return e.queue === false ? this.each(bv) : this.queue(e.queue, bv);
        },
        stop: function(bw, bv, e) {
            if (typeof bw !== "string") {
                e = bv;
                bv = bw;
                bw = L;
            }
            if (bv && bw !== false) {
                this.queue(bw || "fx", []);
            }
            return this.each(function() {
                var bx, by = false,
                    bA = b.timers,
                    bz = b._data(this);
                if (!e) {
                    b._unmark(true, this);
                }

                function bB(bE, bF, bD) {
                    var bC = bF[bD];
                    b.removeData(bE, bD, true);
                    bC.stop(e);
                }
                if (bw == null) {
                    for (bx in bz) {
                        if (bz[bx] && bz[bx].stop && bx.indexOf(".run") === bx.length - 4) {
                            bB(this, bz, bx);
                        }
                    }
                } else {
                    if (bz[bx = bw + ".run"] && bz[bx].stop) {
                        bB(this, bz, bx);
                    }
                }
                for (bx = bA.length; bx--;) {
                    if (bA[bx].elem === this && (bw == null || bA[bx].queue === bw)) {
                        if (e) {
                            bA[bx](true);
                        } else {
                            bA[bx].saveState();
                        }
                        by = true;
                        bA.splice(bx, 1);
                    }
                }
                if (!(e && by)) {
                    b.dequeue(this, bw);
                }
            });
        }
    });

    function bi() {
        setTimeout(at, 0);
        return (a5 = b.now());
    }

    function at() {
        a5 = L;
    }

    function a2(bv, e) {
        var bw = {};
        b.each(aI.concat.apply([], aI.slice(0, e)), function() {
            bw[this] = bv;
        });
        return bw;
    }
    b.each({
        slideDown: a2("show", 1),
        slideUp: a2("hide", 1),
        slideToggle: a2("toggle", 1),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(e, bv) {
        b.fn[e] = function(bw, by, bx) {
            return this.animate(bv, bw, by, bx);
        };
    });
    b.extend({
        speed: function(bw, bx, bv) {
            var e = bw && typeof bw === "object" ? b.extend({}, bw) : {
                complete: bv || !bv && bx || b.isFunction(bw) && bw,
                duration: bw,
                easing: bv && bx || bx && !b.isFunction(bx) && bx
            };
            e.duration = b.fx.off ? 0 : typeof e.duration === "number" ? e.duration : e.duration in b.fx.speeds ? b.fx.speeds[e.duration] : b.fx.speeds._default;
            if (e.queue == null || e.queue === true) {
                e.queue = "fx";
            }
            e.old = e.complete;
            e.complete = function(by) {
                if (b.isFunction(e.old)) {
                    e.old.call(this);
                }
                if (e.queue) {
                    b.dequeue(this, e.queue);
                } else {
                    if (by !== false) {
                        b._unmark(this);
                    }
                }
            };
            return e;
        },
        easing: {
            linear: function(e) {
                return e;
            },
            swing: function(e) {
                return (-Math.cos(e * Math.PI) / 2) + 0.5;
            }
        },
        timers: [],
        fx: function(bv, e, bw) {
            this.options = e;
            this.elem = bv;
            this.prop = bw;
            e.orig = e.orig || {};
        }
    });
    b.fx.prototype = {
        update: function() {
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }(b.fx.step[this.prop] || b.fx.step._default)(this);
        },
        cur: function() {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
                return this.elem[this.prop];
            }
            var e, bv = b.css(this.elem, this.prop);
            return isNaN(e = parseFloat(bv)) ? !bv || bv === "auto" ? 0 : bv : e;
        },
        custom: function(bz, by, bx) {
            var e = this,
                bw = b.fx;
            this.startTime = a5 || bi();
            this.end = by;
            this.now = this.start = bz;
            this.pos = this.state = 0;
            this.unit = bx || this.unit || (b.cssNumber[this.prop] ? "" : "px");

            function bv(bA) {
                return e.step(bA);
            }
            bv.queue = this.options.queue;
            bv.elem = this.elem;
            bv.saveState = function() {
                if (b._data(e.elem, "fxshow" + e.prop) === L) {
                    if (e.options.hide) {
                        b._data(e.elem, "fxshow" + e.prop, e.start);
                    } else {
                        if (e.options.show) {
                            b._data(e.elem, "fxshow" + e.prop, e.end);
                        }
                    }
                }
            };
            if (bv() && b.timers.push(bv) && !a4) {
                a4 = setInterval(bw.tick, bw.interval);
            }
        },
        show: function() {
            var e = b._data(this.elem, "fxshow" + this.prop);
            this.options.orig[this.prop] = e || b.style(this.elem, this.prop);
            this.options.show = true;
            if (e !== L) {
                this.custom(this.cur(), e);
            } else {
                this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
            }
            b(this.elem).show();
        },
        hide: function() {
            this.options.orig[this.prop] = b._data(this.elem, "fxshow" + this.prop) || b.style(this.elem, this.prop);
            this.options.hide = true;
            this.custom(this.cur(), 0);
        },
        step: function(by) {
            var bA, bB, bv, bx = a5 || bi(),
                e = true,
                bz = this.elem,
                bw = this.options;
            if (by || bx >= bw.duration + this.startTime) {
                this.now = this.end;
                this.pos = this.state = 1;
                this.update();
                bw.animatedProperties[this.prop] = true;
                for (bA in bw.animatedProperties) {
                    if (bw.animatedProperties[bA] !== true) {
                        e = false;
                    }
                }
                if (e) {
                    if (bw.overflow != null && !b.support.shrinkWrapBlocks) {
                        b.each(["", "X", "Y"], function(bC, bD) {
                            bz.style["overflow" + bD] = bw.overflow[bC];
                        });
                    }
                    if (bw.hide) {
                        b(bz).hide();
                    }
                    if (bw.hide || bw.show) {
                        for (bA in bw.animatedProperties) {
                            b.style(bz, bA, bw.orig[bA]);
                            b.removeData(bz, "fxshow" + bA, true);
                            b.removeData(bz, "toggle" + bA, true);
                        }
                    }
                    bv = bw.complete;
                    if (bv) {
                        bw.complete = false;
                        bv.call(bz);
                    }
                }
                return false;
            } else {
                if (bw.duration == Infinity) {
                    this.now = bx;
                } else {
                    bB = bx - this.startTime;
                    this.state = bB / bw.duration;
                    this.pos = b.easing[bw.animatedProperties[this.prop]](this.state, bB, 0, 1, bw.duration);
                    this.now = this.start + ((this.end - this.start) * this.pos);
                }
                this.update();
            }
            return true;
        }
    };
    b.extend(b.fx, {
        tick: function() {
            var bw, bv = b.timers,
                e = 0;
            for (; e < bv.length; e++) {
                bw = bv[e];
                if (!bw() && bv[e] === bw) {
                    bv.splice(e--, 1);
                }
            }
            if (!bv.length) {
                b.fx.stop();
            }
        },
        interval: 13,
        stop: function() {
            clearInterval(a4);
            a4 = null;
        },
        speeds: {
            slow: 600,
            fast: 200,
            _default: 400
        },
        step: {
            opacity: function(e) {
                b.style(e.elem, "opacity", e.now);
            },
            _default: function(e) {
                if (e.elem.style && e.elem.style[e.prop] != null) {
                    e.elem.style[e.prop] = e.now + e.unit;
                } else {
                    e.elem[e.prop] = e.now;
                }
            }
        }
    });
    b.each(aI.concat.apply([], aI), function(e, bv) {
        if (bv.indexOf("margin")) {
            b.fx.step[bv] = function(bw) {
                b.style(bw.elem, bv, Math.max(0, bw.now) + bw.unit);
            };
        }
    });
    if (b.expr && b.expr.filters) {
        b.expr.filters.animated = function(e) {
            return b.grep(b.timers, function(bv) {
                return e === bv.elem;
            }).length;
        };
    }

    function w(bx) {
        if (!Q[bx]) {
            var e = av.body,
                bv = b("<" + bx + ">").appendTo(e),
                bw = bv.css("display");
            bv.remove();
            if (bw === "none" || bw === "") {
                if (!ba) {
                    ba = av.createElement("iframe");
                    ba.frameBorder = ba.width = ba.height = 0;
                }
                e.appendChild(ba);
                if (!m || !ba.createElement) {
                    m = (ba.contentWindow || ba.contentDocument).document;
                    m.write((b.support.boxModel ? "<!doctype html>" : "") + "<html><body>");
                    m.close();
                }
                bv = m.createElement(bx);
                m.body.appendChild(bv);
                bw = b.css(bv, "display");
                e.removeChild(ba);
            }
            Q[bx] = bw;
        }
        return Q[bx];
    }
    var a8, V = /^t(?:able|d|h)$/i,
        ad = /^(?:body|html)$/i;
    if ("getBoundingClientRect" in av.documentElement) {
        a8 = function(by, bH, bw, bB) {
            try {
                bB = by.getBoundingClientRect();
            } catch (bF) {}
            if (!bB || !b.contains(bw, by)) {
                return bB ? {
                    top: bB.top,
                    left: bB.left
                } : {
                    top: 0,
                    left: 0
                };
            }
            var bC = bH.body,
                bD = aL(bH),
                bA = bw.clientTop || bC.clientTop || 0,
                bE = bw.clientLeft || bC.clientLeft || 0,
                bv = bD.pageYOffset || b.support.boxModel && bw.scrollTop || bC.scrollTop,
                bz = bD.pageXOffset || b.support.boxModel && bw.scrollLeft || bC.scrollLeft,
                bG = bB.top + bv - bA,
                bx = bB.left + bz - bE;
            return {
                top: bG,
                left: bx
            };
        };
    } else {
        a8 = function(bz, bE, bx) {
            var bC, bw = bz.offsetParent,
                bv = bz,
                bA = bE.body,
                bB = bE.defaultView,
                e = bB ? bB.getComputedStyle(bz, null) : bz.currentStyle,
                bD = bz.offsetTop,
                by = bz.offsetLeft;
            while ((bz = bz.parentNode) && bz !== bA && bz !== bx) {
                if (b.support.fixedPosition && e.position === "fixed") {
                    break;
                }
                bC = bB ? bB.getComputedStyle(bz, null) : bz.currentStyle;
                bD -= bz.scrollTop;
                by -= bz.scrollLeft;
                if (bz === bw) {
                    bD += bz.offsetTop;
                    by += bz.offsetLeft;
                    if (b.support.doesNotAddBorder && !(b.support.doesAddBorderForTableAndCells && V.test(bz.nodeName))) {
                        bD += parseFloat(bC.borderTopWidth) || 0;
                        by += parseFloat(bC.borderLeftWidth) || 0;
                    }
                    bv = bw;
                    bw = bz.offsetParent;
                }
                if (b.support.subtractsBorderForOverflowNotVisible && bC.overflow !== "visible") {
                    bD += parseFloat(bC.borderTopWidth) || 0;
                    by += parseFloat(bC.borderLeftWidth) || 0;
                }
                e = bC;
            }
            if (e.position === "relative" || e.position === "static") {
                bD += bA.offsetTop;
                by += bA.offsetLeft;
            }
            if (b.support.fixedPosition && e.position === "fixed") {
                bD += Math.max(bx.scrollTop, bA.scrollTop);
                by += Math.max(bx.scrollLeft, bA.scrollLeft);
            }
            return {
                top: bD,
                left: by
            };
        };
    }
    b.fn.offset = function(e) {
        if (arguments.length) {
            return e === L ? this : this.each(function(bx) {
                b.offset.setOffset(this, e, bx);
            });
        }
        var bv = this[0],
            bw = bv && bv.ownerDocument;
        if (!bw) {
            return null;
        }
        if (bv === bw.body) {
            return b.offset.bodyOffset(bv);
        }
        return a8(bv, bw, bw.documentElement);
    };
    b.offset = {
        bodyOffset: function(e) {
            var bw = e.offsetTop,
                bv = e.offsetLeft;
            if (b.support.doesNotIncludeMarginInBodyOffset) {
                bw += parseFloat(b.css(e, "marginTop")) || 0;
                bv += parseFloat(b.css(e, "marginLeft")) || 0;
            }
            return {
                top: bw,
                left: bv
            };
        },
        setOffset: function(bx, bG, bA) {
            var bB = b.css(bx, "position");
            if (bB === "static") {
                bx.style.position = "relative";
            }
            var bz = b(bx),
                bv = bz.offset(),
                e = b.css(bx, "top"),
                bE = b.css(bx, "left"),
                bF = (bB === "absolute" || bB === "fixed") && b.inArray("auto", [e, bE]) > -1,
                bD = {},
                bC = {},
                bw, by;
            if (bF) {
                bC = bz.position();
                bw = bC.top;
                by = bC.left;
            } else {
                bw = parseFloat(e) || 0;
                by = parseFloat(bE) || 0;
            }
            if (b.isFunction(bG)) {
                bG = bG.call(bx, bA, bv);
            }
            if (bG.top != null) {
                bD.top = (bG.top - bv.top) + bw;
            }
            if (bG.left != null) {
                bD.left = (bG.left - bv.left) + by;
            }
            if ("using" in bG) {
                bG.using.call(bx, bD);
            } else {
                bz.css(bD);
            }
        }
    };
    b.fn.extend({
        position: function() {
            if (!this[0]) {
                return null;
            }
            var bw = this[0],
                bv = this.offsetParent(),
                bx = this.offset(),
                e = ad.test(bv[0].nodeName) ? {
                    top: 0,
                    left: 0
                } : bv.offset();
            bx.top -= parseFloat(b.css(bw, "marginTop")) || 0;
            bx.left -= parseFloat(b.css(bw, "marginLeft")) || 0;
            e.top += parseFloat(b.css(bv[0], "borderTopWidth")) || 0;
            e.left += parseFloat(b.css(bv[0], "borderLeftWidth")) || 0;
            return {
                top: bx.top - e.top,
                left: bx.left - e.left
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var e = this.offsetParent || av.body;
                while (e && (!ad.test(e.nodeName) && b.css(e, "position") === "static")) {
                    e = e.offsetParent;
                }
                return e;
            });
        }
    });
    b.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(bw, bv) {
        var e = /Y/.test(bv);
        b.fn[bw] = function(bx) {
            return b.access(this, function(by, bB, bA) {
                var bz = aL(by);
                if (bA === L) {
                    return bz ? (bv in bz) ? bz[bv] : b.support.boxModel && bz.document.documentElement[bB] || bz.document.body[bB] : by[bB];
                }
                if (bz) {
                    bz.scrollTo(!e ? bA : b(bz).scrollLeft(), e ? bA : b(bz).scrollTop());
                } else {
                    by[bB] = bA;
                }
            }, bw, bx, arguments.length, null);
        };
    });

    function aL(e) {
        return b.isWindow(e) ? e : e.nodeType === 9 ? e.defaultView || e.parentWindow : false;
    }
    b.each({
        Height: "height",
        Width: "width"
    }, function(bw, bx) {
        var bv = "client" + bw,
            e = "scroll" + bw,
            by = "offset" + bw;
        b.fn["inner" + bw] = function() {
            var bz = this[0];
            return bz ? bz.style ? parseFloat(b.css(bz, bx, "padding")) : this[bx]() : null;
        };
        b.fn["outer" + bw] = function(bA) {
            var bz = this[0];
            return bz ? bz.style ? parseFloat(b.css(bz, bx, bA ? "margin" : "border")) : this[bx]() : null;
        };
        b.fn[bx] = function(bz) {
            return b.access(this, function(bC, bB, bD) {
                var bF, bE, bG, bA;
                if (b.isWindow(bC)) {
                    bF = bC.document;
                    bE = bF.documentElement[bv];
                    return b.support.boxModel && bE || bF.body && bF.body[bv] || bE;
                }
                if (bC.nodeType === 9) {
                    bF = bC.documentElement;
                    if (bF[bv] >= bF[e]) {
                        return bF[bv];
                    }
                    return Math.max(bC.body[e], bF[e], bC.body[by], bF[by]);
                }
                if (bD === L) {
                    bG = b.css(bC, bB);
                    bA = parseFloat(bG);
                    return b.isNumeric(bA) ? bA : bG;
                }
                b(bC).css(bB, bD);
            }, bx, bz, arguments.length, null);
        };
    });
    bd.jQuery = bd.$ = b;
    if (typeof define === "function" && define.amd && define.amd.jQuery) {
        define("jquery", [], function() {
            return b;
        });
    }
})(window);
var MC_LOCAL_STORE = {
    test: function() {
        var a = "mc_test";
        return (MC_LOCAL_STORE.save(a, a) == a);
    },
    save: function(a, b) {
        if (window.localStorage) {
            window.localStorage.setItem(a, b);
        } else {
            MetaC.Cookie.save(a, b, 8760);
        }
        return MC_LOCAL_STORE.get(a);
    },
    get: function(a) {
        if (window.localStorage) {
            return window.localStorage.getItem(a);
        } else {
            return MetaC.Cookie.get(a);
        }
    },
    remove: function(a) {
        if (window.localStorage) {
            window.localStorage.removeItem(a);
        } else {
            MetaC.Cookie.remove(a);
        }
    },
    asBool: function(a) {
        return typeof a == "string" ? (a == "true" || a == "1") : a;
    },
    saveBoolTimestamp: function(b, a) {
        var c = new Date().getTime() + "_" + a;
        MC_LOCAL_STORE.save(b, c);
    },
    getBoolTimestamp: function(b, c) {
        c = c ? c : 31536000000;
        var a = null;
        var f = MC_LOCAL_STORE.get(b);
        if (f != null) {
            var e = f.split("_");
            if (e.length > 1) {
                var d = e[0];
                d = parseInt(d, 10);
                if (!isNaN(d)) {
                    if (c) {
                        if (new Date().getTime() - d < c) {
                            var g = e[1];
                            return MC_LOCAL_STORE.asBool(g);
                        }
                    }
                }
            }
        }
        return a;
    }
};
var MetaC = {
    adsDisplayed: false,
    _utagAutoPlay: -1,
    getTrackProductType: function(b) {
        var a = b;
        if (a == "tv") {
            a = "tvshow";
        } else {
            if (a == "music") {
                a = "album";
            }
        }
        return a;
    },
    getSecureUrl: function(d) {
        var e = document.domain;
        if (e.match(/metacritic.com$/) == null) {
            return d;
        }
        var a = e.split(".");
        var c = "http";
        var b = "";
        if (a.length > 0) {
            if (a[0] != "secure") {
                if (a[0] == "www") {
                    a[0] = "secure";
                } else {
                    if ((a[0].indexOf("app") == 0 && a[1] == "web") || (a[0].indexOf("alb-qa") == 0)) {
                        a.unshift("secure");
                    }
                }
            }
            if (a[0] == "secure") {
                c = "https";
            }
            e = a.join(".");
            if (!(window.location.port == "443" || window.location.port == "80" || window.location.port == "")) {
                b = ":" + window.location.port;
            }
        }
        return c + "://" + e + b + d;
    },
    goSecure: function(a) {
        window.location.href = MetaC.getSecureUrl(a);
    },
    sLogin: function() {
        MetaC.goSecure("/login");
    },
    sSignup: function() {
        MetaC.goSecure("/signup");
    },
    sSignupFB: function() {
        MetaC.goSecure("/signupfb");
    },
    sForgotPwd: function() {
        MetaC.goSecure("/forgot-password");
    },
    getOffsetPlus: function(a, d, b) {
        if (typeof a === "string") {
            a = $(a);
        }
        var c = a.offset();
        if (c) {
            if (b) {
                c.left += b;
            }
            if (d) {
                c.top += d;
            }
        }
        return c;
    },
    checkOmniEvents: function() {
        var c = MetaC.Cookie.get("omniEvents");
        if (c != null) {
            if (window.om != undefined) {
                for (var a in c) {
                    if (c.hasOwnProperty(a)) {
                        var b = c[a];
                        if (b > 0) {
                            if (a == "trackLogin") {
                                if (om.trackLogin) {
                                    om.trackLogin({
                                        id: MetaC.Cookie.get("REMOTE_USER")
                                    });
                                }
                            } else {
                                if (a == "trackReviewAdd") {
                                    if (om.trackReviewAdd) {
                                        om.trackReviewAdd({
                                            rating: b
                                        });
                                    }
                                } else {
                                    if (a == "trackRatingsAdd") {
                                        if (om.trackRatingsAdd) {
                                            om.trackRatingsAdd({
                                                rating: b
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                MetaC.Cookie.remove("omniEvents", ".metacritic.com");
                MetaC.Cookie.remove("omniEvents");
            }
        }
    },
    setOmniEvent: function(a, b) {
        MetaC.Cookie.save("omniEvents[" + a + "]", b, 1, null, ".metacritic.com");
    },
    showtimeEvent: function(b, c, a) {
        if (window.om != undefined) {
            if (window.om.trackShowtimeSearchClick != undefined) {
                if (b) {
                    om.trackShowtimeSearchClick({
                        zipcode: b
                    });
                } else {
                    om.trackShowtimeSearchClick({
                        latlong: c + ";" + a
                    });
                }
            }
        }
    },
    fixToElem: function(f, c) {
        var e = $(f);
        var a = $(c);
        var d = e.css("top");
        var b = parseInt(d, 10);
        $(window).on("scroll", function() {
            var g = e.height();
            var l = e.offset().top;
            var h = a.height();
            var j = a.offset().top;
            if (h > g) {
                var k = (l + g) - (j + h);
                if (k > 0) {
                    var i = j + h - g;
                    e.css("top", (i - $(document).scrollTop()) + "px");
                } else {
                    if (l < j) {
                        e.css("top", j - $(document).scrollTop());
                    }
                }
            }
        });
    },
    innerLabelIf: function(a) {
        var c = a.closest(".field");
        var b = $("label", c);
        var d = $.trim(a.val());
        if (d.length == 0) {
            b.show();
        } else {
            b.hide();
        }
    },
    dateStrToDate: function(a) {
        var b = false;
        var c = a.split(" ").join(":").split("-").join(":").split(":");
        if (c.length == 6) {
            b = new Date(c[0], c[1] - 1, c[2], c[3], c[4], c[5]);
        }
        return b;
    },
    displayAds: function() {
        if (MetaC.adsDisplayed) {
            return;
        }
        MetaC.adsDisplayed = true;
        MetaC._pushAdsWithLightSpeed(window.metac_ads_pushdisplay, googletag.pubads().getSlots());
    },
    _pushAdsWithLightSpeed: function(b, c) {
        if (b) {
            if (typeof index_headertag_lightspeed !== "undefined") {
                var a = function() {
                    index_headertag_lightspeed.set_slot_targeting(c);
                    MetaC._pushGoogleDisplay(b);
                };
                index_headertag_lightspeed.add_session_end_hook(a, true);
                index_headertag_lightspeed.refresh();
            } else {
                MetaC._pushGoogleDisplay(b);
            }
        }
    },
    _pushGoogleDisplay: function(a) {
        $.each(a, function(b, c) {
            googletag.cmd.push(function() {
                googletag.display(c);
            });
        });
    },
    _refreshWithLightSpeed: function(b) {
        if (b) {
            var c = [];
            $.each(b, function(d, e) {
                if (e.hasOwnProperty("varname")) {
                    c.push(window[e.varname]);
                } else {
                    c.push(e);
                }
            });
            if (typeof index_headertag_lightspeed !== "undefined") {
                var a = function() {
                    index_headertag_lightspeed.set_slot_targeting(c);
                    MetaC._pushGoogleRefresh(c);
                };
                index_headertag_lightspeed.add_session_end_hook(a, true);
                index_headertag_lightspeed.refresh();
            } else {
                MetaC._pushGoogleRefresh(c);
            }
        }
    },
    _pushGoogleRefresh: function(b) {
        var a = b;
        googletag.cmd.push(function() {
            googletag.pubads().refresh(a);
        });
    },
    getUrlParam: function(a) {
        var b = new RegExp("[?&]" + a + "=([^&#]*)").exec(window.location.href);
        if (b == null) {
            return null;
        } else {
            return b[1] || 0;
        }
    },
    isEDT: function(b) {
        var a = new Date(b.getFullYear(), 2, 1);
        a = Date.UTC(a.getUTCFullYear(), 2, 14 - (a.getUTCDay() + 13) % 7, 5);
        var c = new Date(b.getFullYear(), 10, 1);
        c = Date.UTC(c.getUTCFullYear(), 10, 7 - (c.getUTCDay() + 6) % 7, 4);
        return b.getTime() >= a && b.getTime() < c;
    },
    handleGooglePageView: function() {
        var c = 0;
        var a = MetaC.Cookie.get("metapv");
        if (a) {
            a = parseInt(a, 10);
            if (!isNaN(a)) {
                c = a;
            }
        }
        c++;
        var b = new Date();
        var d = MetaC.isEDT(b) ? 4 : 5;
        var e = Date.UTC(b.getUTCFullYear(), b.getUTCMonth(), b.getUTCDate(), d);
        if (e <= b.getTime()) {
            e = Date.UTC(b.getUTCFullYear(), b.getUTCMonth(), b.getUTCDate(), d + 24);
        }
        MetaC.Cookie.save("metapv", c, new Date(e));
        return c;
    },
    adSession: function() {
        if (MetaC._session == null) {
            MetaC.processSession();
        }
        return MetaC._session;
    },
    adSubses: function() {
        if (MetaC._subses == null) {
            MetaC.processSession();
        }
        return MetaC._subses;
    },
    processSession: function() {
        var a = MetaC.Cookie.get("mc_s_s");
        if (a) {
            var b = a.split("_");
            if (b.length == 2) {
                MetaC._session = b[0];
                MetaC._subses = b[1];
            }
        }
        if (MetaC._session == null) {
            var c = ["a", "b", "c", "d"];
            var e = MetaC.rndInt(0, 3);
            MetaC._session = c[e];
        }
        if (MetaC._subses == null) {
            MetaC._subses = MetaC.rndInt(1, 4) + "";
            a = MetaC._session + "_" + MetaC._subses;
            MetaC.Cookie.save("mc_s_s", a);
        }
        var f = MetaC.getUrlParam("adSession");
        if (f) {
            MetaC._session = f;
        }
        var d = MetaC.getUrlParam("adSubses");
        if (d) {
            MetaC._subses = d;
        }
    },
    rndInt: function(b, a) {
        return Math.floor(Math.random() * (a - b + 1)) + b;
    }
};
MetaC.clickEventName = "click";
if (navigator.userAgent.match(/iPad/i) != null) {
    MetaC.clickEventName = "touchstart";
    MetaC.isIPad = true;
}

function ajax_busy(f, b) {
    if ($("#ajax_bizzy_icon").length == 0) {
        var d = Math.floor($(window).scrollLeft() + $(window).width() / 2);
        var c = Math.floor($(window).scrollTop() + $(window).height() / 2);
        if (typeof f == "object") {
            if (f.left) {
                d = f.left;
            }
            if (f.top) {
                c = f.top;
            }
            if (typeof f.pageX != "undefined" && f.pageX != 0) {
                d = f.pageX;
            }
            if (typeof f.pageY != "undefined" && f.pageY != 0) {
                c = f.pageY;
            }
        }
        var a = "z-index:5011000;position:absolute;";
        a += "left:" + d + "px;";
        a += "top:" + c + "px;";
        if (b) {
            a += "width:20px;";
        }
        $("body").append('<img id="ajax_bizzy_icon" style="' + a + '" src="http://static.metacritic.com/images/icons/ajax_busy.gif"/>');
    }
}

function ajax_done() {
    $("#ajax_bizzy_icon").remove();
}
MetaC.URS = {
    _urs: null,
    appId: null,
    dev: false,
    config: function(b, a) {
        MetaC.URS.appId = b;
        MetaC.URS.dev = a;
    },
    init: function() {
        if (MetaC.URS._urs == null && MetaC.URS.appId && window.URS) {
            MetaC.URS._urs = URS.newInstance({
                appId: MetaC.URS.appId,
                version: "v2.2",
                clientToken: "434d677bcb494edb",
                environment: (MetaC.URS.dev) ? URS.ursEnvironments.QA : URS.ursEnvironments.LIVE
            });
            MetaC.URS._urs.common.addEventListener(URS.events.AUTH_SUCCESS, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED_NO_LINK, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED_NO_SUCH_USER, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED_INVALID_USER, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.HANDSHAKE_FAILURE, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.GENERAL_SERVER_ERROR, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED_MISSING_REQUIRED_FIELDS, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.EXPIRED_ACCESS_TOKEN, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.USERNAME_CHECK_TAKEN, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.USERNAME_CHECK_ERROR, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.EMAIL_CHECK_TAKEN, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.INVALID_SESSION_DETECTED, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.LINK_SUCCESS, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.LINK_FAILED, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.LINK_ERROR, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.UNLINK_SUCCESS, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.UNLINK_FAILED, MetaC.URS.responseHandler);
            MetaC.URS._urs.common.addEventListener(URS.events.UNLINK_ERROR, MetaC.URS.responseHandler);
        }
    },
    responseHandler: function(c, b) {
        var a = c.type;
        if (b.hasErrors()) {
            if (MetaC.URS.dev && window.console && window.console.log) {
                var d = b.getErrors();
                $.each(d, function(e, f) {
                    console.log(a + " : " + f.getApplicationCode() + " : " + f.getMessage());
                });
            }
        }
        $("body").trigger("MetaC_URS_EVENT", [a, b]);
    },
    getFirstErrorCode: function(b) {
        if (b) {
            if (b.hasErrors()) {
                var c = b.getErrors();
                if (c) {
                    var a = c[0];
                    if (a) {
                        return a.getApplicationCode();
                    }
                }
            }
        }
        return null;
    },
    getFirstErrorMsg: function(b) {
        if (b) {
            if (b.hasErrors()) {
                var c = b.getErrors();
                if (c) {
                    var a = c[0];
                    if (a) {
                        return a.getMessage();
                    }
                }
            }
        }
        return null;
    },
    authFB: function(a) {
        MetaC.URS.init();
        if (MetaC.URS._urs) {
            if (a) {
                var d = a;
                var c = function(g, f) {
                    var e = g.type;
                    d(e, f);
                    MetaC.URS._urs.common.removeEventListener(URS.events.AUTH_SUCCESS, b);
                    MetaC.URS._urs.common.removeEventListener(URS.events.AUTH_FAILED, b);
                    MetaC.URS._urs.common.removeEventListener(URS.events.AUTH_FAILED_NO_LINK, b);
                    MetaC.URS._urs.common.removeEventListener(URS.events.AUTH_FAILED_NO_SUCH_USER, b);
                    MetaC.URS._urs.common.removeEventListener(URS.events.AUTH_FAILED_INVALID_USER, b);
                    MetaC.URS._urs.common.removeEventListener(URS.events.AUTH_FAILED_MISSING_REQUIRED_FIELDS, b);
                };
                var b = c;
                MetaC.URS._urs.common.addEventListener(URS.events.AUTH_SUCCESS, c);
                MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED, c);
                MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED_NO_LINK, c);
                MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED_NO_SUCH_USER, c);
                MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED_INVALID_USER, c);
                MetaC.URS._urs.common.addEventListener(URS.events.AUTH_FAILED_MISSING_REQUIRED_FIELDS, c);
                MetaC.URS._urs.social.authenticate(URS.social.sites.FACEBOOK);
            } else {
                MetaC.URS._urs.social.authenticate(URS.social.sites.FACEBOOK);
            }
            return true;
        }
        return false;
    },
    newFBUser: function(b, d, a) {
        MetaC.URS.init();
        if (MetaC.URS._urs) {
            var c = {
                userName: b
            };
            if (d) {
                c.option = "e631:INTERNAL_NEWSLETTER";
            }
            if (a) {
                c.email = a;
            }
            MetaC.URS._urs.social.authenticate(URS.social.sites.FACEBOOK, true, c);
            return true;
        }
        return false;
    },
    linkFB: function() {
        MetaC.URS.init();
        if (MetaC.URS._urs) {
            MetaC.URS._urs.social.link(URS.social.sites.FACEBOOK);
            return true;
        }
        return false;
    },
    unlinkFB: function() {
        MetaC.URS.init();
        if (MetaC.URS._urs) {
            MetaC.URS._urs.social.unlink(URS.social.sites.FACEBOOK);
            return true;
        }
        return false;
    },
    logoutFB: function() {
        MetaC.URS.init();
        if (MetaC.URS._urs) {
            MetaC.URS._urs.social.logout(URS.social.sites.FACEBOOK);
            return true;
        }
        return false;
    }
};
MetaC.Cookie = {
    save: function(d, f, b, g, e) {
        g = g ? g : "/";
        var a = "";
        var h = "";
        if (b) {
            if (b.toUTCString) {
                c = b;
            } else {
                var c = new Date();
                c.setTime(c.getTime() + (b * 60 * 60 * 1000));
            }
            a = "; expires=" + c.toUTCString();
        }
        if (e) {
            h = ";domain=" + e;
        }
        document.cookie = d + "=" + f + a + h + "; path=" + g;
    },
    get: function(a) {
        var d = a + "=";
        var j = a + "[";
        var e = document.cookie.split(";");
        var k = null;
        for (var f = 0; f < e.length; f++) {
            var g = e[f];
            while (g.charAt(0) == " ") {
                g = g.substring(1, g.length);
            }
            if (g.indexOf(d) == 0) {
                return g.substring(d.length, g.length);
            } else {
                if (g.indexOf(j) == 0) {
                    var b = g.indexOf("]=");
                    var h = g.substring(j.length, b);
                    if (k == null) {
                        k = {};
                    }
                    k[h] = g.substring(b + 2, g.length);
                }
            }
        }
        return k;
    },
    remove: function(a, c) {
        var b = MetaC.Cookie.get(a);
        if ((!!b) && (b.constructor === Object)) {
            for (var d in b) {
                MetaC.Cookie.save(a + "[" + d + "]", "999", -1, null, c);
            }
        } else {
            MetaC.Cookie.save(a, "", -1, null, c);
        }
    },
    ilParse: function(a) {
        a = a.replace(/\+/g, "%20");
        a = decodeURIComponent(a);
        return JSON.parse(a);
    }
};
MetaC.FB = {
    initialized: function() {
        FB.Event.subscribe("edge.create", function(a, b) {
            if (window.om != undefined && om.trackSocialClick) {
                om.trackSocialClick({
                    id: "1"
                });
            }
        });
        $("body").trigger("MetaC_fbinit");
        $(document).on("click", ".sharing-facebook", function(b) {
            var a = $(this);
            FB.ui({
                method: "share_open_graph",
                action_type: "og.likes",
                action_properties: JSON.stringify({
                    object: a.data("mcSocialUrl")
                })
            }, function(c) {
                if (window.om != undefined && om.trackSocialClick) {
                    om.trackSocialClick({
                        id: "1"
                    });
                }
            });
        });
    },
    login: function(b) {
        var a = b;
        FB.login(function(c) {
            var d = false;
            if (c.authResponse) {
                d = true;
            } else {}
            if (a) {
                a(d);
            }
        }, {
            scope: "email"
        });
    },
    isLoggedIn: function(b) {
        var a = b;
        FB.getLoginStatus(function(c) {
            var d = (c.status === "connected");
            if (a) {
                b(d);
            }
        });
    },
    logout: function(b) {
        var a = b;
        FB.getLoginStatus(function(c) {
            if (c.status === "connected") {
                FB.logout(function(d) {
                    if (a) {
                        a();
                    }
                });
            } else {
                if (a) {
                    a();
                }
            }
        });
        return true;
    },
    hasPerm: function(b, c) {
        var a = c;
        FB.api("/me/permissions", function(e) {
            var d = false;
            if (e.data && e.data.length > 0) {
                var f = e.data[0];
                d = (f[b] == 1);
            }
            if (a) {
                a(d);
            }
        });
    }
};
MetaC.Twitter = {
    initialized: function() {
        twttr.events.bind("tweet", function(a) {
            if (window.om != undefined && om.trackSocialClick) {
                om.trackSocialClick({
                    id: "8"
                });
            }
        });
        $("body").trigger("MetaC_twttrinit");
    }
};
MetaC.Progress = {
    show: function(a) {
        a = MetaC.Progress.findProg(a);
        if (a && a.children) {
            a.children(".fa-spinner").addClass("fa-spin");
            a.css("visibility", "visible");
        }
    },
    hide: function(a) {
        a = MetaC.Progress.findProg(a);
        if (a && a.children) {
            a.children(".fa-spinner").removeClass("fa-spin");
            a.css("visibility", "hidden");
        }
    },
    findProg: function(a) {
        if (a) {
            if (!a.hasClass("progress")) {
                a = a.find(".progress");
            }
        }
        return a;
    }
};
MetaC.Select = {
    optionEventName: MetaC.clickEventName + ".mcsoption",
    keyEventName: "keydown.mcskey",
    init: function() {
        var b = MetaC.Select;
        var a = $(".styled_select");
        a.on(MetaC.clickEventName, function(d) {
            var e = $(this);
            if (e.hasClass("opened")) {
                MetaC.Select.close(e);
            } else {
                var c = a.filter(".opened").not(this);
                c.each(function(f) {
                    MetaC.Select.close($(this));
                });
                MetaC.Select.open(e);
            }
            return false;
        });
        b.closeAll = function() {
            a.each(function(c) {
                MetaC.Select.close($(this));
            });
        };
        a.each(function(c) {
            var d = $(this);
            d.find(".option").on(MetaC.Select.optionEventName, function(e) {
                if (d.hasClass("opened")) {
                    MetaC.Select.select($(this));
                    e.stopPropagation();
                    return false;
                }
            });
        });
    },
    open: function(a) {
        var b = a.find(".option.selected");
        a.data("mcqwval", b.data("mcqwval"));
        $(window).one(MetaC.Select.optionEventName, function() {
            MetaC.Select.close(a);
        }).on(MetaC.Select.keyEventName, function(g) {
            var c = MetaC.Select;
            var e = a.find(".option.selected");
            var d = a.find(".option");
            var f = g.which || g.keyCode || g.charCode;
            var h = null;
            if (f == 27 || f == 9) {
                return c.close(a);
            } else {
                if (f == 13 || f == 32) {
                    return c.select(e);
                } else {
                    if (f == 35) {
                        h = d.last();
                    } else {
                        if (f == 36) {
                            h = d.first();
                        } else {
                            if (f == 38) {
                                h = e.prev();
                            } else {
                                if (f == 40) {
                                    h = e.next();
                                }
                            }
                        }
                    }
                }
            }
            if (h) {
                if (h.length > 0) {
                    d.removeClass("selected");
                    h.addClass("selected");
                    a.find(".options_scroll").scrollTop(h.position().top - h.height());
                }
                return false;
            }
        });
        a.addClass("opened");
    },
    close: function(a) {
        $(window).off(MetaC.Select.optionEventName).off(MetaC.Select.keyEventName);
        a.removeClass("opened");
    },
    select: function(c) {
        var a = c.parents(".styled_select");
        var b = a.find(".option");
        var d = a.data("mcqwval");
        var e = c.data("mcqwval");
        if (d != e) {
            b.removeClass("selected");
            c.addClass("selected");
            a.trigger("change");
        }
        MetaC.Select.close(a);
        return false;
    },
    getSelectedValue: function(b) {
        var a = b.find(".option.selected");
        return a.data("mcqwval");
    }
};
MetaC.Select2 = {
    optionEventName: MetaC.clickEventName + ".mcsoption2",
    keyEventName: "keydown.mcskey2",
    mainClass: ".styled_select2",
    init: function() {
        var a = MetaC.Select2;
        var b = $(a.mainClass);
        a.fixWidth = function(c) {
            var e = c.find(".topper");
            var d = c.find(".options_scroll");
            e.width(d.width());
            d.css("position", "absolute");
        };
        b.each(function(d) {
            var c = $(this);
            a.fixWidth(c);
        });
        a.close = function(c) {
            $(window).off(a.optionEventName).off(a.keyEventName);
            c.removeClass("expanded");
        };
        a.closeAll = function() {
            b.each(function(c) {
                a.close($(this));
            });
        };
        b.on(MetaC.clickEventName, ".topper", function(c) {
            var e = $(this);
            var d = e.closest(a.mainClass);
            d.toggleClass("expanded");
            if (d.hasClass("expanded")) {
                c.stopPropagation();
                $(window).one(a.optionEventName, function() {
                    a.closeAll();
                }).on(a.keyEventName, function(i) {
                    var g = d.find(".option.selected");
                    var f = d.find(".options").children(".option");
                    var h = i.which || i.keyCode || i.charCode;
                    var j = null;
                    if (h == 27 || h == 9) {
                        return a.close(d);
                    } else {
                        if (h == 13 || h == 32) {
                            g.trigger(MetaC.clickEventName);
                            return false;
                        } else {
                            if (h == 35) {
                                j = f.last();
                            } else {
                                if (h == 36) {
                                    j = f.first();
                                } else {
                                    if (h == 38) {
                                        j = g.prev();
                                    } else {
                                        if (h == 40) {
                                            j = g.next();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (j) {
                        if (j.length > 0) {
                            f.removeClass("selected");
                            j.addClass("selected");
                            d.find(".options_scroll").scrollTop(j.position().top - j.height());
                        }
                        return false;
                    }
                });
            }
        });
        b.on(MetaC.clickEventName, ".option", function(e) {
            var d = $(this);
            var f = d.closest(a.mainClass);
            var c = f.find(".options").children(".option");
            c.removeClass("selected");
            d.addClass("selected");
            f.find(".disp_selected .text").text(d.find(".option_text").text());
            f.trigger("change");
            a.close(f);
        });
    }
};
MetaC.Video = {
    holderId: "video_holder",
    mainWrapperClass: ".video_wrapper",
    videoWrapperId: "video_holder_wrapper",
    holderObj: null,
    videoWrapperObj: null,
    mainWrapperObj: null,
    created: false,
    cbsiVideoManager: null,
    cbsiVideoPlayer: null,
    lastUrl: null,
    lastTitle: null,
    playlist: null,
    videoStartCB: null,
    holdAutoplay: false,
    sessionOptions: {
        partner: "metacritic",
        usesIMA: true,
        uvpc: "/js/video/metacritic.xml",
        skin: true,
        autoPlay: true
    },
    doneOnce: false,
    init: function() {
        if (!window.uvpjs) {
            return;
        }
        var a = MetaC.Video;
        a.holderObj = $("#" + a.holderId);
        a.videoWrapperObj = $("#" + a.videoWrapperId);
        a.mainWrapperObj = $(a.mainWrapperClass);
        if (a.holderObj.length == 0) {
            return;
        }
        a.autoPlayToggle = a.videoWrapperObj.siblings(".autoplay");
        var c = MC_LOCAL_STORE.getBoolTimestamp("mc_autoplay");
        if (c != null) {
            var b = c;
            if (b) {
                a.autoPlayToggle.addClass("on");
            } else {
                a.autoPlayToggle.removeClass("on");
            }
        }
        if (window.I11C && window.I11C.Morph == 1) {
            a.autoPlayToggle.removeClass("on");
        }
        a.autoPlayToggle.on(MetaC.clickEventName, function() {
            var d = $(this);
            d.toggleClass("on");
            MC_LOCAL_STORE.saveBoolTimestamp("mc_autoplay", d.hasClass("on"));
            if (d.hasClass("on")) {
                a.videoWrapperObj.click();
            } else {
                a.pauseIt();
            }
        });
        a.cbsiVideoManager = new uvpjs.VideoManager();
        if (!uvpjs.mediaCapabilities.isMobile()) {
            a.videoWrapperObj.on(MetaC.clickEventName + ".metacvideo", function() {
                if (!a.videoWrapperObj.hasClass("playing")) {
                    a.playIt();
                }
            });
        } else {
            a.autoPlayToggle.removeClass("on");
            a.videoWrapperObj.find(".play_button").hide();
        }
        if (a.videoWrapperObj.data("mctrailerimg")) {
            a.sessionOptions.previewImage = a.videoWrapperObj.data("mctrailerimg");
        }
        a.cbsiVideoManager.initialize(a.sessionOptions, a.onVideoManagerReady, a.onVideoManagerError);
        a.ageGate = a.mainWrapperObj.find(".agegate");
        a.ageGate.on(MetaC.clickEventName, ".ag_button", function() {
            var h = 17;
            if (a.videoWrapperObj.data("mcrating") == "13") {
                h = 13;
            }
            var d = Number(a.ageGate.find(".year").val()) + h;
            var e = new Date(d, a.ageGate.find(".month").val() - 1, a.ageGate.find(".day").val());
            if (e.getTime() > new Date().getTime()) {
                a.ageGate.find(".msg").show();
            } else {
                MetaC.Cookie.save("mc_ag", "1");
                a.ageGate.removeClass("warning");
                var g = a.videoWrapperObj.data("mcvideourl");
                var f = a.videoWrapperObj.data("mcvideotitle");
                MetaC.Video.playUrl(g, f);
            }
        });
        a.floatBar = a.mainWrapperObj.find(".video_holder_float_bar");
        if (a.floatBar.length > 0) {
            a.doneFloating = false;
            a.lastFloatTop = null;
            a.lastFloatLeft = null;
            $("a.toggle_expand_collapse").click(function(d) {
                $(window).scroll();
            });
            a.floatBar.find(".video_holder_close").one("click.floatingPlayer", function() {
                a.pauseIt();
                a.doneFloating = true;
                a.videoWrapperObj.removeClass("floating");
                $(window).off("scroll.floatingPlayer");
                if (window.makeUndraggable) {
                    makeUndraggable(".video_holder_float_bar", "#video_holder_wrapper");
                }
                a.videoWrapperObj.css("top", "auto");
                a.videoWrapperObj.css("left", "auto");
            });
            $(window).on("scroll.floatingPlayer", function(h) {
                if (!a.doneFloating) {
                    var f = $(window).scrollTop();
                    var d = a.mainWrapperObj.offset().top + a.mainWrapperObj.height();
                    var g = (d <= f);
                    if (g) {
                        if (a.videoWrapperObj.hasClass("playing") && !a.videoWrapperObj.hasClass("floating")) {
                            a.videoWrapperObj.addClass("floating");
                            if (window.makeDraggable) {
                                makeDraggable(".video_holder_float_bar", "#video_holder_wrapper");
                            }
                            if (a.lastFloatTop) {
                                a.videoWrapperObj.css("top", a.lastFloatTop);
                            }
                            if (a.lastFloatLeft) {
                                a.videoWrapperObj.css("left", a.lastFloatLeft);
                            }
                        }
                    } else {
                        if (a.videoWrapperObj.hasClass("floating")) {
                            a.lastFloatTop = a.videoWrapperObj.css("top");
                            a.lastFloatLeft = a.videoWrapperObj.css("left");
                            if (a.lastFloatTop > 0 && a.lastFloatTop == "-") {
                                a.lastFloatTop = "1px";
                            }
                            if (a.lastFloatLeft > 0 && a.lastFloatLeft == "-") {
                                a.lastFloatLeft = "1px";
                            }
                            if (window.makeUndraggable) {
                                makeUndraggable(".video_holder_float_bar", "#video_holder_wrapper");
                            }
                            a.videoWrapperObj.removeClass("floating");
                            a.videoWrapperObj.css("top", "auto");
                            a.videoWrapperObj.css("left", "auto");
                        }
                    }
                }
            });
        }
    },
    onVideoManagerError: function() {
        if (window.MC_ISQA && console && console.log) {
            console.log("MC Video Manager Error: " + args);
        }
    },
    onVideoManagerReady: function() {
        var a = MetaC.Video;
        var c = a.videoWrapperObj.data("mcvideourl");
        var b = a.videoWrapperObj.data("mcvideotitle");
        if (a.autoPlayToggle.hasClass("on") && uvpjs.mediaCapabilities.supportsAutoplay()) {
            if (c && c != "") {
                MetaC.Video.playUrl(c, b);
            }
        } else {
            if (!uvpjs.mediaCapabilities.supportsAutoplay() || uvpjs.mediaCapabilities.isMobile()) {
                if (c && c != "") {
                    a.lastTitle = b;
                    a.lastUrl = c;
                    a.videoWrapperObj.addClass("no_autoplay");
                    a.cbsiVideoManager.createVideoPlayer(a.holderId, a.onVideoPlayerReady);
                }
            }
        }
    },
    onVideoPlayerReady: function(b) {
        var a = MetaC.Video;
        a.cbsiVideoPlayer = b;
        a.cbsiVideoPlayer.addEventListener(uvpjs.EventType.RESOURCE_START + ".metacritic", a.onResourceStart);
        a.cbsiVideoPlayer.addEventListener(uvpjs.EventType.AD_START + ".metacritic", a.onAdStart);
        a.cbsiVideoPlayer.addEventListener(uvpjs.EventsManager.prototype.eventTypes.CONTROL_FULLSCREEN + ".metacritic", a.onFullScreenControl);
        a.playUrl(a.lastUrl, a.lastTitle);
    },
    onFullScreenControl: function(b) {
        var a = MetaC.Video;
        if (b && b.payload && b.payload.isFs) {
            a.holderObj.addClass("fullscreen");
        } else {
            a.holderObj.removeClass("fullscreen");
        }
    },
    onResourceStart: function(e) {
        if (e && e.payload && e.payload.rco && e.payload.rco.type == "rp_url") {
            var b = MetaC.Video;
            $(".trailer_actions .action.playing").removeClass("playing");
            var f = $(".trailer_actions .play_action a[href$=" + e.payload.rco.mc_id + "]");
            var a = f.closest(".action");
            a.addClass("playing");
            var d = $(".trailers_strip");
            d.find(".product.selected").removeClass("selected");
            var c = "#mctid_" + e.payload.rco.mc_id;
            $(c).addClass("selected");
            if (b.videoStartCB) {
                b.videoStartCB(e.payload.rco);
            }
        }
    },
    onAdStart: function(a) {
        if (MetaC.Video.holdAutoplay) {
            MetaC.Video.muteIt();
            MetaC.Video.pauseIt();
        }
    },
    hideIt: function() {
        var a = MetaC.Video;
        a.videoWrapperObj.removeClass("playing");
        a.pauseIt();
        if (a.cbsiVideoPlayer) {
            a.cbsiVideoPlayer.destroyPlaylist();
        }
    },
    pauseIt: function() {
        var a = MetaC.Video;
        if (a.cbsiVideoPlayer) {
            try {
                a.cbsiVideoPlayer.pauseVideo();
                return true;
            } catch (b) {}
        } else {
            return false;
        }
    },
    muteIt: function() {
        var a = MetaC.Video;
        if (a.cbsiVideoPlayer) {
            a.cbsiVideoPlayer.mute();
            return true;
        }
        return false;
    },
    unmuteIt: function() {
        var a = MetaC.Video;
        if (a.cbsiVideoPlayer) {
            a.cbsiVideoPlayer.unMute();
            return true;
        }
        return false;
    },
    playIt: function() {
        var a = MetaC.Video;
        var e = a.videoWrapperObj;
        if (!e.hasClass("playing")) {
            var d = e.data("mctrailerurl");
            var c = e.data("mcvideourl");
            var b = e.data("mcvideotitle");
            if (c && c != "") {
                MetaC.Video.playUrl(c, b);
            }
        } else {
            if (a.cbsiVideoPlayer) {
                a.cbsiVideoPlayer.playVideo();
            }
        }
    },
    playUrl: function(a, j) {
        var h = MetaC.Video;
        if (h.holdAutoplay) {
            return;
        }
        if (!h.cbsiVideoPlayer) {
            h.lastTitle = j;
            h.lastUrl = a;
            h.cbsiVideoManager.createVideoPlayer(h.holderId, h.onVideoPlayerReady);
            return;
        }
        if (h.videoWrapperObj.data("mcwarning") != "") {
            var k = MetaC.Cookie.get("mc_ag");
            if (k != "1") {
                h.ageGate.addClass("warning");
                return;
            }
        }
        h.videoWrapperObj.addClass("playing");
        if (!h.doneOnce) {
            if (window.utag_data && h.cbsiVideoPlayer.setPageContextMetadata) {
                var g = {
                    siteRsids: "cbsicbsiall",
                    sitePrimaryRsid: "cbsimetacriticsite",
                    deviceType: utag_data.deviceType,
                    siteType: utag_data.siteType,
                    pageType: utag_data.pageType,
                    siteSection: utag_data.siteSection,
                    userState: utag_data.userState,
                    userType: utag_data.userType,
                    test: utag_data._test,
                    videoAutoPlay: h.autoPlayToggle.hasClass("on") ? "on" : "off"
                };
                var m = h.videoWrapperObj.data("mcproductid");
                if (m != null) {
                    g.productID = m;
                } else {
                    if (utag_data.movieId) {
                        g.productID = utag_data.movieId;
                    } else {
                        if (utag_data.gameId) {
                            g.productID = utag_data.gameId;
                        } else {
                            if (utag_data.showId) {
                                g.productID = utag_data.showId;
                            }
                        }
                    }
                }
                h.cbsiVideoPlayer.setPageContextMetadata(g);
            }
        }
        h.cbsiVideoPlayer.destroyPlaylist();
        var e = h.holderObj.width();
        var c = h.holderObj.height();
        var l = e + "x" + c;
        var b = "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/8264/vaw-metacritic/desktop/metacritic&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&url=[referrer_url]&description_url=[description_url]&correlator=[timestamp]";
        if (window.MC_ISMOBILE) {
            b = "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/8264/vaw-metacritic/mobile_web/metacritic_mobile&ciu_szs=300x60,300x250&impl=s&gdfp_req=1&env=vp&output=vast2&unviewed_position_start=1&url=[referrer_url]&description_url=[description_url]&correlator=[timestamp]";
        }
        var f = [{
            vidContId: h.holderId,
            type: uvpjs.mediaCapabilities.RP_IMA,
            adCall: b
        }, {
            vidContId: h.holderId,
            type: uvpjs.mediaCapabilities.RP_URL,
            videoTitle: j,
            assetURL: a,
            mc_id: h.videoWrapperObj.data("mctrailerid")
        }];
        if (h.playlist) {
            for (var d = 0; d < h.playlist.length; d++) {
                if (h.playlist[d].url != a) {
                    f.push({
                        vidContId: h.holderId,
                        type: uvpjs.mediaCapabilities.RP_IMA,
                        adCall: b
                    });
                    f.push({
                        vidContId: h.holderId,
                        type: uvpjs.mediaCapabilities.RP_URL,
                        videoTitle: h.playlist[d].title,
                        assetURL: h.playlist[d].url,
                        mc_id: h.playlist[d].mc_id
                    });
                }
            }
        }
        h.doneOnce = true;
        h.cbsiVideoPlayer.addResourcesToPlaylist(f);
    }
};
MetaC.Nav = {
    primeMenuClass: "primary_menu_item",
    primeMenuText: "primary_menu_text",
    secondaryMenuId: "secondary_nav_items",
    hoverTimer: null,
    init: function() {
        var b = MetaC.Nav;
        b.topHeader = $("#top_header");
        b.headerWrapper = $("#content_header_wrapper");
        b.secondaryNav = $("#secondary_nav");
        b.primaryNav = $("#primary_nav");
        b.pfull_summary_img = $(".pfull_summary .summary_left img");
        b.video_holder_wrapper = $(".movie.product.summary #video_holder_wrapper");
        b.leader_hover_wrapper = $("#leader_hover_wrapper");
        b.has_baby = ($(".primary_baby_menu").length > 0);
        var a = false;
        $("." + b.primeMenuText).on("mouseenter", function() {
            b.cancelTimer();
            var h = $(this).parents("." + b.primeMenuClass);
            b.show(h);
        }).on("mouseleave", function() {
            b.cancelTimer();
            b.hoverTimer = setTimeout(function() {
                b.hide();
            }, 500);
        });
        $("." + b.secondaryMenuId).on("mouseenter", function() {
            b.cancelTimer();
        }).on("mouseleave", function() {
            b.cancelTimer();
            b.hoverTimer = setTimeout(function() {
                b.hide();
            }, 200);
        });
        var c = false;
        var d = true;
        var f = true;
        var g = 0;
        var e = MetaC.isIPad ? true : false;
        $(".nav_video_close").on(MetaC.clickEventName, function() {
            b.closeMiniVideo();
        });
        $(".nav_video_next").on(MetaC.clickEventName, function() {
            var i = $(".nav_video_next_img_wrapper");
            var h = i.data("mcvideourl");
            var j = i.data("mcvideotitle");
            $(".nav_video_details .details").text(j);
            $(this).css("visibility", "hidden");
            MetaC.Video.hideIt();
            MetaC.Video.playUrl(h, j);
        });
        if (b.has_baby) {
            $(window).on("scroll.mcnav", function() {
                if (b.headerWrapper.hasClass("showing_search")) {
                    return;
                }
                var m = $(window).scrollTop();
                var j = b.topHeader.position().top + b.topHeader.height();
                if (j < m) {
                    if (!c) {
                        b.hide();
                        b.showBaby();
                        c = true;
                    }
                } else {
                    if (c) {
                        b.hideBaby();
                        c = false;
                    }
                }
                if (b.video_holder_wrapper.length > 0 && b.video_holder_wrapper.hasClass("playing") && !e) {
                    var i = b.video_holder_wrapper.position().top + b.video_holder_wrapper.height();
                    if (i < m) {
                        if (d) {
                            b.headerWrapper.addClass("past_main_video");
                            d = false;
                            if (!a && b.leader_hover_wrapper.length > 0) {
                                b.leader_hover_wrapper.addClass("hovering");
                                a = true;
                                $("#leader_hover_close").on(MetaC.clickEventName, function() {
                                    b.leader_hover_wrapper.removeClass("hovering");
                                });
                                setTimeout(function() {
                                    b.leader_hover_wrapper.addClass("closable");
                                }, 30000);
                                if (window.metac_hover_ads_pushdisplay) {
                                    var k = [];
                                    var h = [];
                                    $.each(window.metac_hover_ads_pushdisplay, function(n, o) {
                                        googletag.cmd.push(function() {
                                            window[o.varname] = googletag.defineSlot(o.arg1, o.arg2, o.arg3).addService(googletag.pubads()).setTargeting("pos", o.pos);
                                            var p = window[o.varname];
                                            h.push(p);
                                            k.push(o.arg3);
                                            if (o.strnativekey) {
                                                p.setTargeting("strnativekey", o.strnativekey);
                                            }
                                        });
                                    });
                                    MetaC._pushAdsWithLightSpeed(k, h);
                                }
                            }
                        }
                    } else {
                        if (!d) {
                            b.headerWrapper.removeClass("past_main_video");
                            d = true;
                        }
                    }
                }
                if (b.pfull_summary_img.length > 0 && m > g && b.headerWrapper.hasClass("past_main_video")) {
                    var l = b.pfull_summary_img.offset().top + b.pfull_summary_img.height();
                    if (l < m) {
                        f = false;
                        if (c) {
                            b.hideBaby();
                            c = false;
                        }
                    } else {
                        f = true;
                    }
                }
                g = m;
            });
        }
    },
    closeMiniVideo: function() {
        var a = MetaC.Nav;
        a.nav_video_closed = true;
        a.headerWrapper.removeClass("past_main_video");
        MetaC.Video.pauseIt();
    },
    cancelTimer: function() {
        var a = MetaC.Nav;
        if (a.hoverTimer) {
            clearTimeout(a.hoverTimer);
            a.hoverTimer = null;
        }
    },
    show: function(i) {
        var g = MetaC.Nav;
        var a = i.attr("id");
        var f = a.split("_");
        if (f.length > 1) {
            f = f[f.length - 1];
        }
        g.secondaryNav.find(".hovering").removeClass("hovering");
        var c = "#" + g.secondaryMenuId + "_" + f;
        var b = $(c);
        if (b.length > 0) {
            b.addClass("hovering");
            g.secondaryNav.show();
            if (b.hasClass("singleMenu")) {
                var d = i.width();
                var e = b.width();
                var h = e - d;
                if (h < 0) {
                    h = h * -1;
                }
                b.css("left", i.offset().left - (h / 2));
            }
        }
    },
    hide: function() {
        var a = MetaC.Nav;
        a.secondaryNav.find(".hovering").removeClass("hovering");
        a.secondaryNav.hide();
    },
    showBaby: function() {
        var a = MetaC.Nav;
        a.headerWrapper.addClass("baby");
    },
    hideBaby: function() {
        var a = MetaC.Nav;
        a.headerWrapper.removeClass("baby");
    },
    hideEverything: function() {
        var a = MetaC.Nav;
        a.hide();
        a.hideBaby();
        a.closeMiniVideo();
    }
};
MetaC.SearchMulti = {
    idMovie: "r150",
    idGame: "r30",
    idTv: "r70",
    idMusic: "r170",
    resultsTables: {},
    resultsCounts: {},
    lastTypedSearch: null,
    lastPost: null,
    scrolling: false,
    init: function() {
        var a = MetaC.SearchMulti;
        a.headerWrapper = $("#content_header_wrapper");
        a.mainContent = $("#main_content");
        if (a.mainContent.length == 0) {
            a.mainContent = $("#mantle_skin");
        }
        a.searchBox = $("#top_search");
        a.primarySearchResults = $("#primary_search_results");
        a.primarySearchNav = $("#primary_search");
        a.primaryNav = $("#primary_nav");
        a.sortSelect = $("#primary_search_selects");
        a.resultsInfo = a.primarySearchResults.find(".info");
        a.resultsTables[a.idMovie] = a.primarySearchResults.find(".r150 .results");
        a.resultsTables[a.idGame] = a.primarySearchResults.find(".r30 .results");
        a.resultsTables[a.idTv] = a.primarySearchResults.find(".r70 .results");
        a.resultsTables[a.idMusic] = a.primarySearchResults.find(".r170 .results");
        a.resultsTables.other = a.primarySearchResults.find(".other .results");
        a.resultsCounts[a.idMovie] = a.primarySearchResults.find(".r150 .count");
        a.resultsCounts[a.idGame] = a.primarySearchResults.find(".r30 .count");
        a.resultsCounts[a.idTv] = a.primarySearchResults.find(".r70 .count");
        a.resultsCounts[a.idMusic] = a.primarySearchResults.find(".r170 .count");
        a.resultsCounts.other = a.primarySearchResults.find(".other .count");
        a.resultsCountsAll = a.primarySearchResults.find(".result_header .count");
        a.closeObj = a.primarySearchResults.find(".close");
        a.primarySearchNav.find("#primary_search_wrapper").on(MetaC.clickEventName, function(b) {
            a.show();
            b.preventDefault();
            b.stopPropagation();
        });
        a.searchBox.on(MetaC.clickEventName, function(b) {
            a.primarySearchResults.find(".list .selected").removeClass("selected");
        });
        $(document).on("keypress", function(b) {
            if (!$(b.target).is("input, textarea")) {
                if (b.which !== 0 && b.charCode !== 0 && !b.ctrlKey && !b.metaKey && !b.altKey) {
                    if (b.keyCode != 32) {
                        a.lastTypedSearch = String.fromCharCode(b.which);
                        a.show();
                        a.searchBox.val(a.lastTypedSearch);
                        a.search(a.lastTypedSearch);
                        return false;
                    }
                }
            }
        });
        a.searchBox.on("keypress", function(b) {
            if (b.which !== 0 && b.charCode !== 0 && !b.ctrlKey && !b.metaKey && !b.altKey) {
                var c = String.fromCharCode(b.which);
                a.lastTypedSearch = a.searchBox.val() + c;
                a.search(a.lastTypedSearch);
            }
        });
        a.searchBox.on("keyup", function(b) {
            if (a.lastTypedSearch != a.searchBox.val()) {
                a.lastTypedSearch = a.searchBox.val();
                a.search(a.lastTypedSearch);
            }
        });
        a.sortSelect.on("change", function(b) {
            a.search(a.lastTypedSearch);
        });
        a.searchBox.on("keydown", function(b) {
            if (b.keyCode == 40) {
                a.move(-1);
            } else {
                if (b.keyCode == 38) {
                    a.move(1);
                } else {
                    if (b.keyCode == 37) {
                        a.move(0, -1);
                    } else {
                        if (b.keyCode == 39) {
                            a.move(0, 1);
                        } else {
                            if (b.keyCode == 13) {
                                a.openItem();
                                return false;
                            } else {
                                if (b.keyCode == 27) {
                                    a.hide();
                                }
                            }
                        }
                    }
                }
            }
        });
        a.closeObj.on(MetaC.clickEventName, function(b) {
            a.hide();
            return false;
        });
        a.primarySearchResults.on(MetaC.clickEventName, ".see_all", function() {
            a.findMore($(this));
        });
        a.primarySearchResults.find(".results").on("mouseover", ".item", function(b) {
            if (!a.scrolling && !$(this).hasClass("selected")) {
                a.primarySearchResults.find(".list .selected").removeClass("selected");
                $(this).addClass("selected");
            }
        });
        a.primarySearchResults.find(".see_all").on("mouseenter", function() {
            if (!a.scrolling && !$(this).hasClass("selected")) {
                a.primarySearchResults.find(".list .selected").removeClass("selected");
                $(this).addClass("selected");
            }
        });
        a.primarySearchResults.find(".browse_az").on("mouseenter", function() {
            if (!a.scrolling) {
                a.primarySearchResults.find(".list .selected").removeClass("selected");
            }
        });
        a.primarySearchResults.find(".results").on("mousedown touchstart", ".item", function(b) {
            if (b.which === 1) {
                a.openItem($(this));
                return false;
            }
        });
        a.show = function() {
            MetaC.Nav.hideEverything();
            a.headerWrapper.addClass("showing_search");
            a.mainContent.addClass("blurIt");
            a.primaryNav.addClass("blurIt");
            MetaC.Select2.fixWidth(a.sortSelect);
            a.searchBox.focus();
        };
        a.hide = function() {
            a.mainContent.removeClass("blurIt");
            a.primaryNav.removeClass("blurIt");
            a.headerWrapper.removeClass("showing_search");
        };
        a.search = function(c) {
            a.primarySearchResults.addClass("searching");
            a.primarySearchResults.find(".list .selected").removeClass("selected");
            var b = $.trim(c);
            if (b != "") {
                MetaC.Progress.show(a.primarySearchResults);
                a.resultsInfo.hide();
                if (a.lastPost) {
                    a.lastPost.abort();
                    a.lastPost = null;
                }
                var d = {
                    search_term: b,
                    image_size: 98
                };
                var e = 1;
                if (e) {
                    d.search_each = e;
                }
                d.sort_type = MetaC.Select.getSelectedValue(a.sortSelect);
                a.lastPost = $.post("/autosearch", d, function(A) {
                    var q = false;
                    a.resultsCountsAll.text("");
                    if (A && A.autoComplete) {
                        if (A.autoComplete.results && A.autoComplete.results.length > 0) {
                            q = A.autoComplete.results;
                            if (A.autoComplete.totals) {
                                for (var u in a.resultsCounts) {
                                    if (a.resultsCounts.hasOwnProperty(u)) {
                                        var w = a.resultsCounts[u];
                                        var v = A.autoComplete.totals[u];
                                        if (v > 0) {
                                            w.text("(" + v + ")");
                                        } else {
                                            w.text("");
                                        }
                                    }
                                }
                            }
                        } else {
                            if (A.autoComplete.length > 0) {
                                q = A.autoComplete;
                            }
                        }
                    }
                    if (b == $.trim(a.searchBox.val())) {
                        for (var f in a.resultsTables) {
                            if (a.resultsTables.hasOwnProperty(f)) {
                                var j = a.resultsTables[f];
                                j.empty();
                            }
                        }
                        if (q) {
                            var s = new RegExp("(" + b + ")", "i");
                            var y = q.length;
                            for (var x = 0; x < y; x++) {
                                var z = q[x];
                                if (z && z.url && z.name) {
                                    var r = "";
                                    var h = "r" + z.refTypeId;
                                    var B = a.resultsTables[h];
                                    var l = false;
                                    if (B == null) {
                                        B = a.resultsTables.other;
                                        l = true;
                                    }
                                    if (h == a.idGame) {
                                        l = true;
                                    }
                                    var n = z.name.replace(s, "<b>$1</b>");
                                    if (h == a.idMusic) {
                                        var t = n.split(" - ");
                                        var m = "";
                                        if (t.length > 1) {
                                            for (var o = 0; o < t.length; o++) {
                                                if (o > 0) {
                                                    m += '<br/><span class="subtitle">';
                                                }
                                                m += t[o];
                                                if (o > 0) {
                                                    m += "</span>";
                                                }
                                            }
                                            n = m;
                                        }
                                    }
                                    var k = " no_score";
                                    if (z.scoreWord && z.metaScore) {
                                        k = "";
                                    }
                                    var g = " no_image";
                                    if (z.imagePath) {
                                        g = "";
                                    }
                                    r += '<div class="item' + k + g + '">';
                                    r += '<div class="colleft"><div class="score_wrapper">';
                                    if (z.imagePath) {
                                        r += '<img src="' + z.imagePath + '">';
                                    }
                                    if (z.scoreWord && z.metaScore) {
                                        r += '<span class="metascore_w score_' + z.scoreWord + '">' + z.metaScore + "</span>";
                                    }
                                    r += "</div></div>";
                                    r += '<div class="colright">';
                                    r += '<div class="title">';
                                    r += '<a href="' + z.url + '">';
                                    r += n;
                                    r += "</a>";
                                    r += "</div>";
                                    if (z.itemDate) {
                                        r += '<div class="date">';
                                        r += z.itemDate;
                                        r += "</div>";
                                    }
                                    r += '<div class="subtitle">';
                                    if (l) {
                                        r += z.refType;
                                    }
                                    r += "</div>";
                                    r += "</div>";
                                    r += "</div>";
                                    B.append(r);
                                }
                            }
                        } else {
                            a.resultsInfo.show();
                        }
                    }
                    a.primarySearchResults.removeClass("searching");
                    MetaC.Progress.hide(a.primarySearchResults);
                }, "json");
            }
        };
        a.move = function(n, l) {
            var e = a.primarySearchResults.find(".list .selected");
            var c = e.parents(".list");
            var r = e.hasClass("see_all");
            e.removeClass("selected");
            if (n == 1) {
                if (r) {
                    e = c.find(".item:last");
                } else {
                    e = e.prev();
                    if (e.length == 0) {
                        if (c.length == 0) {
                            c = a.primarySearchResults.find(".other");
                        }
                        e = c.find(".see_all");
                    }
                }
            } else {
                if (n == -1) {
                    if (r) {
                        e = c.find(".item:first");
                    } else {
                        e = e.next();
                        if (e.length == 0) {
                            if (c.length == 0) {
                                c = a.resultsTables[a.idMovie];
                                e = c.find(".item:first");
                            } else {
                                e = c.find(".see_all");
                            }
                        }
                    }
                } else {
                    if (l == 1) {
                        var q = c.next();
                        if (q.length == 0) {
                            q = a.resultsTables[a.idMovie].parents(".list");
                        }
                        var j = q.find(".results");
                        var o = 0;
                        if (!e.hasClass("see_all")) {
                            o = e.index();
                        }
                        e = j.find(".item:eq(" + o + ")");
                        if (e.length == 0) {
                            e = q.find(".see_all");
                        }
                    } else {
                        if (l == -1) {
                            var q = c.prev();
                            if (q.length == 0) {
                                q = a.resultsTables.other.parents(".list");
                            }
                            var j = q.find(".results");
                            var o = 0;
                            if (!e.hasClass("see_all")) {
                                o = e.index();
                            }
                            e = j.find(".item:eq(" + o + ")");
                            if (e.length == 0) {
                                e = q.find(".see_all");
                            }
                        }
                    }
                }
            }
            if (e.length > 0) {
                var f = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
                var i = $(document).scrollTop();
                var b = e.offset();
                var g = e.height();
                var m = b.top + g > f + i;
                var k = b.top < i;
                if (m || k) {
                    a.scrolling = true;
                    e[0].scrollIntoView(n == 1);
                }
            }
            a.scrolling = true;
            e.addClass("selected");
            setTimeout(function() {
                a.scrolling = false;
            }, 250);
        };
        a.openItem = function(c) {
            if (c == null) {
                c = a.primarySearchResults.find(".list .selected");
            }
            if (c.length == 0) {
                a.primarySearchResults.find("form").submit();
            } else {
                var b = c.find("a").attr("href");
                if (b) {
                    MetaC.setOmniEvent("pageFindingMethod", "Internal:Search");
                    if (window.om && om.trackSearchSuggestClick) {
                        om.trackSearchSuggestClick({
                            term: a.lastTypedSearch
                        }, true, function() {
                            window.location = b;
                        });
                    }
                } else {
                    if (c.hasClass("see_all")) {
                        a.findMore(c);
                    }
                }
            }
        };
        a.findMore = function(d) {
            var c = d.parents(".list");
            var b = a.primarySearchResults.find("form");
            var e = a.primarySearchResults.find("[name='search_filter']");
            var f = e.val();
            if (c.hasClass(a.idMovie)) {
                f = "movie";
            } else {
                if (c.hasClass(a.idGame)) {
                    f = "game";
                } else {
                    if (c.hasClass(a.idTv)) {
                        f = "tv";
                    } else {
                        if (c.hasClass(a.idMusic)) {
                            f = "album";
                        }
                    }
                }
            }
            e.val(f);
            b.submit();
        };
    }
};
MetaC.UserReview = {
    _deleteChoiceHtml: '<div class="delete_choice"><div class="delete_confirm"><span>Would you like to delete this review?</span><i class="fa fa-check-circle" aria-hidden="true"></i></div><div class="delete_cancel"><span>Cancel</span><i class="fa fa-times-circle" aria-hidden="true"></i></div></div>',
    _deleteDoneHtml: '<div class="delete_done">This review has been deleted! Thanks.</div>',
    init: function() {
        var a = MetaC.UserReview;
        $(".de_wrapper .delete_start").on("click", function() {
            var b = $(this);
            b.closest(".button_wrapper").hide();
            a.deleteStart(b);
        });
        $(".de_wrapper").on("click", ".delete_confirm", function() {
            a.deleteConfirm($(this));
        }).on("click", ".delete_cancel", function() {
            a.deleteCancel($(this));
        });
        a.deleteStart = function(b) {
            var c = a.getReviewObj(b);
            var d = a.getReviewObj(c);
            if (d) {
                var e = a.getWrapperObj(b);
                e.append(a._deleteChoiceHtml);
                e.find(".delete_choice").css("height", c.height() + 10);
                c.css("overflow", "hidden");
            }
        };
        a.deleteConfirm = function(b, d) {
            var g = b;
            var c = a.getReviewObj(b);
            var e = a.getReviewId(c);
            if (e) {
                var h = b.closest(".user_reviews").find('[name="csrf"]');
                var f = h.val();
                $.post("/_ua/ajxact", {
                    ajxact: "delrev",
                    csrf: f,
                    rid: e
                }, function(i) {
                    if (i.csrf) {
                        if (h.length > 0 && !d) {
                            h.val(i.csrf);
                            setTimeout(function() {
                                a.deleteConfirm(g, true);
                            }, 1);
                        }
                    } else {
                        var j = a.getWrapperObj(b);
                        j.find(".delete_choice").remove();
                        j.append(a._deleteDoneHtml);
                        j.find(".delete_done").css("height", c.height() + 10);
                        if (i.success) {} else {
                            j.find(".delete_done").text("Please try again later.");
                        }
                    }
                });
            }
        };
        a.deleteCancel = function(b) {
            var c = a.getWrapperObj(b);
            c.find(".delete_choice").remove();
            c.find(".button_wrapper").show();
        };
        a.getReviewObj = function(b) {
            var c = [];
            if (b) {
                c = b.closest(".review_content");
                if (c.length == 0) {
                    c = b.closest(".review");
                }
            }
            return c;
        };
        a.getWrapperObj = function(b) {
            if (b) {
                return b.closest(".de_wrapper");
            }
            return [];
        };
        a.getReviewId = function(b) {
            if (b) {
                return b.data("mcrid");
            }
            return null;
        };
    }
};
MetaC.Newsletter = {
    _signupHtml: '<div id="popup_newslettter"><div class="close"><i class="fa fa-times" aria-hidden="true"></i><i class="fa fa-angle-double-right" aria-hidden="true"></i></div><div class="stuff"><div class="title">Sign-up for the Weekly Metacritic Movie Newsletter Now.</div><input type=hidden name="cid" value="a6518716d26c510c026a1f2c4c2c0896"><span class="field innerLabel"><label for="email">your.name@email.com</label><input type="text" name="email" class="field_input email" autocomplete="off"></span><button type="button">Sign Me Up!</button><div class="msg"></div></div></div>',
    init: function() {
        if (!MC_LOCAL_STORE.test()) {
            return;
        }
        var a = MetaC.Newsletter;
        var f = $('[name="csrf_newsletter"]');
        if (f.length == 0) {
            return;
        }
        var d = $("#page");
        if (d.length == 0) {
            d = $("#main_content");
        }
        if (d.length > 0) {
            var c = MC_LOCAL_STORE.get("mc_newsletter");
            if (c == "2") {
                return;
            }
            var b = null;
            var e = $("#articlebody");
            $(window).on("scroll.newsletters", function() {
                if (e.length == 0) {
                    $(window).off("scroll.newsletters");
                } else {
                    if ($(window).scrollTop() > (e.height() / 2)) {
                        $(window).off("scroll.newsletters");
                    } else {
                        return true;
                    }
                }
                d.append(a._signupHtml);
                b = $("#popup_newslettter");
                if (c == "1") {
                    b.addClass("smaller");
                }
                setTimeout(function() {
                    b.addClass("make_vis");
                }, 100);
                b.find("button").on("click", function() {
                    a.signUp();
                });
                b.find("input.email").on("keypress", function(h) {
                    var g = h.which || h.keyCode || h.charCode;
                    if (g == 13) {
                        a.signUp();
                        return false;
                    }
                    return true;
                });
                b.find(".close").on("click", function() {
                    b.toggleClass("smaller");
                    c = MC_LOCAL_STORE.get("mc_newsletter");
                    if (c != "2") {
                        c = "1";
                        MC_LOCAL_STORE.save("mc_newsletter", c);
                    }
                });
            });
            a.signUp = function(h) {
                var i = f.val();
                var g = b.find(".email").val();
                $.post("/thenewsletter", {
                    newsletter: 1,
                    csrf: i,
                    email: g
                }, function(j) {
                    var l = false;
                    if (j.csrf) {
                        if (f.length > 0 && !h) {
                            f.val(j.csrf);
                            setTimeout(function() {
                                a.signUp(true);
                            }, 1);
                        }
                    } else {
                        if (j.bh && j.bh.msg) {
                            var k = j.bh.msg;
                            l = j.bh.success;
                            b.find(".msg").show().text(k);
                        } else {
                            b.find(".msg").show().text("Please try again later.");
                        }
                    }
                    if (l) {
                        setTimeout(function() {
                            b.addClass("smaller");
                        }, 3000);
                        c = "2";
                        MC_LOCAL_STORE.save("mc_newsletter", c);
                    }
                });
            };
        }
    }
};
MetaC.Settings = {
    errorClass: "field_error",
    successClass: "field_success",
    lastUsername: "",
    usernameTimer: null,
    setFieldError: function(e, c, a, d) {
        var b = $(".field." + e, a);
        b.removeClass(MetaC.Settings.successClass);
        b.addClass(MetaC.Settings.errorClass);
        $(".field_feedback", b).html(c);
        if (d === undefined || d != true) {
            $('[name="' + e + '"]').blur().focus();
        }
    },
    setFieldSuccess: function(d, a, b) {
        var c = $(".field." + d, b);
        c.removeClass(MetaC.Settings.errorClass);
        c.addClass(MetaC.Settings.successClass);
        $(".field_feedback", c).text(a);
    },
    clearErrors: function(a) {
        $(".field_error", a).removeClass(MetaC.Settings.errorClass);
        $(".field_success", a).removeClass(MetaC.Settings.successClass);
        $(".field_feedback", a).text("");
        $(".form_feedback", a).text("");
    },
    requireValue: function(d, c, b) {
        var a = $("[name='" + d + "']", b).val();
        if ($.trim(a) == "") {
            MetaC.Settings.setFieldError(d, c, b);
            return null;
        }
        return a;
    },
    checkUsername: function(b, d) {
        MetaC.Settings.clearErrors(b);
        var c = MetaC.Settings.requireValue("userName", "Please provide a display name.");
        if (c == null) {
            return false;
        }
        var a = d;
        MetaC.Settings._checkUsername(c, function(f, e) {
            if (f) {
                MetaC.Settings.setFieldSuccess("userName", e);
            } else {
                MetaC.Settings.setFieldError("userName", e);
            }
            if (a) {
                a(f);
            }
        });
        return true;
    },
    _checkUsername: function(c, b) {
        var a = b;
        $.post("/signup", {
            check_username: 1,
            userName: c
        }, function(d) {
            if (a) {
                var f = (d.successes && d.successes.username != null);
                var e = "Unable to check username.  Try again later.";
                if (f) {
                    e = d.successes.username;
                } else {
                    if (d.errors && d.errors.username) {
                        e = d.errors.username;
                    }
                }
                a(f, e);
            }
        });
        return true;
    },
    checkChangePwd: function(d, e) {
        MetaC.Settings.clearErrors(d);
        if (!e) {
            var c = MetaC.Settings.requireValue("current_password", "Please provide your current password.");
            if (c == null) {
                return false;
            }
        }
        var b = MetaC.Settings.requireValue("new_password", "Please provide a new password.");
        if (b == null) {
            return false;
        }
        var a = MetaC.Settings.requireValue("new_confirm_password", "Please confirm your new password.");
        if (a == null) {
            return false;
        }
        if (b != a) {
            MetaC.Settings.setFieldError("new_password", "The passwords entered do not match.");
            MetaC.Settings.setFieldError("new_confirm_password", "The passwords entered do not match.");
            return false;
        }
        return true;
    },
    checkSignupPwd: function(b) {
        MetaC.Settings.clearErrors(b);
        var a = MetaC.Settings.requireValue("password", "Please provide a password.", b);
        if (a == null) {
            return false;
        }
        return true;
    },
    checkSignupEmailAndUsername: function(e, f) {
        var h = e;
        MetaC.Settings.clearErrors(e);
        var d = MetaC.Settings.requireValue("csrf", "", e);
        var g = MetaC.Settings.requireValue("userName", "Please provide a display name.", e);
        if (g == null) {
            return false;
        }
        var c = MetaC.Settings.requireValue("email", "Please provide a valid email address.", e);
        if (c == null) {
            return false;
        }
        var b = MetaC.Settings.requireValue("emailConf", "Please confirm your email address.", e);
        if (b == null) {
            return false;
        }
        if (c != b) {
            MetaC.Settings.setFieldError("email", "The email addresses entered do not match.", e);
            MetaC.Settings.setFieldError("emailConf", "The email addresses entered do not match.", e);
            return false;
        }
        $("[name='email']", e).val($.trim(c));
        var a = f;
        $.post("/signup", {
            check_enu: 1,
            email: c,
            userName: g,
            csrf: d
        }, function(i) {
            if (i.errors && i.errors.email) {
                MetaC.Settings.setFieldError("email", i.errors.email, h);
            }
            if (i.errors && i.errors.username) {
                MetaC.Settings.setFieldError("userName", i.errors.username);
            }
            if (a) {
                a(i.errors == null);
            }
        });
        return true;
    },
    checkEmail: function(b) {
        var c = b;
        MetaC.Settings.clearErrors(b);
        var a = MetaC.Settings.requireValue("email", "Please provide a valid email address.", b);
        if (a == null) {
            return false;
        }
        $("[name='email']", b).val($.trim(a));
        return true;
    },
    checkSignup: function(a, b) {
        if (!MetaC.Settings.checkSignupPwd(a)) {
            return false;
        }
        MetaC.Settings.checkSignupEmailAndUsername(a, b);
        return false;
    },
    monitorUsername: function(e, g, f) {
        var b = e;
        var a = g;
        var c = f;
        var d = $("[name='userName']", b);
        d.keyup(function() {
            MetaC.Settings.cancelUsernameTimer();
            if (d.val().length > 0 && d.val() != MetaC.Settings.lastUsername) {
                MetaC.Settings.usernameTimer = setTimeout(function() {
                    if (c) {
                        c(d.val());
                    }
                    MetaC.Settings.lastUsername = d.val();
                    var h = d.val();
                    MetaC.Settings._checkUsername(MetaC.Settings.lastUsername, function(j, i) {
                        if (h == d.val()) {
                            if (j) {
                                MetaC.Settings.setFieldSuccess("userName", i);
                            } else {
                                MetaC.Settings.setFieldError("userName", i, null, true);
                            }
                            if (a) {
                                a(j);
                            }
                        }
                    });
                }, 350);
            }
        });
    },
    cancelUsernameTimer: function() {
        if (MetaC.Settings.usernameTimer != null) {
            clearTimeout(MetaC.Settings.usernameTimer);
        }
        MetaC.Settings.usernameTimer = null;
    },
};
$(document).ready(function() {
    if (MetaC.isIPad) {
        var b = $("#page");
        if (b.length > 0) {
            b.addClass("iPad");
        } else {
            $("#site_layout").addClass("iPad");
        }
    }
    var a = ".field.innerLabel input, .field.innerLabel textarea";
    $(document).on("focus", a, function() {
        $(".field.selected").removeClass("selected");
        var c = $(this).closest(".field");
        c.addClass("selected");
    }).on("blur", a, function() {
        MetaC.innerLabelIf($(this));
        $(".field.selected").removeClass("selected");
    }).on("keydown", a, function() {
        MetaC.innerLabelIf($(this));
    }).on("keyup", a, function() {
        MetaC.innerLabelIf($(this));
    });
    $(a).each(function(c) {
        MetaC.innerLabelIf($(this));
    });
    $(document).on("click", "[data-leadname]", function(g) {
        var i = $(this);
        var e = i.data("leadname");
        if (e) {
            var c = i.data("leadtag");
            if (!c) {
                c = i.attr("href");
            }
            var f = window.om_lead_media;
            var d = i.data("mediaid");
            if (d) {
                f = {
                    mediaId: d,
                    mediaType: i.data("mediatype"),
                    mediaTitle: i.data("mediatitle")
                };
            }
            if (!f) {
                f = {};
            }
            var h = {
                leadMerchantName: e,
                leadMerchantId: i.data("leadid"),
                leadType: i.data("leadtype"),
                leadMerchantTag: c,
                leadPagePlacement: i.data("leadplace"),
                mediaType: f.mediaType,
                mediaId: f.mediaId,
                mediaTitle: f.mediaTitle
            };
            if (window.om != undefined && om.trackLeadClick) {
                om.trackLeadClick(h);
            }
        }
    });
    $(document).on("click", ".esite_btn table", function(g) {
        var f = $(g.target);
        var c = $(this);
        if (f.closest("a").length > 0) {} else {
            var d = c.find("a");
            if (d.length > 0) {
                d[0].click();
            }
        }
    });
    $(document).on("click", ".banner_container", function(g) {
        var f = $(g.target);
        var c = $(this);
        if (f.closest("a").length > 0) {} else {
            var d = c.find("a");
            if (d.length > 0) {
                d[0].click();
            }
        }
    });
    $(".piv_promo").on("click", function() {
        var d = $(this);
        var c = d.data("leadtag");
        window.open("http://www.amazon.com/gp/video/primesignup?tag=" + c);
    });
    $(".promo_amazon").click(function(g) {
        var f = $(g.target);
        var c = $(this);
        if (f.closest("a").length > 0) {} else {
            var d = c.find("a");
            if (d.length > 0) {
                d[0].click();
            }
        }
    });
    $(".product_container a").on("click", function(c) {
        var d = null;
        if (window.utag_data && utag_data.productContainerId) {
            d = utag_data.productContainerId;
        }
        if (window.om != undefined && om.trackProductContainerClick) {
            om.trackProductContainerClick(d, this, "navigate");
        }
        return false;
    });
    $(".sitewide_promo a").on("click", function(e) {
        var d = true;
        var c = null;
        if (window.utag_data && utag_data.sitePromotionId) {
            c = utag_data.sitePromotionId;
        }
        if (window.om != undefined && om.trackSitePromotionClick) {
            var f = $(this);
            if (f.attr("target")) {
                om.trackSitePromotionClick(c, this);
            } else {
                d = false;
                om.trackSitePromotionClick(c, this, "navigate");
            }
        }
        return d;
    });
    $("[data-mc-social-track-id]").on("click", function(f) {
        if (window.om != undefined) {
            var d = $(this);
            var c = d.data("mcSocialTrackId");
            if (c) {
                if (om.trackSocialClick) {
                    om.trackSocialClick({
                        id: c
                    });
                }
            }
        }
    });
    $(".sharing-twitter").on("click", function(h) {
        var g = $(this);
        if (g.attr("href") == "#") {
            var c = g.data("mcSocialUrl");
            var f = $.param({
                path: c,
                social: true
            });
            var d = window.open("about:blank", "tweetwindow");
            $.ajax({
                type: "POST",
                async: false,
                url: "/mcshorturl",
                data: f,
                success: function(i) {
                    if (i && i.results) {
                        var e = i.results.shortened_url;
                        if (!e) {
                            e = i.results.url;
                        }
                        if (e) {
                            var j = g.data("mcTweetPrefix");
                            j += "&url=" + e;
                            d.location.href = j;
                            g.attr("href", j);
                        } else {
                            d.close();
                        }
                    }
                }
            });
            return false;
        } else {
            return true;
        }
    });
    if (!document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1")) {
        $("img[src$='.svg']").each(function(c) {
            var d = $(this);
            d.attr("src", d.attr("src").replace(/.svg$/, ".png"));
        });
    }
    $("a.toggle_expand_collapse").click(function(c) {
        $(this).html($(this).hasClass("toggle_collapse") ? "Expand" : "Collapse");
        $(this).toggleClass("toggle_collapse");
        $(this).parent().toggleClass("inline_expanded");
        $(this).parent().toggleClass("inline_collapsed");
        return false;
    });
    MetaC.Video.init();
    MetaC.Select.init();
    MetaC.Select2.init();
    MetaC.Nav.init();
    MetaC.SearchMulti.init();
    MetaC.UserReview.init();
    MetaC.Newsletter.init();
});

function renderAdCallback(c) {
    var b = 1;
    if (c && c.isIntromercial && !c.isBlank) {
        if (c.isIntromercialOpen) {
            MetaC.Video.holdAutoplay = true;
            if (!MetaC.Video.pauseIt()) {
                var a = setInterval(function() {
                    if (MetaC.Video.pauseIt()) {
                        clearInterval(a);
                    }
                }, 10);
                setTimeout(function() {
                    clearInterval(a);
                }, 15000);
            }
        } else {
            if (c.isIntromercialOpen === false) {
                MetaC.Video.holdAutoplay = false;
                if (MetaC._utagAutoPlay != -1 && MetaC._utagAutoPlay == true) {
                    MetaC.Video.unmuteIt();
                    MetaC.Video.playIt();
                }
            }
        }
    }
}
$(function() {
    if (!MC_USER_LOGGED_IN) {
        $("[data-login-required], form[data-login-required] input").click(function(f) {
            var g = $(this).closest("[data-login-required]").attr("data-login-required");
            mcLogin(g);
            return false;
        });
        $("form[data-login-required] input, form[data-login-required] input").focus(function(f) {
            var g = $(this).closest("[data-login-required]").attr("data-login-required");
            mcLogin(g);
            return false;
        });
    } else {
        $(document).on("click", ".resend_confirm", function() {
            var e = $(this).parent().find('[name="csrf"]').val();
            $.post("/send-confirm", {
                send_confirm: 1,
                csrf: e
            }, function(f) {
                if (f.confirmationSent && f.reqEmail) {
                    popPanelUp('<div class="popStandardMsg"><h3>Please check your inbox.</h3>  We just resent a confirmation email to: ' + f.reqEmail + "<br/><br/>Please click on the link within the email to confirm your email address. Be sure to check your spam folder if you didn't receive an email.</div>", {
                        modal: true
                    });
                } else {
                    if (f.jsonReloadPage) {
                        window.location.reload(true);
                    } else {
                        popPanelUp('<div class="popStandardErr">Unable to send a confirmation email.  Please try again later.</div>');
                    }
                }
            });
        });
    }
    MetaC.linkHoverStart = function(g) {
        var e = $(this);
        if (e.hasClass("hover_none") || e.parents(".hover_none").length > 0) {
            return;
        }
        if (e.hasClass("toggle_expand")) {
            return;
        }
        if (e.parent().hasClass("nav_item_wrap") || e.parent().hasClass("tab")) {
            return;
        }
        var f = e.attr("href");
        if (f == null || f == "") {
            return;
        }
        var j = "http://www.metacritic.com";
        if (f.lastIndexOf(j, 0) === 0 && f.length > j.length) {
            f = f.substring(j.length);
        }
        var i = f.split("/");
        if (i.length < 3) {
            return;
        }
        i.shift();
        if (((i[0] == "movie" && i.length == 2) || (i[0] == "game" && i.length == 3) || (i[0] == "music" && i.length == 3) || (i[0] == "tv" && i.length >= 2))) {
            if (e.parents(".carousel_slot").length > 0 && MetaC.frontToaster.autoTimer) {
                return;
            }
            if (e.text() == MetaC.Hover.moreLinkText) {
                return;
            }
            if (i[0] == "tv" && i.length > 2) {
                if (i[2] == "season-1") {
                    i.pop();
                    f = "/" + i.join("/");
                } else {
                    if (i[2].indexOf("season") != 0) {
                        return;
                    }
                }
            }
            var h = i.join("_");
            MetaC.Hover.currentKeyname = h;
            MetaC.Hover.currentAnchor = e;
            if (MetaC.Hover.hrefs[h]) {
                MetaC.Hover.cancelTimer();
                MetaC.Hover.timer = setTimeout(function() {
                    var k = MetaC.Hover.getDiv();
                    MetaC.Hover.show(e, MetaC.Hover.hrefs[h]);
                    MetaC.Hover.cancelTimer();
                }, 750);
            } else {
                MetaC.Hover.timer = setTimeout(function() {
                    MetaC.Hover.getData(f, function(k) {
                        MetaC.Hover.hrefs[h] = k;
                        if (MetaC.Hover.currentKeyname == h) {
                            MetaC.Hover.show(e, k);
                        }
                        MetaC.Hover.cancelTimer();
                    });
                }, 500);
            }
        }
    };
    MetaC.linkHoverEnd = function(e) {
        MetaC.Hover.cancelTimer();
        MetaC.Hover.startCloseTimer();
    };
    MetaC.linkHoverClick = function(e) {
        MetaC.Hover.cancelTimer();
    };
    $("a").hover(MetaC.linkHoverStart, MetaC.linkHoverEnd);
    $("a").click(MetaC.linkHoverClick);
    $('a[rel^="popup"]').each(function() {
        var e = $(this);
        if (e.attr("target") != "_blank") {
            e.attr("target", "_blank");
        }
    });
    $(".rating_thumbs a.thumb").click(function(j) {
        ajax_busy(j);
        var g = $(this).attr("href");
        var h = $(this).closest(".review_actions");
        var f = h.find(".helpful_summary");
        var k = h.find(".helpful_msg");
        var i = h.find("ul.rating_thumbs");
        $.get(g, function(e) {
            if (e.success) {
                i.hide();
                if (e.thumb == 1) {
                    k.html("You liked this review");
                } else {
                    k.html("You did not like this review");
                }
                f.hide();
            }
            ajax_done();
        }, "json");
        return false;
    });
    $("select.dynamic").change(function(f) {
        window.location = document.location.href.setUrlParam("year_selected", $(this).val());
    });
    $('#review_product_form [name="post-review-spellcheck"]').click(function(g) {
        var h = $(this).closest("form");
        var f = h.find(".form_feedback");
        $.post(h.attr("action"), h.serialize() + "&post-review-spellcheck=Check Spelling", function(e) {
            if (e.html) {
                f.html(e.html);
                f.css("display", "block");
                f.css("visibility", "visible");
            }
        }, "json");
        return false;
    });
    $(".review_product .review_body").click(function() {
        $(".review_product .review_body .help_msg").hide();
        $(".review_product .review_body textarea").focus();
    });
    $(".review_product .review_body textarea").blur(function() {
        if ($(".review_product .review_body textarea").val() == "") {
            $(".review_product .review_body .help_msg").show();
        }
    });
    $(".layout").on("click", ".partial_holder a.partial", function(f) {
        ajax_busy(f);
        $.get($(this).attr("href"), function(e) {
            $(".partial_holder").replaceWith(e);
            ajax_done();
        });
        return false;
    });
    $("[data-apply-limit-to]").each(function() {
        var i = $(this);
        var f = i.find(".limit").html();
        var g = i.find(".remaining");
        var h = i.find(".count");
        var e = $(i.attr("data-apply-limit-to"));
        if (e.length == 1 && e.get(0).tagName == "TEXTAREA") {
            e.keyup(function() {
                var j = $.trim(e.val()).length;
                if (j <= f) {
                    g.html(f - j);
                    h.html(j);
                } else {
                    e.val(e.val().substr(0, f));
                    alert("Limit is " + f + " characters");
                }
            });
        }
    });
    $(".new_search_btn_wrap").click(function(f) {
        f.preventDefault();
        $("#adv_search").removeClass("search_conditions_hide");
    });
    $(".advanced_search_beta").click(function(h) {
        var g = $.trim($("#search_term").val());
        var f = "/advanced-search";
        if (g != "") {
            g = g.replace(/ /g, "+").replace(/[<>]+/g, "");
            f += "/all/" + encodeURI(g);
        }
        window.location.href = f;
        return false;
    });
    $(".promo_video").one("click", function(f) {
        setTimeout(function() {
            var e = $(".forza_video");
            e.removeData("leadname");
            e.removeAttr("data-leadname");
        }, 10);
    });
    $(".where_btn_wrapper .where_type").on("click", function() {
        var f = $(this).parent();
        var e = f.find("a");
        if (e.length > 0) {
            e[0].click();
        }
    });
    $(".list_expand").on("click", function() {
        var e = $(this);
        var f = e.prev(".list_expand_wrapper");
        f.addClass("expand");
        e.hide();
    });
    jsLoginInit(".rps_form.signin_form");
    MetaC.frontToaster = new mcToaster(".module.carousel_module");
    var a = new mcComingSoonCarousel(".module.coming_soon_module");
    var b = new mcCommentsModule(".module.comments");
    var c = new mcMovieShowtimesModule(".module.showtimes_module");
    var d = new mcRatingWidget(".yourscore_summary");
    $(".unscored_question").hover(function() {
        $(".unscored_help").show(400);
    }, function() {
        $(".unscored_help").hide();
    });
});
mcRatingWidget = function(c, b) {
    this.displayOnly = b ? b : false;
    this.jq = $(c);
    if (this.jq.length == 1) {
        var a = this;
        this.links = this.jq.find(".rating_action");
        this.error = this.jq.find(".rating_error");
        this.highlightRating = function(d) {
            d.closest("ul").find(".selected").removeClass("selected");
            d.addClass("selected");
        };
        this.unHighlightAll = function(d) {
            this.jq.find(".selected").removeClass("selected");
        };
        this.setReviewScore = function(d) {
            this.jq.closest("form").find('[name="review_score"]').val(d);
        };
        this.submitRating = function(i, f) {
            ajax_busy(i);
            var j = f.split("?");
            if (j.length > 1) {
                j = j[1];
                var h = $(i.target).closest("ul").children('[name="csrf"]').val();
                if (h) {
                    j = j + "&csrf=" + h;
                }
            }
            var g = i;
            var d = f;
            $.post(f, j, function(l) {
                if (l.success) {
                    ajax_done();
                    if (window.om) {
                        if (window.om != undefined) {
                            var m = a.getScore($(g.target));
                            if (om.trackRatingsAdd) {
                                om.trackRatingsAdd({
                                    rating: m
                                });
                            }
                        }
                    }
                    var k = a.jq.data("rated");
                    if (k == "1") {
                        return;
                    }
                    a.jq.attr("data-rated", "1");
                    var e = MC_LOCAL_STORE.get("nothanks");
                    if (e != "1") {
                        var n = $(".write_review").offset();
                        n.left -= 80;
                        n.top -= 97;
                        popPanelUp('<div class="thanks_rate"><h2>Thanks for the rating!</h2><div>Would you like to write a review? Click below</div><hr/><input type="checkbox"/><span>Don&lsquo;t Show Again</span><div class="arrow_down"></div></div>', {
                            left: n.left,
                            top: n.top
                        });
                        $('.thanks_rate input[type="checkbox"]').change(function() {
                            MC_LOCAL_STORE.save("nothanks", ($(this).is(":checked") ? "1" : "0"));
                        });
                    }
                } else {
                    if (l.pendingUser) {
                        a.unHighlightAll();
                        popPanelUp('<div class="pending_user" style="padding: 15px;">You must <a href="/send-confirm">confirm your email address</a> before rating.</div>');
                    } else {
                        if (l.csrf) {
                            $(g.target).closest("ul").children('[name="csrf"]').val(l.csrf);
                            setTimeout(function() {
                                a.submitRating(g, d);
                            }, 1);
                        }
                    }
                    ajax_done();
                }
            }, "json");
        };
        this.getScore = function(e) {
            var d = e.attr("data-rateref");
            return MetaC.scoreFromUrl(d);
        };
        this.links.on("click touchstart", function(f) {
            var g = a.getScore($(this));
            if (!MC_USER_LOGGED_IN && !a.displayOnly) {
                return ratingLogin("You must be logged in to add a rating or review", g);
            }
            if (g >= 0) {
                a.highlightRating($(this));
            } else {
                a.unHighlightAll();
                $(".yourscore .score_value", a.jq).text("0");
            }
            var d = $(this).attr("data-rateref");
            if (d.charAt(0) == "#") {
                a.setReviewScore(g);
            } else {
                if (d && !a.displayOnly) {
                    a.submitRating(f, d);
                }
            }
            return false;
        });
    }
};
mcMovieShowtimesModule = function(b) {
    this.jq = $(b);
    this.startTimer = null;
    this.closeTimer = null;
    this.lastHover = null;
    if (this.jq.length == 1) {
        var a = this;
        this.zipInput = this.jq.find("#showtimes_zipcode_input");
        this.showtimes = this.jq.find(".showtimes_list");
        this.geoloc = this.jq.find(".geolocation");
        this.showMap = function(f, h, e) {
            var d = f;
            var g = "http://maps.googleapis.com/maps/api/staticmap";
            g += "?size=300x300&maptype=roadmap&sensor=false";
            g += "&markers=color:blue%7C" + h;
            g += "&visible=" + h;
            g += "&center=" + e;
            var c = f.find(".theater_name").text();
            popPanelUp('<div style="font-weight:bold; font-size: 14px; width: 280px; overflow: hidden; margin-left: 3px;">' + c + '</div><img id="theater_map" style="width:300px; height:300px; margin: 6px 2px 2px 2px; border: 2px solid black;" src="' + g + '"/>', {
                fade: true
            });
            $("#theater_map").click(function() {
                var i = d.find(".map.external").attr("href");
                if (i) {
                    d.find(".map.external")[0].click();
                }
            });
        };
        this.startNuke = function() {
            if (a.closeTimer != null) {
                clearTimeout(a.closeTimer);
                a.closeTimer = null;
            }
            a.closeTimer = setTimeout(function() {
                a.nukeMap();
            }, 500);
        };
        this.nukeMap = function() {
            popPanelDown();
        };
        this.zipInput.change(function(d) {
            var c = $(this).val();
            if (c.length == 5) {
                MetaC.showtimeEvent(c);
                $.post(window.location.href, {
                    showtimes: 1,
                    zipcode: c
                }, function(e) {
                    a.showtimes.html(e);
                });
            }
        });
        if ("geolocation" in navigator) {
            this.geoloc.click(function(c) {
                ajax_busy(c);
                navigator.geolocation.getCurrentPosition(function(d) {
                    a.zipInput.val("");
                    MetaC.innerLabelIf(a.zipInput);
                    var f = d.coords.latitude;
                    var e = d.coords.longitude;
                    MetaC.showtimeEvent(null, f, e);
                    $.post(window.location.href, {
                        showtimes: 1,
                        latitude: f,
                        longitude: e
                    }, function(g) {
                        ajax_done(c);
                        a.showtimes.html(g);
                    });
                }, function(d) {
                    ajax_done(c);
                });
            });
        } else {
            this.geoloc.hide();
        }
        this.showtimes.on("mouseenter", "[data-map-coords]", function(f) {
            var d = $(this);
            var g = d.attr("data-map-coords");
            var c = d.attr("data-map-loc");
            if (a.closeTimer != null) {
                clearTimeout(a.closeTimer);
                a.closeTimer = null;
            }
            if (a.startTimer != null) {
                clearTimeout(a.startTimer);
            }
            a.startTimer = setTimeout(function() {
                if (a.lastHover == g && $("#theater_map").length > 0) {
                    return;
                }
                a.startTimer = null;
                a.showMap(d, g, c);
                a.lastHover = g;
            }, 350);
        });
        this.showtimes.on("mouseleave", "[data-map-coords]", function(c) {
            a.startNuke();
        });
        this.showtimes.on("click", ".showtimes_buy.external", function() {});
        $(document).on("mouseenter", "#theater_map", function() {
            if (a.closeTimer != null) {
                clearTimeout(a.closeTimer);
                a.closeTimer = null;
            }
        });
        $(document).on("mouseleave", "#theater_map", function() {
            a.startNuke();
        });
    }
};
mcCommentsModule = function(b) {
    this.jq = $(b);
    if (this.jq.length == 1) {
        var a = this;
        this.buttons = this.jq.find('input[type="submit"]');
        this.theForm = this.jq.find("form");
        this.feedback = this.jq.find(".form_feedback");
        this.submitIt = function(h, i) {
            var f = h;
            var d = i;
            var g = false;
            ajax_busy(h);
            var c = i.attr("name");
            params = this.theForm.serialize() + "&" + c + "=" + i.attr("value");
            $.post(this.theForm.attr("action"), params, function(e) {
                if (c == "post-comment") {
                    if (e.csrf) {
                        if (g) {
                            alert("An error occurred. Please try again later.");
                        } else {
                            g = true;
                            a.jq.find('[name="csrf"]').val(e.csrf);
                            a.submitIt(f, d);
                        }
                    } else {
                        a.jq.html(e.html);
                        a.jq.find("form").hide();
                    }
                } else {
                    if (typeof e.html == "string") {
                        a.feedback.html(e.html);
                        a.feedback.css("visibility", "visible");
                        a.feedback.css("display", "block");
                    } else {
                        alert("An error occurred. Please try again later.");
                    }
                }
                ajax_done();
            }, "json");
        };
        this.buttons.click(function(c) {
            a.submitIt(c, $(this));
            return false;
        });
    }
};
mcToaster = function(b) {
    this.jq = $(b);
    if (this.jq.length == 1) {
        var a = this;
        this.tabs = this.jq.find("li.tab");
        this.panels = this.jq.find("li.carousel_slot");
        this.n = 0;
        this.popup = function() {
            var d = this.jq.find(".active_slot");
            var c = 0;
            d.find("span.product_wrap").each(function() {
                var e = $(this);
                var f = e.data("height");
                e.css("height", 4);
                e.css("visibility", "visible");
                if (typeof window.chrome === "object") {
                    e.css("opacity", 0.01);
                    e.css("height", f);
                    e.delay(c).animate({
                        opacity: 1
                    }, 500);
                } else {
                    e.delay(c).animate({
                        height: f
                    }, 500);
                }
                c += 200;
            });
        };
        this.selectTab = function(c) {
            c = c % this.tabs.length;
            this.n = c;
            this.tabs.find(".active").removeClass("active");
            this.tabs.eq(c).children(":first").addClass("active");
            this.panels.removeClass("active_slot");
            this.panels.eq(c).addClass("active_slot");
            this.popup();
        };
        this.tabs.click(function(c) {
            clearInterval(a.autoTimer);
            a.autoTimer = null;
            var d = $(this).prevAll().length;
            a.selectTab(d);
            return false;
        });
        this.tabs.css("cursor", "pointer");
        this.jq.find("span.product_wrap").each(function() {
            var c = $(this);
            var e = c.find(".metascore_w").html();
            var d = Math.floor(120 + ((e / 100) * 120));
            d = d >= 160 ? d : 160;
            c.data("height", d);
        });
        setTimeout(function() {
            a.popup();
        }, 1000);
        this.autoTimer = setInterval(function() {
            a.selectTab(a.n + 1);
        }, 6000);
    }
};
mcCountDown = function(b, c) {
    var a = this;
    this.target = $(c);
    this.milliseconds = 0;
    this.now = new Date();
    this.blastOff = dateStampToJsDate(b);
    if (this.blastOff instanceof Date && isFinite(this.blastOff)) {
        this.timer = setInterval(function() {
            a.widgetIncrement();
        }, 1000);
    }
    this.widgetIncrement = function() {
        if (a.blastOff > a.now) {
            var j = a.blastOff - a.now - a.milliseconds;
            var g = (Math.floor((j / 1000) % 60)).toString();
            var e = (Math.floor((j / 60 / 1000) % 60)).toString();
            var f = (Math.floor((j / 60 / 60 / 1000) % 24)).toString();
            var i = (Math.floor(j / 24 / 60 / 60 / 1000)).toString();
            a.target.html(i + " days " + f + " hrs " + e + " mins " + g + " secs");
            a.milliseconds += 1000;
        } else {
            a.target.html("Available Now!");
            clearInterval(a.timer);
        }
    };
};
mcCountDownInsert = function(a) {
    document.write('<span id="mcCountDown"></span>');
    $(function() {
        var b = new mcCountDown(a, "#mcCountDown");
    });
};
mcComingSoonCarousel = function(b) {
    this.jq = $(b);
    if (this.jq.length == 1) {
        var a = this;
        this.tabs = this.jq.find("li.tab");
        this.pageLinks = this.jq.find("[data-page]");
        this.prev = this.jq.find(".coming_soon_page_nav .prev");
        this.next = this.jq.find(".coming_soon_page_nav .next");
        this.slider = this.jq.find(".coming_soon_wrap");
        this.currentPage = 0;
        this.pageWidth = this.jq.find(".coming_soon").width();
        this.totalWidth = this.slider.width();
        this.lastPage = this.pageLinks.length - 1;
        this.nextPage = function() {
            if (this.currentPage < this.lastPage) {
                this.gotoPage(this.currentPage + 1);
            } else {
                this.gotoPage(0);
            }
        };
        this.prevPage = function() {
            if (this.currentPage > 0) {
                this.gotoPage(this.currentPage - 1);
            } else {
                this.gotoPage(this.lastPage);
            }
        };
        this.gotoPage = function(d) {
            if (d >= 0 && d <= this.lastPage) {
                var c = -(d * this.pageWidth);
                this.slider.animate({
                    left: c
                });
                this.currentPage = d;
                this.pageLinks.removeClass("active");
                this.pageLinks.filter('[data-page="' + d + '"]').addClass("active");
            }
        };
        this.prev.click(function() {
            a.prevPage();
        });
        this.next.click(function() {
            a.nextPage();
        });
        this.pageLinks.click(function() {
            var c = $(this).attr("data-page");
            a.gotoPage(c);
        });
    }
};
String.prototype.setUrlParam = function(f, b) {
    var e = this.split("#");
    var a = e[0].replace("?", "&").split("&");
    var c, g = [],
        h = [],
        k = false;
    for (var d = 1; d < a.length; d++) {
        c = a[d].split("=");
        if (c[0] == f) {
            k = true;
            if (b !== false) {
                g.push(f);
                h.push(b ? "=" + b : "");
            }
        } else {
            g.push(c[0]);
            h.push(c[1] ? "=" + c[1] : "");
        }
    }
    if (!k) {
        if (b !== false) {
            g.push(f);
            h.push(b ? "=" + b : "");
        }
    }
    var j = a[0];
    for (d = 0; d < g.length; d++) {
        j += (d == 0 ? "?" : "&");
        j += g[d] + h[d];
    }
    j += e[1] ? "#" + e[1] : "";
    return j;
};
dateStampToJsDate = function(a) {
    var b = false;
    var c = a.split(" ").join(":").split("-").join(":").split(":");
    if (c.length == 6) {
        b = new Date(c[0], c[1] - 1, c[2], c[3], c[4], c[5]);
    }
    return b;
};
jQuery.fn.center = function() {
    this.css("position", "absolute");
    this.css("top", Math.max(0, (($(window).height() - this.outerHeight()) / 2) + $(window).scrollTop()) + "px");
    this.css("left", Math.max(0, (($(window).width() - this.outerWidth()) / 2) + $(window).scrollLeft()) + "px");
    return this;
};
mootoolsDomreadyFunctions = [];
window.addEvent = function(a, b) {
    if (a == "domready" && typeof(b) == "function") {
        mootoolsDomreadyFunctions[mootoolsDomreadyFunctions.length] = b;
    }
};
$(function() {
    for (var a = 0; a < mootoolsDomreadyFunctions.length; a++) {
        mootoolsDomreadyFunctions[a]();
    }
});

function popPanelUp(f, c) {
    if (c == null) {
        c = {};
    }
    popPanelDown();
    var e = "";
    if (c.modal) {
        e = '<div class="_pop_panel_backing"></div>';
        var b = $(document).height();
        var d = $(document).width();
        $("body").append(e);
        $("._pop_panel_backing").height(b).width(d);
        $("._pop_panel_backing").addClass("modal");
    } else {
        $(document).click(function(g) {
            if ($(g.target).closest("._pop_panel").length == 0) {
                popPanelDown();
            }
        });
    }
    e = '<div class="_pop_panel" style="';
    var a = "";
    a += (c.left == null) ? "" : "left:" + c.left + "px;";
    a += (c.top == null) ? "" : "top:" + c.top + "px;";
    e += a;
    if (c.fade) {
        e += "opacity: 0;";
    }
    e += '">';
    e += f;
    if (c.noClose != true) {
        e += '<a class="pop_close" onclick="popPanelDown()">&times;</a>';
    }
    e += "</div>";
    if ($("._pop_panel").length == 0) {
        $("body").append(e);
        if (!a) {
            $("._pop_panel").center();
        }
        if (c.fade) {
            $("._pop_panel").fadeTo("fast", 1);
        }
        if (c.modal) {
            $("._pop_panel").addClass("modal");
        }
        $(document).keyup(function(g) {
            if (g.keyCode == 27) {
                popPanelDown();
            }
        });
        if (c.closeCallback) {
            $("._pop_panel").data("close_callback", c.closeCallback);
        }
        $("._pop_panel").show();
        if (c.draggable) {
            makeDraggable("._pop_panel");
        }
    }
}

function popPanelDown() {
    var a = $("._pop_panel").data("close_callback");
    if (a) {
        a();
    }
    $("._pop_panel_backing").remove();
    $("._pop_panel").remove();
}
ratingLogin = function(c, d) {
    if (!MC_USER_LOGGED_IN) {
        if ($(".rating_signin_tmpl").length == 0) {
            mcLogin(c);
            return MC_USER_LOGGED_IN;
        }
        var g = '<form class="rating_signin_form" method="post">' + $(".rating_signin_tmpl").html() + "</form>";
        popPanelUp(g, {
            modal: true,
            closeCallback: ratingLoginClosed
        });
        $("._pop_panel .pop_close").css("top", 6).css("right", 16);
        var b = ".rating_signin_form .rating_action.rating_action_" + d + "0";
        $(b).addClass("selected");
        $(".rating_signin_form .review_score").val(d);
        var f = $(".rating_signin_form");
        if (f.length) {
            var e = f.find(".login_wrapper");
            var m = e.attr("data-fbenabled");
            var k = '<div class="login_data">';
            if (m == "1") {
                k = k + '<div style="text-align:center;"><button class="meta_fb_login" type="button">continue with Facebook</button><div style="margin:8px 0 0 5px;width:100%;font-size:15px;font-weight:bold;font-style: italic;">- Or -</div></div>';
            }
            k = k + '<div><label for="rating_email" class="first email_label">Email Address</label><div style="clear:both;"></div></div><div class="inp_txt_wrap"><input id="rating_email" class="text" type="text" name="email" value=""/></div><div><label for="rating_pwd" class="pwd_label">Password</label><a class="forgot" href="javascript:void(0);" tabindex="-1" onclick="MetaC.sForgotPwd();">Forgot password?</a><div style="clear:both;"></div></div><div class="inp_txt_wrap"><input id="rating_pwd" class="text" type="password" name="password"/></div><div class="form_feedback"></div><div><input class="BUTTON submit" type="submit" name="login" value="Log In"/><div class="newuser"> OR <a href="javascript:void(0);" onclick="MetaC.sSignup();">Create an Account</a></div><div style="clear:both;"></div></div></div>';
            e.append(k);
            $('.rating_signin_form input[name="email"]').focus();
            $("._pop_panel").center();
            var l = f.find('input[type="submit"]');
            var a = f.find(".form_feedback");
            var j = f.find('input[name="review"]');
            var h = f.find('input[name="close"]');
            var i = f.find(".meta_fb_login");
            j.click(function(n) {
                window.location = $(this).attr("data-href");
            });
            h.click(function(n) {
                window.location.reload();
            });
            i.click(function(n) {
                ajax_busy(MetaC.getOffsetPlus(i, 3, -23), true);
                if (MetaC.URS.appId) {
                    MetaC.URS.authFB(function(o, p) {
                        if (o == URS.events.AUTH_SUCCESS) {
                            $.post("/signup", {
                                fblogin: 1
                            }, function(q) {
                                if (q && q.success) {
                                    ajax_done();
                                    ratingLoginFinish(f);
                                } else {
                                    MetaC.sSignupFB();
                                }
                            });
                        }
                        if (o == URS.events.AUTH_FAILED_INVALID_USER || o == URS.events.AUTH_FAILED_NO_LINK) {
                            MetaC.sSignupFB();
                        } else {
                            ajax_done();
                            a.html("Unable to login via Facebook.  Please try again later.");
                        }
                    });
                } else {
                    MetaC.FB.login(function(o) {
                        if (o) {
                            $.post("/signup", {
                                fblogin: 1
                            }, function(p) {
                                if (p && p.success) {
                                    ratingLoginFinish(f);
                                } else {
                                    ajax_done();
                                    MetaC.sSignupFB();
                                }
                            });
                        } else {
                            ajax_done();
                        }
                    });
                }
            });
            l.click(function(n) {
                if (n.pageX == 0) {
                    var p = l.offset();
                    n.pageX = p.left + 20;
                    n.pageY = p.top + 20;
                }
                ajax_busy(n);
                var o = f.serialize() + "&login=true";
                $.post("/login", o, function(q) {
                    if (q.errors) {
                        a.html(q.errors.login);
                        a.css("display", "block").css("visibility", "visible");
                        ajax_done();
                    } else {
                        ratingLoginFinish(f);
                    }
                }, "json");
                return false;
            });
            if (FB) {
                FB.XFBML.parse($(".rating_signin_form")[0]);
            }
        }
    }
    return MC_USER_LOGGED_IN;
};
ratingLoginFinish = function(h) {
    var g = h;
    var a = g.find(".form_feedback");
    var e = g.find(".message");
    var c = g.find(".rating_action.selected");
    var b = c.attr("data-rateref");
    var f = b.split("?");
    if (f.length > 1) {
        f = f[1];
        var d = c.closest("ul").children('[name="csrf"]').val();
        if (d) {
            f = f + "&csrf=" + d;
        }
    }
    $.post(b, f, function(i) {
        if (i.success) {
            ajax_done();
            if (window.om) {
                if (window.om != undefined && om.trackRatingsAdd) {
                    var j = MetaC.scoreFromUrl(b);
                    om.trackRatingsAdd({
                        rating: j
                    });
                }
            }
            e.html("Your rating has been saved");
            g.find(".login_wrapper").hide();
            g.find(".after_login").show();
        } else {
            if (i.pendingUser) {
                ajax_done();
                g.find(".login_wrapper").hide();
                g.find(".after_message").html('You must <a href="/send-confirm">confirm you email address</a> before rating.<br/>');
                g.find(".after_login").show();
                g.find(".login_success").hide();
            } else {
                if (i.csrf) {
                    c.closest("ul").children('[name="csrf"]').val(i.csrf);
                    setTimeout(function() {
                        ratingLoginFinish(g);
                    }, 1);
                } else {
                    ajax_done();
                    a.html(i.errors);
                    a.css("display", "block").css("visibility", "visible");
                }
            }
        }
    }, "json");
};
ratingLoginClosed = function() {
    ajax_done();
    var a = $(".rating_signin_form");
    if (a.length > 0) {
        if (a.find(".after_login").is(":visible")) {
            window.location.reload();
        }
    }
};
mcLogin = function(c, d, a) {
    c = (typeof c == "string" && c.length > 2 ? c : false);
    var b = "/static/popupSigninForm.html?rnd=" + Date.now();
    $.get(b, function(e) {
        popPanelUp(e, {
            modal: true
        });
        jsLoginInit(".popup_signin_form", d, a);
        if (c) {
            $("._pop_panel .message").html(c);
        }
    });
    return MC_USER_LOGGED_IN;
};
jsLoginInit = function(c, g, a) {
    var h = $(c);
    if (h.length) {
        var e = h.find('input[type="submit"]');
        if (e.length == 0) {
            e = h.find('button[type="submit"]');
        }
        var b = h.find(".form_feedback");
        var f = h.find('input[name="path"]').attr("value");
        if (g) {
            var d = h.find('input[name="email"]');
            d.val(g);
            d.attr("readonly", "readonly");
        }
        e.click(function(i) {
            var j = h.serialize() + "&login=true";
            $.post(h.attr("action"), j, function(k) {
                if (k.errors) {
                    b.html(k.errors.login);
                    b.css("display", "block").css("visibility", "visible");
                    $("._pop_panel .message").hide();
                } else {
                    if (a) {
                        a();
                    } else {
                        if (typeof f == "string") {
                            document.location = f;
                        } else {
                            window.location.reload();
                        }
                    }
                }
                ajax_done();
            }, "json");
            return false;
        });
    }
};
MetaC.scoreFromUrl = function(c) {
    var d = 0;
    if (c) {
        if (c.charAt(0) == "#") {
            d = c.substring(1);
        } else {
            var b = c.indexOf("score=");
            if (b > -1) {
                var e = b + 6;
                var a = 1;
                if (c.length > e && c.charAt(e + 1) != "&") {
                    a = 2;
                }
                d = c.substr(b + 6, a);
            }
        }
    }
    return d;
};
MetaC.Hover = {
    timer: null,
    closeTimer: null,
    currentKeyname: null,
    currentAnchor: null,
    hrefs: {},
    moreLinkText: "More " + String.fromCharCode(187),
    getHtmlSize: function(b) {
        var c = $("#mc_sizing_div");
        if (c.length == 0) {
            $("body").append('<div id="mc_sizing_div"></div>');
            c = $("#mc_sizing_div");
        }
        c.empty();
        c.append(b);
        var a = {
            height: c.height(),
            width: c.width()
        };
        return a;
    },
    getData: function(a, d) {
        var b = a;
        var c = d;
        $.ajax({
            url: a,
            data: {
                hoverinfo: 1
            },
            type: "POST",
            success: function(f) {
                if (f.jsonRedirect) {
                    if (b != f.jsonRedirect) {
                        var e = c;
                        MetaC.Hover.getData(f.jsonRedirect, function(g) {
                            if (e) {
                                e(g);
                            }
                        });
                    }
                    return;
                }
                if (c) {
                    c(f);
                }
            }
        });
    },
    show: function(i, h) {
        var d = MetaC.Hover.getDiv();
        var c = d.height();
        var g = d.width();
        if (h) {
            $(".hover_content", d).empty();
            var m = MetaC.Hover.getHtmlSize(h);
            c = m.height;
            g = m.width;
            $(".hover_content", d).append(h);
        }
        d.css("min-width", g + 10);
        var j = i.children("div");
        if (j.length > 0) {
            i = $(j[0]);
        }
        var a = i.offset();
        a.left = a.left - 10;
        a.top = a.top + i.height() + 10;
        MetaC.Hover.setArrowDir("up");
        var b = $(window).scrollTop();
        var f = $(window).height();
        var l = Math.min($(document).width(), $(window).width());
        if (a.top + c > f + b - 20 && (a.left + i.width() + 20 + g + 40 < l || g < i.offset().left - 20)) {
            a.left = a.left + i.width() + 20;
            a.top = a.top - Math.max(c, i.height());
            MetaC.Hover.setArrowDir("left");
            var e = (f + b) - (a.top + c) - 20;
            if (e < 0) {
                a.top = (a.top + e);
            }
            if (a.top < b + 10) {
                a.top = 10 + b;
            }
            if (a.left + g + 40 > l) {
                if (g < i.offset().left - 20) {
                    a.left = i.offset().left - g - 32;
                    MetaC.Hover.setArrowDir("right");
                    $("#hover_div .product_image_wrapper img").load(function() {
                        var o = $("#hover_div .hover_arrow");
                        if (o.hasClass("right") && $("#hover_div").is(":visible")) {
                            MetaC.Hover.show(MetaC.Hover.currentAnchor);
                        }
                    });
                } else {}
            }
            var k = i.offset();
            var n = k.top - a.top - 2;
            if (n > 0) {
                $("#hover_div .hover_arrow").css("top", n);
            }
        } else {
            if (a.left + g + 42 > l) {
                var n = (a.left + g + 42) - l;
                if (n > 0) {
                    a.left = a.left - n;
                    if (a.left < 5) {
                        a.left = 5;
                    }
                    $("#hover_div .hover_arrow").css("left", n + 6);
                }
            }
        }
        d.css("top", a.top).css("left", a.left);
        d.show();
    },
    cancelTimer: function() {
        if (MetaC.Hover.timer) {
            clearTimeout(MetaC.Hover.timer);
            MetaC.Hover.timer = null;
        }
    },
    cancelCloseTimer: function() {
        if (MetaC.Hover.closeTimer) {
            clearTimeout(MetaC.Hover.closeTimer);
            MetaC.Hover.closeTimer = null;
        }
    },
    startCloseTimer: function() {
        MetaC.Hover.cancelCloseTimer();
        MetaC.Hover.closeTimer = setTimeout(function() {
            var a = MetaC.Hover.getDiv();
            a.hide();
        }, 250);
    },
    setArrowDir: function(a) {
        var b = $("#hover_div .hover_arrow");
        b.removeClass("up").removeClass("down").removeClass("left").removeClass("right").css("top", "").css("left", "");
        b.addClass(a);
    },
    getDiv: function() {
        var b = $("#hover_div");
        if (b.length == 0) {
            var a = '<div id="hover_div" class="hover_div" style=""><div class="hover_arrow"></div><div class="hover_content"></div></div>';
            $("body").append(a);
            b = $("#hover_div");
            b.hover(function() {
                MetaC.Hover.cancelCloseTimer();
                MetaC.Hover.cancelTimer();
            }, function() {
                MetaC.Hover.startCloseTimer();
            });
            b.on("mousedown", "a", function() {
                var c = $(".product_title a", MetaC.Hover.getDiv()).text();
                var e = $(this).attr("href");
                var d = "";
                var f = e.split("/");
                if (f.length > 1) {
                    d = MetaC.getTrackProductType(f[1]);
                }
            });
        }
        return b;
    }
};
MetaC.Gallery = {
    sliderPhotos: null,
    sliderWrap: null,
    slider: null,
    descScroll: null,
    primeAmt: 4,
    adRefreshTimer: null,
    lastTime: 0,
    shownOnce: false,
    additionalSlide: null,
    isIPad: false,
    lastUuid: null,
    init: function() {
        var a = MetaC.Gallery;
        a.sliderPhotos = $(".gallery_slider_photo");
        a.sliderWrap = $(".gallery_slider_wrap");
        a.slider = $(".gallery_slider");
        a.additionalSlide = $("#additional_galleries_photo");
        a.descScroll = $(".gallery_desc_scroll");
        if (a.additionalSlide.length == 0) {
            a.additionalSlide = null;
        }
        var b = "click";
        if (navigator.userAgent.match(/iPad/i) != null) {
            $(".gallery_popup").addClass("iPad");
            b = "touchend";
            a.isIPad = true;
        }
        $(".gallery_stub_seeAll, .gallery_stub_img").on(b, function(c) {
            MetaC.Gallery.open();
            return false;
        });
        $(".gallery_popup_backing").on(b, function(c) {
            if ($(c.target).closest(".gallery_popup").length == 0) {
                MetaC.Gallery.close();
            }
        });
        $(".gallery_close").on(b, function(c) {
            MetaC.Gallery.close();
        });
        $(".gallery_next, .gallery_header_next").on(b, function(c) {
            MetaC.Gallery.nextOrPrev();
        });
        $(".gallery_popup").on(b, ".gallery_photo", function(c) {
            MetaC.Gallery.nextOrPrev();
        });
        $(".gslider_previous").on(b, function(c) {
            MetaC.Gallery.jumpSlider(true);
        });
        $(".gslider_next").on(b, function(c) {
            MetaC.Gallery.jumpSlider();
        });
        $(".gallery_previous, .gallery_header_prev").on(b, function(c) {
            MetaC.Gallery.nextOrPrev(true);
        });
        a.sliderPhotos.on(b, function(f) {
            var d = $(this);
            var c = -1;
            MetaC.Gallery.sliderPhotos.each(function(g) {
                var e = $(this);
                if (d.attr("id") == e.attr("id")) {
                    c = g;
                    return false;
                }
                return true;
            });
            if (c > -1) {
                MetaC.Gallery.setSelected(c);
            }
        });
        $(".gallery_holder_left_top").on("mousewheel", function(d) {
            var c = a.descScroll.scrollTop();
            c -= d.deltaY * d.deltaFactor;
            a.descScroll.scrollTop(c);
        });
        a.primeAhead();
    },
    open: function() {
        var c = -1;
        var d = false;
        if (!MetaC.Gallery.shownOnce) {
            MetaC.Gallery.lastTime = Date.now();
            if (window.utag_data) {
                MetaC.Gallery.lastUuid = window.utag_data.pageViewGuid;
            } else {
                MetaC.Gallery.lastUuid = uuid.v1();
            }
            d = true;
            c = MetaC.Gallery.getCurIdx();
            MetaC.Gallery.trackPhoto();
            if (window._taboola && window.mcwait_taboola) {
                window.mcwait_taboola();
                _taboola.push({
                    flush: true
                });
            }
        }
        MetaC.Gallery.shownOnce = true;
        $(".gallery_popup_backing").show();
        $("body").addClass("showgallery stop-scrolling");
        if (c > 0) {
            MetaC.Gallery.setSlider();
        }
        $(window).on("keydown.gallery_popup", function(f) {
            if (f.which == 37) {
                MetaC.Gallery.nextOrPrev(true);
            } else {
                if (f.which == 39) {
                    MetaC.Gallery.nextOrPrev();
                }
            }
        });
        if (d) {
            if (window.metac_gallery_ads_pushdisplay) {
                googletag.pubads().setTargeting("ptype", "image_gallery");
                var b = [];
                var a = [];
                $.each(window.metac_gallery_ads_pushdisplay, function(e, f) {
                    googletag.cmd.push(function() {
                        window[f.varname] = googletag.defineSlot(f.arg1, f.arg2, f.arg3).addService(googletag.pubads()).setTargeting("pos", f.pos);
                        var g = window[f.varname];
                        a.push(g);
                        b.push(f.arg3);
                        if (f.strnativekey) {
                            g.setTargeting("strnativekey", f.strnativekey);
                        }
                    });
                });
                MetaC._pushAdsWithLightSpeed(b, a);
            }
        }
    },
    close: function() {
        $("body").removeClass("showgallery stop-scrolling");
        $(".gallery_popup_backing").hide();
        $(window).off("keydown.gallery_popup");
    },
    startAdTimer: function() {
        var a = Date.now();
        if (MetaC.Gallery.adRefreshTimer == null) {
            if (a - MetaC.Gallery.lastTime > 30000) {
                MetaC.Gallery.refreshAds();
            } else {
                MetaC.Gallery.adRefreshTimer = setTimeout(function() {
                    MetaC.Gallery.adRefreshTimer = null;
                    MetaC.Gallery.refreshAds();
                }, 30000);
            }
        }
    },
    refreshAds: function() {
        if (window.metac_gallery_ads_pushdisplay) {
            MetaC.Gallery.lastUuid = uuid.v1();
            googletag.pubads().setTargeting("vguid", MetaC.Gallery.lastUuid);
            var a = MetaC.handleGooglePageView();
            googletag.pubads().setTargeting("pv", a + "");
            MetaC._refreshWithLightSpeed(window.metac_gallery_ads_pushdisplay);
        }
        MetaC.Gallery.lastTime = Date.now();
    },
    nextOrPrev: function(b) {
        var c = b ? -1 : 1;
        var a = MetaC.Gallery.getCurIdx();
        MetaC.Gallery.setSelected(a + c);
    },
    setSelected: function(i) {
        var w = MetaC.Gallery;
        var x = w.sliderPhotos.length;
        if (w.additionalSlide) {
            x++;
        }
        if (i >= x || i < 0) {
            return;
        }
        w.primeAhead(i);
        var p = $(".gallery_desc_scroll");
        var h = $(".gallery_desc_top");
        var a = $(".gallery_desc_btm");
        var c = $(".gallery_desc_buy");
        var t = $(".gallery_source");
        var f = "";
        var q = "";
        var d = "";
        var n = "";
        var u = null;
        var v = w.additionalSlide;
        if (i >= w.sliderPhotos.length) {
            w.sliderPhotos.removeClass("selected");
        } else {
            u = $(w.sliderPhotos[i]);
            var s = u.find(".data_top");
            var l = u.find(".data_btm");
            var r = u.find(".data_buy");
            var k = u.find(".data_source");
            f = s.html();
            q = l.html();
            d = r.html();
            n = k.html();
            w.sliderPhotos.removeClass("selected");
            u.addClass("selected");
            var j = "#gp_" + u.data("metaid");
            v = $(j);
            $(".gallery_photo_num span").text(i + 1);
        }
        if (!w.isIPad) {
            p.hide();
        }
        h.html(f);
        a.html(q);
        c.html(d);
        t.hide();
        t.html(n);
        var g = $(".gallery_photo_current");
        g.removeClass("gallery_photo_current");
        v.addClass("gallery_photo_current");
        var m = $(".gallery_arrow.gallery_previous");
        var o = $(".gallery_arrow.gallery_next");
        var b = $(".gallery_header_prev");
        var e = $(".gallery_header_next");
        if (i == 0) {
            m.addClass("disabled");
            b.addClass("disabled");
        } else {
            m.removeClass("disabled");
            b.removeClass("disabled");
        }
        if (i >= x - 1) {
            o.addClass("disabled");
            e.addClass("disabled");
        } else {
            o.removeClass("disabled");
            e.removeClass("disabled");
        }
        w.setSlider();
        setTimeout(function() {
            $(".gallery_desc_scroll").show().scrollTop(0);
            $(".gallery_source").show();
        }, 10);
        w.refreshAds();
        w.trackPhoto();
    },
    setSlider: function() {
        var c = MetaC.Gallery.getSelected();
        if (c) {
            var f = c.position();
            var e = c.outerWidth(true);
            var a = MetaC.Gallery.sliderWrap.outerWidth(true);
            var d = MetaC.Gallery.slider.position();
            var b = 999999;
            if (f.left + e > a - d.left) {
                b = a - f.left - e;
                MetaC.Gallery.slider.css("left", b);
            } else {
                if (f.left < -d.left) {
                    b = -f.left;
                    if (b > 0) {
                        b = 0;
                    }
                    MetaC.Gallery.slider.css("left", b);
                }
            }
            if (b != 999999) {
                MetaC.Gallery.checkSliders(b);
            }
        }
    },
    trackPhoto: function() {
        var a = MetaC.Gallery.getSelected();
        var c = {
            pageViewGuid: MetaC.Gallery.lastUuid,
            photoId: -1,
            photoTitle: "Additional Galleries"
        };
        if (a && a.length > 0) {
            var d = a.find(".data_seo_title").text();
            c.photoId = a.data("metaid");
            c.photoTitle = d;
            var b = a.find(".amazon_buy");
            if (b.length > 0) {
                if (b.data("leadtype") == "Digital Subscription") {
                    c.eventAmazonPivView = true;
                } else {
                    c.eventAmazonBuyView = true;
                }
            }
        }
        if (window.om && om.trackPhotoView) {
            om.trackPhotoView(c);
        }
    },
    jumpSlider: function(f) {
        var h = $(MetaC.Gallery.sliderPhotos[MetaC.Gallery.sliderPhotos.length - 1]);
        var g = h.outerWidth(true);
        var e = -(h.position().left + g - MetaC.Gallery.sliderWrap.outerWidth(true));
        var d = MetaC.Gallery.slider.position().left;
        var a = 8;
        var b = g * a;
        if (f) {
            b = -b;
        }
        var c = d - b;
        if (c > 0) {
            c = 0;
        }
        if (c < e) {
            c = e;
        }
        MetaC.Gallery.slider.css("left", c);
        MetaC.Gallery.checkSliders(c);
    },
    checkSliders: function(d) {
        var c = $(".gslider_previous");
        var b = $(".gslider_next");
        var a = MetaC.Gallery.sliderWrap.outerWidth(true);
        if (d >= 0) {
            c.addClass("disabled");
        } else {
            c.removeClass("disabled");
        }
        var f = $(MetaC.Gallery.sliderPhotos[MetaC.Gallery.sliderPhotos.length - 1]);
        var e = f.position();
        if (e.left + f.outerWidth(true) <= a - d) {
            b.addClass("disabled");
        } else {
            b.removeClass("disabled");
        }
    },
    getCurIdx: function() {
        var a = 0;
        if (MetaC.Gallery.additionalSlide && MetaC.Gallery.additionalSlide.hasClass("gallery_photo_current")) {
            return MetaC.Gallery.sliderPhotos.length;
        }
        MetaC.Gallery.sliderPhotos.each(function(b) {
            if ($(this).hasClass("selected")) {
                a = b;
                return false;
            }
            return true;
        });
        return a;
    },
    getSelected: function() {
        var a = MetaC.Gallery.getCurIdx();
        if (a >= MetaC.Gallery.sliderPhotos.length) {
            return null;
        }
        return $(MetaC.Gallery.sliderPhotos[a]);
    },
    primeAhead: function(e) {
        var b = $(".gallery_photo");
        if (b.length == MetaC.Gallery.sliderPhotos.length) {
            return;
        }
        var i = b.length;
        if (e == null) {
            e = MetaC.Gallery.getCurIdx();
            i = 0;
        }
        var h = MetaC.Gallery.sliderPhotos.length - 1;
        var k = i + MetaC.Gallery.primeAmt;
        if (e > k) {
            k = e + MetaC.Gallery.primeAmt;
        }
        if (k > h) {
            k = h;
        }
        var l = $(".gallery_holder_left_top");
        for (; i <= k; i++) {
            var a = $(MetaC.Gallery.sliderPhotos[i]);
            var j = "gp_" + a.data("metaid");
            var g = $("#" + j);
            if (g.length == 0) {
                var f = $(".gallery_photo").filter(":first").clone();
                f.attr("id", j);
                f.removeClass("gallery_photo_current");
                var c = f.find(".gallery_blur_wrap img");
                c.attr("src", a.data("metaimgsrc"));
                var d = f.find(".gallery_img_wrap img");
                d.attr("src", a.data("metaimgsrc"));
                l.append(f);
            }
        }
    }
};
$(document).ready(function() {
    googletag.cmd.push(function() {
        var a = $("#leader_bottom");
        if (a.length > 0 && window.metac_g_ad_leader_bottom) {
            MetaC.ad_refresh_timer = null;
            $(window).on("scroll.bottomad", function() {
                if (MetaC.ad_refresh_timer == null) {
                    MetaC.ad_refresh_timer = setTimeout(function() {
                        MetaC._refreshWithLightSpeed([window.metac_g_ad_leader_bottom]);
                        MetaC.ad_refresh_timer = null;
                    }, 30000);
                }
            });
        }
    });
});
makeDraggable = function(a, c) {
    var b = $(a);
    var d = b;
    if (c) {
        d = $(c);
    }
    b.on("mousedown.makeDraggable", function(h) {
        var g = d.position();
        var i = (d.css("position") == "fixed");
        if (jQuery) {
            var f = jQuery().jquery;
            if (f && f.charAt(0) == "2") {
                i = false;
            }
        }
        var j = {
            dx: h.pageX - g.left,
            dy: h.pageY - g.top
        };
        d.addClass("dragging");
        $("body").on("mousemove.makeDraggable", function(m) {
            var l = m.pageX - j.dx;
            var k = m.pageY - j.dy;
            if (i) {
                k -= $(window).scrollTop();
            }
            d.css("left", l);
            d.css("top", k);
            return false;
        });
    });
    $("body").on("mouseup.makeDraggable", function(f) {
        $(this).off("mousemove.makeDraggable");
        d.removeClass("dragging");
    });
};
makeUndraggable = function(a, c) {
    var b = $(a);
    var d = b;
    if (c) {
        d = $(c);
    }
    b.off("mousedown.makeDraggable");
    $("body").off("mousemove.makeDraggable");
    d.removeClass("dragging");
};
